# IEClub API 测试指南

## 一、认证系统测试

### 1. 发送验证码
```bash
POST /api/auth/send-code
Content-Type: application/json

{
  "email": "test@mail.sustech.edu.cn",
  "type": "register"
}

# 预期响应
{
  "code": 200,
  "message": "验证码已发送，请查收邮件",
  "data": {
    "expiresIn": 600
  }
}
```

### 2. 注册
```bash
POST /api/auth/register
Content-Type: application/json

{
  "email": "test@mail.sustech.edu.cn",
  "username": "testuser",
  "password": "Test123456",
  "verificationCode": "123456"
}

# 预期响应
{
  "code": 201,
  "message": "注册成功",
  "data": {
    "user": {
      "id": "xxx",
      "username": "testuser",
      "email": "test@mail.sustech.edu.cn",
      "verified": true
    },
    "token": "eyJhbGciOiJIUzI1NiIs..."
  }
}
```

### 3. 登录
```bash
POST /api/auth/login
Content-Type: application/json

{
  "account": "testuser",
  "password": "Test123456"
}

# 预期响应
{
  "code": 200,
  "message": "登录成功",
  "data": {
    "user": { ... },
    "token": "eyJhbGciOiJIUzI1NiIs..."
  }
}
```

### 4. 修改密码
```bash
POST /api/auth/change-password
Authorization: Bearer <token>
Content-Type: application/json

{
  "oldPassword": "Test123456",
  "newPassword": "NewTest123456"
}

# 预期响应
{
  "code": 200,
  "message": "密码修改成功"
}
```

### 5. 忘记密码 - 第一步
```bash
POST /api/auth/forgot-password
Content-Type: application/json

{
  "email": "test@mail.sustech.edu.cn",
  "verificationCode": "123456"
}

# 预期响应
{
  "code": 200,
  "message": "验证成功",
  "data": {
    "resetToken": "xxx",
    "expiresIn": 1800
  }
}
```

### 6. 重置密码 - 第二步
```bash
POST /api/auth/reset-password
Content-Type: application/json

{
  "resetToken": "xxx",
  "newPassword": "NewTest123456"
}

# 预期响应
{
  "code": 200,
  "message": "密码重置成功，请使用新密码登录"
}
```

### 7. 查看登录日志
```bash
GET /api/auth/login-logs?page=1&limit=20
Authorization: Bearer <token>

# 预期响应
{
  "code": 200,
  "data": [
    {
      "id": "xxx",
      "ip": "127.0.0.1",
      "userAgent": "Mozilla/5.0...",
      "status": "success",
      "createdAt": "2025-01-20T12:00:00Z"
    }
  ],
  "pagination": {
    "page": 1,
    "limit": 20,
    "total": 5
  }
}
```

## 二、用户系统测试

### 1. 获取用户详情（支持筛选和排序）
```bash
GET /api/users/:id?sortBy=latest&filterType=all
Authorization: Bearer <token> (可选)

# 预期响应
{
  "code": 200,
  "data": {
    "user": {
      "id": "xxx",
      "username": "testuser",
      "nickname": "测试用户",
      "avatar": "https://...",
      "bio": "这是个人简介",
      "major": "计算机科学",
      "grade": "2024级",
      "skills": ["Python", "JavaScript", "React"],
      "interests": ["AI", "Web开发"],
      "topicCount": 10,
      "followerCount": 50,
      "followingCount": 30,
      "projectCount": 5
    },
    "isFollowing": false,
    "content": {
      "topics": [...],
      "projects": [...],
      "comments": [...]
    }
  }
}
```

### 2. 更新用户信息
```bash
PUT /api/users/:id
Authorization: Bearer <token>
Content-Type: application/json

{
  "nickname": "新昵称",
  "bio": "新的个人简介",
  "major": "计算机科学与技术",
  "grade": "2024级",
  "skills": ["Python", "JavaScript", "React", "Node.js"],
  "interests": ["人工智能", "Web开发", "开源"]
}

# 预期响应
{
  "code": 200,
  "message": "信息更新成功",
  "data": { ... }
}
```

### 3. 关注/取消关注用户
```bash
POST /api/users/:id/follow
Authorization: Bearer <token>

# 预期响应
{
  "code": 200,
  "message": "关注成功",
  "data": {
    "isFollowing": true
  }
}
```

### 4. 点赞用户（大拇指）
```bash
POST /api/users/:id/like
Authorization: Bearer <token>

# 预期响应
{
  "code": 200,
  "message": "点赞成功",
  "data": {
    "isLiked": true
  }
}
```

### 5. 收藏用户（红心）
```bash
POST /api/users/:id/heart
Authorization: Bearer <token>

# 预期响应
{
  "code": 200,
  "message": "收藏成功",
  "data": {
    "isHearted": true
  }
}
```

### 6. 高级搜索用户
```bash
GET /api/users/search?keyword=张三&major=计算机&skills=Python&sortBy=followers
Authorization: Bearer <token> (可选)

# 预期响应
{
  "code": 200,
  "data": [
    {
      "id": "xxx",
      "username": "zhangsan",
      "nickname": "张三",
      "major": "计算机科学",
      "skills": ["Python", "Java"],
      "topicCount": 10,
      "followerCount": 100
    }
  ],
  "pagination": {
    "page": 1,
    "limit": 20,
    "total": 5
  }
}
```

### 7. 获取关注/粉丝列表
```bash
GET /api/users/:id/following?page=1&limit=20
GET /api/users/:id/followers?page=1&limit=20

# 预期响应
{
  "code": 200,
  "data": [
    {
      "id": "xxx",
      "username": "user1",
      "nickname": "用户1",
      "avatar": "https://...",
      "bio": "简介",
      "followerCount": 50,
      "topicCount": 10
    }
  ],
  "pagination": { ... }
}
```

## 三、搜索系统测试

### 1. 综合搜索
```bash
GET /api/search?keyword=Python&type=all&sortBy=latest&page=1&limit=20
Authorization: Bearer <token> (可选)

# 预期响应
{
  "code": 200,
  "data": {
    "topics": [...],
    "users": [...],
    "projects": [...],
    "total": 25
  },
  "pagination": { ... }
}
```

### 2. 获取搜索建议
```bash
GET /api/search/suggestions?keyword=Py

# 预期响应
{
  "code": 200,
  "data": [
    {
      "text": "Python入门",
      "type": "topic"
    },
    {
      "text": "Python",
      "type": "tag"
    }
  ]
}
```

### 3. 获取热门搜索
```bash
GET /api/search/hot

# 预期响应
{
  "code": 200,
  "data": [
    {
      "keyword": "人工智能",
      "count": 150
    },
    {
      "keyword": "前端开发",
      "count": 120
    }
  ]
}
```

### 4. 获取/清除搜索历史
```bash
GET /api/search/history
Authorization: Bearer <token>

DELETE /api/search/history
Authorization: Bearer <token>
```

## 四、测试场景

### 场景1：新用户注册流程
1. 发送验证码到学校邮箱
2. 使用验证码注册账号
3. 自动登录获取 token
4. 完善个人信息（专业、技能等）

### 场景2：查看他人主页并互动
1. 搜索用户（可按专业、技能筛选）
2. 查看用户详情页
3. 点赞用户（大拇指）
4. 收藏用户（红心）
5. 关注用户
6. 查看用户的话题（可按时间/点赞数/收藏数排序）

### 场景3：密码安全管理
1. 登录后修改密码
2. 查看登录日志
3. 查看安全日志
4. 忘记密码时通过邮箱重置

### 场景4：搜索与发现
1. 使用关键词搜索
2. 按专业筛选用户
3. 按技能标签筛选用户
4. 查看热门搜索词
5. 查看个人搜索历史

## 五、常见错误码

- `200` - 成功
- `201` - 创建成功
- `400` - 请求参数错误
- `401` - 未登录或登录过期
- `403` - 无权限
- `404` - 资源不存在
- `500` - 服务器错误

## 六、测试注意事项

1. **验证码测试**：实际测试时需要配置真实的邮件服务器
2. **Token 过期**：默认7天过期，测试时注意刷新
3. **学校邮箱限制**：只允许配置的域名邮箱注册
4. **密码强度**：至少8个字符，包含字母和数字
5. **并发测试**：注意数据库连接池配置
6. **文件上传**：头像等文件上传需要配置存储路径

## 七、性能测试建议

1. **登录并发**：模拟100个用户同时登录
2. **搜索性能**：测试关键词搜索响应时间
3. **分页加载**：测试大量数据的分页性能
4. **数据库索引**：确保主要查询字段都有索引