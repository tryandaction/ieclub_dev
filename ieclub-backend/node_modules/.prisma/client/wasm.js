
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  openid: 'openid',
  unionid: 'unionid',
  sessionKey: 'sessionKey',
  nickname: 'nickname',
  avatar: 'avatar',
  gender: 'gender',
  email: 'email',
  phone: 'phone',
  bio: 'bio',
  skills: 'skills',
  interests: 'interests',
  credits: 'credits',
  level: 'level',
  exp: 'exp',
  topicsCount: 'topicsCount',
  commentsCount: 'commentsCount',
  likesCount: 'likesCount',
  fansCount: 'fansCount',
  followsCount: 'followsCount',
  status: 'status',
  isCertified: 'isCertified',
  isVip: 'isVip',
  lastLoginAt: 'lastLoginAt',
  lastActiveAt: 'lastActiveAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TopicScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  contentType: 'contentType',
  summary: 'summary',
  category: 'category',
  tags: 'tags',
  topicType: 'topicType',
  demandType: 'demandType',
  skillsNeeded: 'skillsNeeded',
  skillsProvided: 'skillsProvided',
  threshold: 'threshold',
  wantToHearCount: 'wantToHearCount',
  canTellCount: 'canTellCount',
  status: 'status',
  teamSize: 'teamSize',
  lookingForRoles: 'lookingForRoles',
  projectStage: 'projectStage',
  website: 'website',
  github: 'github',
  interestedCount: 'interestedCount',
  duration: 'duration',
  targetAudience: 'targetAudience',
  scheduledTime: 'scheduledTime',
  deadline: 'deadline',
  budget: 'budget',
  contactInfo: 'contactInfo',
  images: 'images',
  documents: 'documents',
  videos: 'videos',
  links: 'links',
  quickActions: 'quickActions',
  visibility: 'visibility',
  viewsCount: 'viewsCount',
  likesCount: 'likesCount',
  commentsCount: 'commentsCount',
  bookmarksCount: 'bookmarksCount',
  hotScore: 'hotScore',
  trendingScore: 'trendingScore',
  isHot: 'isHot',
  publishedAt: 'publishedAt',
  lastActiveAt: 'lastActiveAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  authorId: 'authorId'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  content: 'content',
  images: 'images',
  parentId: 'parentId',
  rootId: 'rootId',
  repliesCount: 'repliesCount',
  likesCount: 'likesCount',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  topicId: 'topicId',
  projectId: 'projectId',
  authorId: 'authorId'
};

exports.Prisma.LikeScalarFieldEnum = {
  id: 'id',
  targetType: 'targetType',
  targetId: 'targetId',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.BookmarkScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  userId: 'userId',
  topicId: 'topicId'
};

exports.Prisma.FollowScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  followerId: 'followerId',
  followingId: 'followingId'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  title: 'title',
  content: 'content',
  isRead: 'isRead',
  readAt: 'readAt',
  link: 'link',
  createdAt: 'createdAt',
  userId: 'userId',
  actorId: 'actorId',
  targetType: 'targetType',
  targetId: 'targetId'
};

exports.Prisma.UserActionScalarFieldEnum = {
  id: 'id',
  actionType: 'actionType',
  targetType: 'targetType',
  targetId: 'targetId',
  metadata: 'metadata',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.TopicQuickActionScalarFieldEnum = {
  id: 'id',
  actionType: 'actionType',
  createdAt: 'createdAt',
  topicId: 'topicId',
  userId: 'userId'
};

exports.Prisma.TopicActionScalarFieldEnum = {
  id: 'id',
  type: 'type',
  userId: 'userId',
  topicId: 'topicId',
  createdAt: 'createdAt'
};

exports.Prisma.ProjectActionScalarFieldEnum = {
  id: 'id',
  type: 'type',
  userId: 'userId',
  projectId: 'projectId',
  createdAt: 'createdAt'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  category: 'category',
  title: 'title',
  description: 'description',
  tags: 'tags',
  teamSize: 'teamSize',
  lookingForRoles: 'lookingForRoles',
  projectStage: 'projectStage',
  website: 'website',
  github: 'github',
  viewCount: 'viewCount',
  likeCount: 'likeCount',
  commentCount: 'commentCount',
  interestedCount: 'interestedCount',
  images: 'images',
  authorId: 'authorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  User: 'User',
  Topic: 'Topic',
  Comment: 'Comment',
  Like: 'Like',
  Bookmark: 'Bookmark',
  Follow: 'Follow',
  Notification: 'Notification',
  UserAction: 'UserAction',
  TopicQuickAction: 'TopicQuickAction',
  TopicAction: 'TopicAction',
  ProjectAction: 'ProjectAction',
  Project: 'Project'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
