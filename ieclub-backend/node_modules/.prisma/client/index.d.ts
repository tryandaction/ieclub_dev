
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Topic
 * 
 */
export type Topic = $Result.DefaultSelection<Prisma.$TopicPayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model Like
 * 
 */
export type Like = $Result.DefaultSelection<Prisma.$LikePayload>
/**
 * Model Bookmark
 * 
 */
export type Bookmark = $Result.DefaultSelection<Prisma.$BookmarkPayload>
/**
 * Model Follow
 * 
 */
export type Follow = $Result.DefaultSelection<Prisma.$FollowPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model UserAction
 * 
 */
export type UserAction = $Result.DefaultSelection<Prisma.$UserActionPayload>
/**
 * Model TopicQuickAction
 * 
 */
export type TopicQuickAction = $Result.DefaultSelection<Prisma.$TopicQuickActionPayload>
/**
 * Model TopicAction
 * 
 */
export type TopicAction = $Result.DefaultSelection<Prisma.$TopicActionPayload>
/**
 * Model ProjectAction
 * 
 */
export type ProjectAction = $Result.DefaultSelection<Prisma.$ProjectActionPayload>
/**
 * Model Project
 * 
 */
export type Project = $Result.DefaultSelection<Prisma.$ProjectPayload>
/**
 * Model Activity
 * 
 */
export type Activity = $Result.DefaultSelection<Prisma.$ActivityPayload>
/**
 * Model ActivityParticipant
 * 
 */
export type ActivityParticipant = $Result.DefaultSelection<Prisma.$ActivityParticipantPayload>
/**
 * Model ActivityLike
 * 
 */
export type ActivityLike = $Result.DefaultSelection<Prisma.$ActivityLikePayload>
/**
 * Model ActivityComment
 * 
 */
export type ActivityComment = $Result.DefaultSelection<Prisma.$ActivityCommentPayload>
/**
 * Model UserBinding
 * 
 */
export type UserBinding = $Result.DefaultSelection<Prisma.$UserBindingPayload>
/**
 * Model VerificationCode
 * 
 */
export type VerificationCode = $Result.DefaultSelection<Prisma.$VerificationCodePayload>
/**
 * Model LoginLog
 * 
 */
export type LoginLog = $Result.DefaultSelection<Prisma.$LoginLogPayload>
/**
 * Model Feedback
 * 
 */
export type Feedback = $Result.DefaultSelection<Prisma.$FeedbackPayload>
/**
 * Model FeedbackReply
 * 
 */
export type FeedbackReply = $Result.DefaultSelection<Prisma.$FeedbackReplyPayload>
/**
 * Model CreditLog
 * 
 */
export type CreditLog = $Result.DefaultSelection<Prisma.$CreditLogPayload>
/**
 * Model UserLevel
 * 
 */
export type UserLevel = $Result.DefaultSelection<Prisma.$UserLevelPayload>
/**
 * Model UserBadge
 * 
 */
export type UserBadge = $Result.DefaultSelection<Prisma.$UserBadgePayload>
/**
 * Model UserBadgeRecord
 * 
 */
export type UserBadgeRecord = $Result.DefaultSelection<Prisma.$UserBadgeRecordPayload>
/**
 * Model DailyCheckIn
 * 
 */
export type DailyCheckIn = $Result.DefaultSelection<Prisma.$DailyCheckInPayload>
/**
 * Model Role
 * 
 */
export type Role = $Result.DefaultSelection<Prisma.$RolePayload>
/**
 * Model Permission
 * 
 */
export type Permission = $Result.DefaultSelection<Prisma.$PermissionPayload>
/**
 * Model RolePermission
 * 
 */
export type RolePermission = $Result.DefaultSelection<Prisma.$RolePermissionPayload>
/**
 * Model UserRole
 * 
 */
export type UserRole = $Result.DefaultSelection<Prisma.$UserRolePayload>
/**
 * Model OperationLog
 * 
 */
export type OperationLog = $Result.DefaultSelection<Prisma.$OperationLogPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.topic`: Exposes CRUD operations for the **Topic** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Topics
    * const topics = await prisma.topic.findMany()
    * ```
    */
  get topic(): Prisma.TopicDelegate<ExtArgs>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs>;

  /**
   * `prisma.like`: Exposes CRUD operations for the **Like** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Likes
    * const likes = await prisma.like.findMany()
    * ```
    */
  get like(): Prisma.LikeDelegate<ExtArgs>;

  /**
   * `prisma.bookmark`: Exposes CRUD operations for the **Bookmark** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bookmarks
    * const bookmarks = await prisma.bookmark.findMany()
    * ```
    */
  get bookmark(): Prisma.BookmarkDelegate<ExtArgs>;

  /**
   * `prisma.follow`: Exposes CRUD operations for the **Follow** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Follows
    * const follows = await prisma.follow.findMany()
    * ```
    */
  get follow(): Prisma.FollowDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;

  /**
   * `prisma.userAction`: Exposes CRUD operations for the **UserAction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserActions
    * const userActions = await prisma.userAction.findMany()
    * ```
    */
  get userAction(): Prisma.UserActionDelegate<ExtArgs>;

  /**
   * `prisma.topicQuickAction`: Exposes CRUD operations for the **TopicQuickAction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TopicQuickActions
    * const topicQuickActions = await prisma.topicQuickAction.findMany()
    * ```
    */
  get topicQuickAction(): Prisma.TopicQuickActionDelegate<ExtArgs>;

  /**
   * `prisma.topicAction`: Exposes CRUD operations for the **TopicAction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TopicActions
    * const topicActions = await prisma.topicAction.findMany()
    * ```
    */
  get topicAction(): Prisma.TopicActionDelegate<ExtArgs>;

  /**
   * `prisma.projectAction`: Exposes CRUD operations for the **ProjectAction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProjectActions
    * const projectActions = await prisma.projectAction.findMany()
    * ```
    */
  get projectAction(): Prisma.ProjectActionDelegate<ExtArgs>;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<ExtArgs>;

  /**
   * `prisma.activity`: Exposes CRUD operations for the **Activity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Activities
    * const activities = await prisma.activity.findMany()
    * ```
    */
  get activity(): Prisma.ActivityDelegate<ExtArgs>;

  /**
   * `prisma.activityParticipant`: Exposes CRUD operations for the **ActivityParticipant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ActivityParticipants
    * const activityParticipants = await prisma.activityParticipant.findMany()
    * ```
    */
  get activityParticipant(): Prisma.ActivityParticipantDelegate<ExtArgs>;

  /**
   * `prisma.activityLike`: Exposes CRUD operations for the **ActivityLike** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ActivityLikes
    * const activityLikes = await prisma.activityLike.findMany()
    * ```
    */
  get activityLike(): Prisma.ActivityLikeDelegate<ExtArgs>;

  /**
   * `prisma.activityComment`: Exposes CRUD operations for the **ActivityComment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ActivityComments
    * const activityComments = await prisma.activityComment.findMany()
    * ```
    */
  get activityComment(): Prisma.ActivityCommentDelegate<ExtArgs>;

  /**
   * `prisma.userBinding`: Exposes CRUD operations for the **UserBinding** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserBindings
    * const userBindings = await prisma.userBinding.findMany()
    * ```
    */
  get userBinding(): Prisma.UserBindingDelegate<ExtArgs>;

  /**
   * `prisma.verificationCode`: Exposes CRUD operations for the **VerificationCode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationCodes
    * const verificationCodes = await prisma.verificationCode.findMany()
    * ```
    */
  get verificationCode(): Prisma.VerificationCodeDelegate<ExtArgs>;

  /**
   * `prisma.loginLog`: Exposes CRUD operations for the **LoginLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LoginLogs
    * const loginLogs = await prisma.loginLog.findMany()
    * ```
    */
  get loginLog(): Prisma.LoginLogDelegate<ExtArgs>;

  /**
   * `prisma.feedback`: Exposes CRUD operations for the **Feedback** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Feedbacks
    * const feedbacks = await prisma.feedback.findMany()
    * ```
    */
  get feedback(): Prisma.FeedbackDelegate<ExtArgs>;

  /**
   * `prisma.feedbackReply`: Exposes CRUD operations for the **FeedbackReply** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FeedbackReplies
    * const feedbackReplies = await prisma.feedbackReply.findMany()
    * ```
    */
  get feedbackReply(): Prisma.FeedbackReplyDelegate<ExtArgs>;

  /**
   * `prisma.creditLog`: Exposes CRUD operations for the **CreditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CreditLogs
    * const creditLogs = await prisma.creditLog.findMany()
    * ```
    */
  get creditLog(): Prisma.CreditLogDelegate<ExtArgs>;

  /**
   * `prisma.userLevel`: Exposes CRUD operations for the **UserLevel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserLevels
    * const userLevels = await prisma.userLevel.findMany()
    * ```
    */
  get userLevel(): Prisma.UserLevelDelegate<ExtArgs>;

  /**
   * `prisma.userBadge`: Exposes CRUD operations for the **UserBadge** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserBadges
    * const userBadges = await prisma.userBadge.findMany()
    * ```
    */
  get userBadge(): Prisma.UserBadgeDelegate<ExtArgs>;

  /**
   * `prisma.userBadgeRecord`: Exposes CRUD operations for the **UserBadgeRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserBadgeRecords
    * const userBadgeRecords = await prisma.userBadgeRecord.findMany()
    * ```
    */
  get userBadgeRecord(): Prisma.UserBadgeRecordDelegate<ExtArgs>;

  /**
   * `prisma.dailyCheckIn`: Exposes CRUD operations for the **DailyCheckIn** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DailyCheckIns
    * const dailyCheckIns = await prisma.dailyCheckIn.findMany()
    * ```
    */
  get dailyCheckIn(): Prisma.DailyCheckInDelegate<ExtArgs>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<ExtArgs>;

  /**
   * `prisma.permission`: Exposes CRUD operations for the **Permission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Permissions
    * const permissions = await prisma.permission.findMany()
    * ```
    */
  get permission(): Prisma.PermissionDelegate<ExtArgs>;

  /**
   * `prisma.rolePermission`: Exposes CRUD operations for the **RolePermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RolePermissions
    * const rolePermissions = await prisma.rolePermission.findMany()
    * ```
    */
  get rolePermission(): Prisma.RolePermissionDelegate<ExtArgs>;

  /**
   * `prisma.userRole`: Exposes CRUD operations for the **UserRole** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserRoles
    * const userRoles = await prisma.userRole.findMany()
    * ```
    */
  get userRole(): Prisma.UserRoleDelegate<ExtArgs>;

  /**
   * `prisma.operationLog`: Exposes CRUD operations for the **OperationLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OperationLogs
    * const operationLogs = await prisma.operationLog.findMany()
    * ```
    */
  get operationLog(): Prisma.OperationLogDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Topic: 'Topic',
    Comment: 'Comment',
    Like: 'Like',
    Bookmark: 'Bookmark',
    Follow: 'Follow',
    Notification: 'Notification',
    UserAction: 'UserAction',
    TopicQuickAction: 'TopicQuickAction',
    TopicAction: 'TopicAction',
    ProjectAction: 'ProjectAction',
    Project: 'Project',
    Activity: 'Activity',
    ActivityParticipant: 'ActivityParticipant',
    ActivityLike: 'ActivityLike',
    ActivityComment: 'ActivityComment',
    UserBinding: 'UserBinding',
    VerificationCode: 'VerificationCode',
    LoginLog: 'LoginLog',
    Feedback: 'Feedback',
    FeedbackReply: 'FeedbackReply',
    CreditLog: 'CreditLog',
    UserLevel: 'UserLevel',
    UserBadge: 'UserBadge',
    UserBadgeRecord: 'UserBadgeRecord',
    DailyCheckIn: 'DailyCheckIn',
    Role: 'Role',
    Permission: 'Permission',
    RolePermission: 'RolePermission',
    UserRole: 'UserRole',
    OperationLog: 'OperationLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "topic" | "comment" | "like" | "bookmark" | "follow" | "notification" | "userAction" | "topicQuickAction" | "topicAction" | "projectAction" | "project" | "activity" | "activityParticipant" | "activityLike" | "activityComment" | "userBinding" | "verificationCode" | "loginLog" | "feedback" | "feedbackReply" | "creditLog" | "userLevel" | "userBadge" | "userBadgeRecord" | "dailyCheckIn" | "role" | "permission" | "rolePermission" | "userRole" | "operationLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Topic: {
        payload: Prisma.$TopicPayload<ExtArgs>
        fields: Prisma.TopicFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TopicFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TopicFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicPayload>
          }
          findFirst: {
            args: Prisma.TopicFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TopicFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicPayload>
          }
          findMany: {
            args: Prisma.TopicFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicPayload>[]
          }
          create: {
            args: Prisma.TopicCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicPayload>
          }
          createMany: {
            args: Prisma.TopicCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TopicDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicPayload>
          }
          update: {
            args: Prisma.TopicUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicPayload>
          }
          deleteMany: {
            args: Prisma.TopicDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TopicUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TopicUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicPayload>
          }
          aggregate: {
            args: Prisma.TopicAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTopic>
          }
          groupBy: {
            args: Prisma.TopicGroupByArgs<ExtArgs>
            result: $Utils.Optional<TopicGroupByOutputType>[]
          }
          count: {
            args: Prisma.TopicCountArgs<ExtArgs>
            result: $Utils.Optional<TopicCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      Like: {
        payload: Prisma.$LikePayload<ExtArgs>
        fields: Prisma.LikeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LikeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LikeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          findFirst: {
            args: Prisma.LikeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LikeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          findMany: {
            args: Prisma.LikeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>[]
          }
          create: {
            args: Prisma.LikeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          createMany: {
            args: Prisma.LikeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.LikeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          update: {
            args: Prisma.LikeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          deleteMany: {
            args: Prisma.LikeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LikeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LikeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          aggregate: {
            args: Prisma.LikeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLike>
          }
          groupBy: {
            args: Prisma.LikeGroupByArgs<ExtArgs>
            result: $Utils.Optional<LikeGroupByOutputType>[]
          }
          count: {
            args: Prisma.LikeCountArgs<ExtArgs>
            result: $Utils.Optional<LikeCountAggregateOutputType> | number
          }
        }
      }
      Bookmark: {
        payload: Prisma.$BookmarkPayload<ExtArgs>
        fields: Prisma.BookmarkFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BookmarkFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BookmarkFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload>
          }
          findFirst: {
            args: Prisma.BookmarkFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BookmarkFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload>
          }
          findMany: {
            args: Prisma.BookmarkFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload>[]
          }
          create: {
            args: Prisma.BookmarkCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload>
          }
          createMany: {
            args: Prisma.BookmarkCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BookmarkDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload>
          }
          update: {
            args: Prisma.BookmarkUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload>
          }
          deleteMany: {
            args: Prisma.BookmarkDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BookmarkUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BookmarkUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload>
          }
          aggregate: {
            args: Prisma.BookmarkAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBookmark>
          }
          groupBy: {
            args: Prisma.BookmarkGroupByArgs<ExtArgs>
            result: $Utils.Optional<BookmarkGroupByOutputType>[]
          }
          count: {
            args: Prisma.BookmarkCountArgs<ExtArgs>
            result: $Utils.Optional<BookmarkCountAggregateOutputType> | number
          }
        }
      }
      Follow: {
        payload: Prisma.$FollowPayload<ExtArgs>
        fields: Prisma.FollowFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FollowFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FollowFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>
          }
          findFirst: {
            args: Prisma.FollowFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FollowFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>
          }
          findMany: {
            args: Prisma.FollowFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>[]
          }
          create: {
            args: Prisma.FollowCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>
          }
          createMany: {
            args: Prisma.FollowCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.FollowDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>
          }
          update: {
            args: Prisma.FollowUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>
          }
          deleteMany: {
            args: Prisma.FollowDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FollowUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FollowUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>
          }
          aggregate: {
            args: Prisma.FollowAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFollow>
          }
          groupBy: {
            args: Prisma.FollowGroupByArgs<ExtArgs>
            result: $Utils.Optional<FollowGroupByOutputType>[]
          }
          count: {
            args: Prisma.FollowCountArgs<ExtArgs>
            result: $Utils.Optional<FollowCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      UserAction: {
        payload: Prisma.$UserActionPayload<ExtArgs>
        fields: Prisma.UserActionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserActionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserActionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActionPayload>
          }
          findFirst: {
            args: Prisma.UserActionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserActionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActionPayload>
          }
          findMany: {
            args: Prisma.UserActionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActionPayload>[]
          }
          create: {
            args: Prisma.UserActionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActionPayload>
          }
          createMany: {
            args: Prisma.UserActionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserActionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActionPayload>
          }
          update: {
            args: Prisma.UserActionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActionPayload>
          }
          deleteMany: {
            args: Prisma.UserActionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserActionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserActionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActionPayload>
          }
          aggregate: {
            args: Prisma.UserActionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserAction>
          }
          groupBy: {
            args: Prisma.UserActionGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserActionGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserActionCountArgs<ExtArgs>
            result: $Utils.Optional<UserActionCountAggregateOutputType> | number
          }
        }
      }
      TopicQuickAction: {
        payload: Prisma.$TopicQuickActionPayload<ExtArgs>
        fields: Prisma.TopicQuickActionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TopicQuickActionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicQuickActionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TopicQuickActionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicQuickActionPayload>
          }
          findFirst: {
            args: Prisma.TopicQuickActionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicQuickActionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TopicQuickActionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicQuickActionPayload>
          }
          findMany: {
            args: Prisma.TopicQuickActionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicQuickActionPayload>[]
          }
          create: {
            args: Prisma.TopicQuickActionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicQuickActionPayload>
          }
          createMany: {
            args: Prisma.TopicQuickActionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TopicQuickActionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicQuickActionPayload>
          }
          update: {
            args: Prisma.TopicQuickActionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicQuickActionPayload>
          }
          deleteMany: {
            args: Prisma.TopicQuickActionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TopicQuickActionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TopicQuickActionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicQuickActionPayload>
          }
          aggregate: {
            args: Prisma.TopicQuickActionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTopicQuickAction>
          }
          groupBy: {
            args: Prisma.TopicQuickActionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TopicQuickActionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TopicQuickActionCountArgs<ExtArgs>
            result: $Utils.Optional<TopicQuickActionCountAggregateOutputType> | number
          }
        }
      }
      TopicAction: {
        payload: Prisma.$TopicActionPayload<ExtArgs>
        fields: Prisma.TopicActionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TopicActionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicActionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TopicActionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicActionPayload>
          }
          findFirst: {
            args: Prisma.TopicActionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicActionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TopicActionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicActionPayload>
          }
          findMany: {
            args: Prisma.TopicActionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicActionPayload>[]
          }
          create: {
            args: Prisma.TopicActionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicActionPayload>
          }
          createMany: {
            args: Prisma.TopicActionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TopicActionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicActionPayload>
          }
          update: {
            args: Prisma.TopicActionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicActionPayload>
          }
          deleteMany: {
            args: Prisma.TopicActionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TopicActionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TopicActionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicActionPayload>
          }
          aggregate: {
            args: Prisma.TopicActionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTopicAction>
          }
          groupBy: {
            args: Prisma.TopicActionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TopicActionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TopicActionCountArgs<ExtArgs>
            result: $Utils.Optional<TopicActionCountAggregateOutputType> | number
          }
        }
      }
      ProjectAction: {
        payload: Prisma.$ProjectActionPayload<ExtArgs>
        fields: Prisma.ProjectActionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectActionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectActionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectActionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectActionPayload>
          }
          findFirst: {
            args: Prisma.ProjectActionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectActionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectActionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectActionPayload>
          }
          findMany: {
            args: Prisma.ProjectActionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectActionPayload>[]
          }
          create: {
            args: Prisma.ProjectActionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectActionPayload>
          }
          createMany: {
            args: Prisma.ProjectActionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProjectActionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectActionPayload>
          }
          update: {
            args: Prisma.ProjectActionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectActionPayload>
          }
          deleteMany: {
            args: Prisma.ProjectActionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectActionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProjectActionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectActionPayload>
          }
          aggregate: {
            args: Prisma.ProjectActionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProjectAction>
          }
          groupBy: {
            args: Prisma.ProjectActionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectActionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectActionCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectActionCountAggregateOutputType> | number
          }
        }
      }
      Project: {
        payload: Prisma.$ProjectPayload<ExtArgs>
        fields: Prisma.ProjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findFirst: {
            args: Prisma.ProjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findMany: {
            args: Prisma.ProjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          create: {
            args: Prisma.ProjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          createMany: {
            args: Prisma.ProjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          update: {
            args: Prisma.ProjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          deleteMany: {
            args: Prisma.ProjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          aggregate: {
            args: Prisma.ProjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProject>
          }
          groupBy: {
            args: Prisma.ProjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectCountAggregateOutputType> | number
          }
        }
      }
      Activity: {
        payload: Prisma.$ActivityPayload<ExtArgs>
        fields: Prisma.ActivityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActivityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActivityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          findFirst: {
            args: Prisma.ActivityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActivityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          findMany: {
            args: Prisma.ActivityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>[]
          }
          create: {
            args: Prisma.ActivityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          createMany: {
            args: Prisma.ActivityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ActivityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          update: {
            args: Prisma.ActivityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          deleteMany: {
            args: Prisma.ActivityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ActivityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ActivityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          aggregate: {
            args: Prisma.ActivityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActivity>
          }
          groupBy: {
            args: Prisma.ActivityGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActivityGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActivityCountArgs<ExtArgs>
            result: $Utils.Optional<ActivityCountAggregateOutputType> | number
          }
        }
      }
      ActivityParticipant: {
        payload: Prisma.$ActivityParticipantPayload<ExtArgs>
        fields: Prisma.ActivityParticipantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActivityParticipantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityParticipantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActivityParticipantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityParticipantPayload>
          }
          findFirst: {
            args: Prisma.ActivityParticipantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityParticipantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActivityParticipantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityParticipantPayload>
          }
          findMany: {
            args: Prisma.ActivityParticipantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityParticipantPayload>[]
          }
          create: {
            args: Prisma.ActivityParticipantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityParticipantPayload>
          }
          createMany: {
            args: Prisma.ActivityParticipantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ActivityParticipantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityParticipantPayload>
          }
          update: {
            args: Prisma.ActivityParticipantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityParticipantPayload>
          }
          deleteMany: {
            args: Prisma.ActivityParticipantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ActivityParticipantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ActivityParticipantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityParticipantPayload>
          }
          aggregate: {
            args: Prisma.ActivityParticipantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActivityParticipant>
          }
          groupBy: {
            args: Prisma.ActivityParticipantGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActivityParticipantGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActivityParticipantCountArgs<ExtArgs>
            result: $Utils.Optional<ActivityParticipantCountAggregateOutputType> | number
          }
        }
      }
      ActivityLike: {
        payload: Prisma.$ActivityLikePayload<ExtArgs>
        fields: Prisma.ActivityLikeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActivityLikeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLikePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActivityLikeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLikePayload>
          }
          findFirst: {
            args: Prisma.ActivityLikeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLikePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActivityLikeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLikePayload>
          }
          findMany: {
            args: Prisma.ActivityLikeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLikePayload>[]
          }
          create: {
            args: Prisma.ActivityLikeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLikePayload>
          }
          createMany: {
            args: Prisma.ActivityLikeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ActivityLikeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLikePayload>
          }
          update: {
            args: Prisma.ActivityLikeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLikePayload>
          }
          deleteMany: {
            args: Prisma.ActivityLikeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ActivityLikeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ActivityLikeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLikePayload>
          }
          aggregate: {
            args: Prisma.ActivityLikeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActivityLike>
          }
          groupBy: {
            args: Prisma.ActivityLikeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActivityLikeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActivityLikeCountArgs<ExtArgs>
            result: $Utils.Optional<ActivityLikeCountAggregateOutputType> | number
          }
        }
      }
      ActivityComment: {
        payload: Prisma.$ActivityCommentPayload<ExtArgs>
        fields: Prisma.ActivityCommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActivityCommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityCommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActivityCommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityCommentPayload>
          }
          findFirst: {
            args: Prisma.ActivityCommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityCommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActivityCommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityCommentPayload>
          }
          findMany: {
            args: Prisma.ActivityCommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityCommentPayload>[]
          }
          create: {
            args: Prisma.ActivityCommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityCommentPayload>
          }
          createMany: {
            args: Prisma.ActivityCommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ActivityCommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityCommentPayload>
          }
          update: {
            args: Prisma.ActivityCommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityCommentPayload>
          }
          deleteMany: {
            args: Prisma.ActivityCommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ActivityCommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ActivityCommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityCommentPayload>
          }
          aggregate: {
            args: Prisma.ActivityCommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActivityComment>
          }
          groupBy: {
            args: Prisma.ActivityCommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActivityCommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActivityCommentCountArgs<ExtArgs>
            result: $Utils.Optional<ActivityCommentCountAggregateOutputType> | number
          }
        }
      }
      UserBinding: {
        payload: Prisma.$UserBindingPayload<ExtArgs>
        fields: Prisma.UserBindingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserBindingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBindingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserBindingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBindingPayload>
          }
          findFirst: {
            args: Prisma.UserBindingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBindingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserBindingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBindingPayload>
          }
          findMany: {
            args: Prisma.UserBindingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBindingPayload>[]
          }
          create: {
            args: Prisma.UserBindingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBindingPayload>
          }
          createMany: {
            args: Prisma.UserBindingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserBindingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBindingPayload>
          }
          update: {
            args: Prisma.UserBindingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBindingPayload>
          }
          deleteMany: {
            args: Prisma.UserBindingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserBindingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserBindingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBindingPayload>
          }
          aggregate: {
            args: Prisma.UserBindingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserBinding>
          }
          groupBy: {
            args: Prisma.UserBindingGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserBindingGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserBindingCountArgs<ExtArgs>
            result: $Utils.Optional<UserBindingCountAggregateOutputType> | number
          }
        }
      }
      VerificationCode: {
        payload: Prisma.$VerificationCodePayload<ExtArgs>
        fields: Prisma.VerificationCodeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationCodeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationCodePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationCodeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationCodePayload>
          }
          findFirst: {
            args: Prisma.VerificationCodeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationCodePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationCodeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationCodePayload>
          }
          findMany: {
            args: Prisma.VerificationCodeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationCodePayload>[]
          }
          create: {
            args: Prisma.VerificationCodeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationCodePayload>
          }
          createMany: {
            args: Prisma.VerificationCodeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.VerificationCodeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationCodePayload>
          }
          update: {
            args: Prisma.VerificationCodeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationCodePayload>
          }
          deleteMany: {
            args: Prisma.VerificationCodeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationCodeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VerificationCodeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationCodePayload>
          }
          aggregate: {
            args: Prisma.VerificationCodeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerificationCode>
          }
          groupBy: {
            args: Prisma.VerificationCodeGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationCodeGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationCodeCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationCodeCountAggregateOutputType> | number
          }
        }
      }
      LoginLog: {
        payload: Prisma.$LoginLogPayload<ExtArgs>
        fields: Prisma.LoginLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LoginLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LoginLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginLogPayload>
          }
          findFirst: {
            args: Prisma.LoginLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LoginLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginLogPayload>
          }
          findMany: {
            args: Prisma.LoginLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginLogPayload>[]
          }
          create: {
            args: Prisma.LoginLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginLogPayload>
          }
          createMany: {
            args: Prisma.LoginLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.LoginLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginLogPayload>
          }
          update: {
            args: Prisma.LoginLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginLogPayload>
          }
          deleteMany: {
            args: Prisma.LoginLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LoginLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LoginLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginLogPayload>
          }
          aggregate: {
            args: Prisma.LoginLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLoginLog>
          }
          groupBy: {
            args: Prisma.LoginLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<LoginLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.LoginLogCountArgs<ExtArgs>
            result: $Utils.Optional<LoginLogCountAggregateOutputType> | number
          }
        }
      }
      Feedback: {
        payload: Prisma.$FeedbackPayload<ExtArgs>
        fields: Prisma.FeedbackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeedbackFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeedbackFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findFirst: {
            args: Prisma.FeedbackFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeedbackFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findMany: {
            args: Prisma.FeedbackFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          create: {
            args: Prisma.FeedbackCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          createMany: {
            args: Prisma.FeedbackCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.FeedbackDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          update: {
            args: Prisma.FeedbackUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          deleteMany: {
            args: Prisma.FeedbackDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeedbackUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FeedbackUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          aggregate: {
            args: Prisma.FeedbackAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeedback>
          }
          groupBy: {
            args: Prisma.FeedbackGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeedbackGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeedbackCountArgs<ExtArgs>
            result: $Utils.Optional<FeedbackCountAggregateOutputType> | number
          }
        }
      }
      FeedbackReply: {
        payload: Prisma.$FeedbackReplyPayload<ExtArgs>
        fields: Prisma.FeedbackReplyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeedbackReplyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackReplyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeedbackReplyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackReplyPayload>
          }
          findFirst: {
            args: Prisma.FeedbackReplyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackReplyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeedbackReplyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackReplyPayload>
          }
          findMany: {
            args: Prisma.FeedbackReplyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackReplyPayload>[]
          }
          create: {
            args: Prisma.FeedbackReplyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackReplyPayload>
          }
          createMany: {
            args: Prisma.FeedbackReplyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.FeedbackReplyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackReplyPayload>
          }
          update: {
            args: Prisma.FeedbackReplyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackReplyPayload>
          }
          deleteMany: {
            args: Prisma.FeedbackReplyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeedbackReplyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FeedbackReplyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackReplyPayload>
          }
          aggregate: {
            args: Prisma.FeedbackReplyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeedbackReply>
          }
          groupBy: {
            args: Prisma.FeedbackReplyGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeedbackReplyGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeedbackReplyCountArgs<ExtArgs>
            result: $Utils.Optional<FeedbackReplyCountAggregateOutputType> | number
          }
        }
      }
      CreditLog: {
        payload: Prisma.$CreditLogPayload<ExtArgs>
        fields: Prisma.CreditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CreditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CreditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditLogPayload>
          }
          findFirst: {
            args: Prisma.CreditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CreditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditLogPayload>
          }
          findMany: {
            args: Prisma.CreditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditLogPayload>[]
          }
          create: {
            args: Prisma.CreditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditLogPayload>
          }
          createMany: {
            args: Prisma.CreditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CreditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditLogPayload>
          }
          update: {
            args: Prisma.CreditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditLogPayload>
          }
          deleteMany: {
            args: Prisma.CreditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CreditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CreditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditLogPayload>
          }
          aggregate: {
            args: Prisma.CreditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCreditLog>
          }
          groupBy: {
            args: Prisma.CreditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<CreditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.CreditLogCountArgs<ExtArgs>
            result: $Utils.Optional<CreditLogCountAggregateOutputType> | number
          }
        }
      }
      UserLevel: {
        payload: Prisma.$UserLevelPayload<ExtArgs>
        fields: Prisma.UserLevelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserLevelFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLevelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserLevelFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLevelPayload>
          }
          findFirst: {
            args: Prisma.UserLevelFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLevelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserLevelFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLevelPayload>
          }
          findMany: {
            args: Prisma.UserLevelFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLevelPayload>[]
          }
          create: {
            args: Prisma.UserLevelCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLevelPayload>
          }
          createMany: {
            args: Prisma.UserLevelCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserLevelDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLevelPayload>
          }
          update: {
            args: Prisma.UserLevelUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLevelPayload>
          }
          deleteMany: {
            args: Prisma.UserLevelDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserLevelUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserLevelUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLevelPayload>
          }
          aggregate: {
            args: Prisma.UserLevelAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserLevel>
          }
          groupBy: {
            args: Prisma.UserLevelGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserLevelGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserLevelCountArgs<ExtArgs>
            result: $Utils.Optional<UserLevelCountAggregateOutputType> | number
          }
        }
      }
      UserBadge: {
        payload: Prisma.$UserBadgePayload<ExtArgs>
        fields: Prisma.UserBadgeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserBadgeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserBadgeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          findFirst: {
            args: Prisma.UserBadgeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserBadgeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          findMany: {
            args: Prisma.UserBadgeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>[]
          }
          create: {
            args: Prisma.UserBadgeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          createMany: {
            args: Prisma.UserBadgeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserBadgeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          update: {
            args: Prisma.UserBadgeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          deleteMany: {
            args: Prisma.UserBadgeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserBadgeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserBadgeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          aggregate: {
            args: Prisma.UserBadgeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserBadge>
          }
          groupBy: {
            args: Prisma.UserBadgeGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserBadgeGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserBadgeCountArgs<ExtArgs>
            result: $Utils.Optional<UserBadgeCountAggregateOutputType> | number
          }
        }
      }
      UserBadgeRecord: {
        payload: Prisma.$UserBadgeRecordPayload<ExtArgs>
        fields: Prisma.UserBadgeRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserBadgeRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgeRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserBadgeRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgeRecordPayload>
          }
          findFirst: {
            args: Prisma.UserBadgeRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgeRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserBadgeRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgeRecordPayload>
          }
          findMany: {
            args: Prisma.UserBadgeRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgeRecordPayload>[]
          }
          create: {
            args: Prisma.UserBadgeRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgeRecordPayload>
          }
          createMany: {
            args: Prisma.UserBadgeRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserBadgeRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgeRecordPayload>
          }
          update: {
            args: Prisma.UserBadgeRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgeRecordPayload>
          }
          deleteMany: {
            args: Prisma.UserBadgeRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserBadgeRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserBadgeRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgeRecordPayload>
          }
          aggregate: {
            args: Prisma.UserBadgeRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserBadgeRecord>
          }
          groupBy: {
            args: Prisma.UserBadgeRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserBadgeRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserBadgeRecordCountArgs<ExtArgs>
            result: $Utils.Optional<UserBadgeRecordCountAggregateOutputType> | number
          }
        }
      }
      DailyCheckIn: {
        payload: Prisma.$DailyCheckInPayload<ExtArgs>
        fields: Prisma.DailyCheckInFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DailyCheckInFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyCheckInPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DailyCheckInFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyCheckInPayload>
          }
          findFirst: {
            args: Prisma.DailyCheckInFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyCheckInPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DailyCheckInFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyCheckInPayload>
          }
          findMany: {
            args: Prisma.DailyCheckInFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyCheckInPayload>[]
          }
          create: {
            args: Prisma.DailyCheckInCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyCheckInPayload>
          }
          createMany: {
            args: Prisma.DailyCheckInCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DailyCheckInDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyCheckInPayload>
          }
          update: {
            args: Prisma.DailyCheckInUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyCheckInPayload>
          }
          deleteMany: {
            args: Prisma.DailyCheckInDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DailyCheckInUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DailyCheckInUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyCheckInPayload>
          }
          aggregate: {
            args: Prisma.DailyCheckInAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDailyCheckIn>
          }
          groupBy: {
            args: Prisma.DailyCheckInGroupByArgs<ExtArgs>
            result: $Utils.Optional<DailyCheckInGroupByOutputType>[]
          }
          count: {
            args: Prisma.DailyCheckInCountArgs<ExtArgs>
            result: $Utils.Optional<DailyCheckInCountAggregateOutputType> | number
          }
        }
      }
      Role: {
        payload: Prisma.$RolePayload<ExtArgs>
        fields: Prisma.RoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findFirst: {
            args: Prisma.RoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findMany: {
            args: Prisma.RoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          create: {
            args: Prisma.RoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          createMany: {
            args: Prisma.RoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          update: {
            args: Prisma.RoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          deleteMany: {
            args: Prisma.RoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.RoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleCountArgs<ExtArgs>
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      Permission: {
        payload: Prisma.$PermissionPayload<ExtArgs>
        fields: Prisma.PermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          findFirst: {
            args: Prisma.PermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          findMany: {
            args: Prisma.PermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>[]
          }
          create: {
            args: Prisma.PermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          createMany: {
            args: Prisma.PermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          update: {
            args: Prisma.PermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          deleteMany: {
            args: Prisma.PermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          aggregate: {
            args: Prisma.PermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePermission>
          }
          groupBy: {
            args: Prisma.PermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PermissionCountArgs<ExtArgs>
            result: $Utils.Optional<PermissionCountAggregateOutputType> | number
          }
        }
      }
      RolePermission: {
        payload: Prisma.$RolePermissionPayload<ExtArgs>
        fields: Prisma.RolePermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RolePermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RolePermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          findFirst: {
            args: Prisma.RolePermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RolePermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          findMany: {
            args: Prisma.RolePermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>[]
          }
          create: {
            args: Prisma.RolePermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          createMany: {
            args: Prisma.RolePermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RolePermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          update: {
            args: Prisma.RolePermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          deleteMany: {
            args: Prisma.RolePermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RolePermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RolePermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          aggregate: {
            args: Prisma.RolePermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRolePermission>
          }
          groupBy: {
            args: Prisma.RolePermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<RolePermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.RolePermissionCountArgs<ExtArgs>
            result: $Utils.Optional<RolePermissionCountAggregateOutputType> | number
          }
        }
      }
      UserRole: {
        payload: Prisma.$UserRolePayload<ExtArgs>
        fields: Prisma.UserRoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserRoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserRoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          findFirst: {
            args: Prisma.UserRoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserRoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          findMany: {
            args: Prisma.UserRoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>[]
          }
          create: {
            args: Prisma.UserRoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          createMany: {
            args: Prisma.UserRoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserRoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          update: {
            args: Prisma.UserRoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          deleteMany: {
            args: Prisma.UserRoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserRoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserRoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          aggregate: {
            args: Prisma.UserRoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserRole>
          }
          groupBy: {
            args: Prisma.UserRoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserRoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserRoleCountArgs<ExtArgs>
            result: $Utils.Optional<UserRoleCountAggregateOutputType> | number
          }
        }
      }
      OperationLog: {
        payload: Prisma.$OperationLogPayload<ExtArgs>
        fields: Prisma.OperationLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OperationLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OperationLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationLogPayload>
          }
          findFirst: {
            args: Prisma.OperationLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OperationLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationLogPayload>
          }
          findMany: {
            args: Prisma.OperationLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationLogPayload>[]
          }
          create: {
            args: Prisma.OperationLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationLogPayload>
          }
          createMany: {
            args: Prisma.OperationLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.OperationLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationLogPayload>
          }
          update: {
            args: Prisma.OperationLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationLogPayload>
          }
          deleteMany: {
            args: Prisma.OperationLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OperationLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OperationLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationLogPayload>
          }
          aggregate: {
            args: Prisma.OperationLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOperationLog>
          }
          groupBy: {
            args: Prisma.OperationLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<OperationLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.OperationLogCountArgs<ExtArgs>
            result: $Utils.Optional<OperationLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    topics: number
    projects: number
    comments: number
    likes: number
    bookmarks: number
    follows: number
    followers: number
    sentNotifications: number
    receivedNotifications: number
    userActions: number
    topicQuickActions: number
    topicActions: number
    projectActions: number
    activities: number
    activityParticipants: number
    activityLikes: number
    activityComments: number
    userBindings: number
    loginLogs: number
    feedbacks: number
    feedbackReplies: number
    creditLogs: number
    badgeRecords: number
    checkIns: number
    roles: number
    operationLogs: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    topics?: boolean | UserCountOutputTypeCountTopicsArgs
    projects?: boolean | UserCountOutputTypeCountProjectsArgs
    comments?: boolean | UserCountOutputTypeCountCommentsArgs
    likes?: boolean | UserCountOutputTypeCountLikesArgs
    bookmarks?: boolean | UserCountOutputTypeCountBookmarksArgs
    follows?: boolean | UserCountOutputTypeCountFollowsArgs
    followers?: boolean | UserCountOutputTypeCountFollowersArgs
    sentNotifications?: boolean | UserCountOutputTypeCountSentNotificationsArgs
    receivedNotifications?: boolean | UserCountOutputTypeCountReceivedNotificationsArgs
    userActions?: boolean | UserCountOutputTypeCountUserActionsArgs
    topicQuickActions?: boolean | UserCountOutputTypeCountTopicQuickActionsArgs
    topicActions?: boolean | UserCountOutputTypeCountTopicActionsArgs
    projectActions?: boolean | UserCountOutputTypeCountProjectActionsArgs
    activities?: boolean | UserCountOutputTypeCountActivitiesArgs
    activityParticipants?: boolean | UserCountOutputTypeCountActivityParticipantsArgs
    activityLikes?: boolean | UserCountOutputTypeCountActivityLikesArgs
    activityComments?: boolean | UserCountOutputTypeCountActivityCommentsArgs
    userBindings?: boolean | UserCountOutputTypeCountUserBindingsArgs
    loginLogs?: boolean | UserCountOutputTypeCountLoginLogsArgs
    feedbacks?: boolean | UserCountOutputTypeCountFeedbacksArgs
    feedbackReplies?: boolean | UserCountOutputTypeCountFeedbackRepliesArgs
    creditLogs?: boolean | UserCountOutputTypeCountCreditLogsArgs
    badgeRecords?: boolean | UserCountOutputTypeCountBadgeRecordsArgs
    checkIns?: boolean | UserCountOutputTypeCountCheckInsArgs
    roles?: boolean | UserCountOutputTypeCountRolesArgs
    operationLogs?: boolean | UserCountOutputTypeCountOperationLogsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTopicsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TopicWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBookmarksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookmarkWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFollowsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FollowWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFollowersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FollowWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSentNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReceivedNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserActionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTopicQuickActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TopicQuickActionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTopicActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TopicActionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProjectActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectActionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountActivityParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityParticipantWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountActivityLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityLikeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountActivityCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityCommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserBindingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserBindingWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLoginLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoginLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFeedbackRepliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackReplyWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CreditLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBadgeRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserBadgeRecordWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCheckInsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DailyCheckInWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRoleWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOperationLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OperationLogWhereInput
  }


  /**
   * Count Type TopicCountOutputType
   */

  export type TopicCountOutputType = {
    comments: number
    likes: number
    bookmarks: number
    notifications: number
    userActions: number
    quickActionsList: number
    actions: number
  }

  export type TopicCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comments?: boolean | TopicCountOutputTypeCountCommentsArgs
    likes?: boolean | TopicCountOutputTypeCountLikesArgs
    bookmarks?: boolean | TopicCountOutputTypeCountBookmarksArgs
    notifications?: boolean | TopicCountOutputTypeCountNotificationsArgs
    userActions?: boolean | TopicCountOutputTypeCountUserActionsArgs
    quickActionsList?: boolean | TopicCountOutputTypeCountQuickActionsListArgs
    actions?: boolean | TopicCountOutputTypeCountActionsArgs
  }

  // Custom InputTypes
  /**
   * TopicCountOutputType without action
   */
  export type TopicCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopicCountOutputType
     */
    select?: TopicCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TopicCountOutputType without action
   */
  export type TopicCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * TopicCountOutputType without action
   */
  export type TopicCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeWhereInput
  }

  /**
   * TopicCountOutputType without action
   */
  export type TopicCountOutputTypeCountBookmarksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookmarkWhereInput
  }

  /**
   * TopicCountOutputType without action
   */
  export type TopicCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * TopicCountOutputType without action
   */
  export type TopicCountOutputTypeCountUserActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserActionWhereInput
  }

  /**
   * TopicCountOutputType without action
   */
  export type TopicCountOutputTypeCountQuickActionsListArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TopicQuickActionWhereInput
  }

  /**
   * TopicCountOutputType without action
   */
  export type TopicCountOutputTypeCountActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TopicActionWhereInput
  }


  /**
   * Count Type CommentCountOutputType
   */

  export type CommentCountOutputType = {
    replies: number
    likes: number
    notifications: number
  }

  export type CommentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    replies?: boolean | CommentCountOutputTypeCountRepliesArgs
    likes?: boolean | CommentCountOutputTypeCountLikesArgs
    notifications?: boolean | CommentCountOutputTypeCountNotificationsArgs
  }

  // Custom InputTypes
  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentCountOutputType
     */
    select?: CommentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeCountRepliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeWhereInput
  }

  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }


  /**
   * Count Type ProjectCountOutputType
   */

  export type ProjectCountOutputType = {
    comments: number
    actions: number
  }

  export type ProjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comments?: boolean | ProjectCountOutputTypeCountCommentsArgs
    actions?: boolean | ProjectCountOutputTypeCountActionsArgs
  }

  // Custom InputTypes
  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     */
    select?: ProjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectActionWhereInput
  }


  /**
   * Count Type ActivityCountOutputType
   */

  export type ActivityCountOutputType = {
    participants: number
    likes: number
    comments: number
  }

  export type ActivityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participants?: boolean | ActivityCountOutputTypeCountParticipantsArgs
    likes?: boolean | ActivityCountOutputTypeCountLikesArgs
    comments?: boolean | ActivityCountOutputTypeCountCommentsArgs
  }

  // Custom InputTypes
  /**
   * ActivityCountOutputType without action
   */
  export type ActivityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityCountOutputType
     */
    select?: ActivityCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ActivityCountOutputType without action
   */
  export type ActivityCountOutputTypeCountParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityParticipantWhereInput
  }

  /**
   * ActivityCountOutputType without action
   */
  export type ActivityCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityLikeWhereInput
  }

  /**
   * ActivityCountOutputType without action
   */
  export type ActivityCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityCommentWhereInput
  }


  /**
   * Count Type FeedbackCountOutputType
   */

  export type FeedbackCountOutputType = {
    reply: number
  }

  export type FeedbackCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reply?: boolean | FeedbackCountOutputTypeCountReplyArgs
  }

  // Custom InputTypes
  /**
   * FeedbackCountOutputType without action
   */
  export type FeedbackCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackCountOutputType
     */
    select?: FeedbackCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FeedbackCountOutputType without action
   */
  export type FeedbackCountOutputTypeCountReplyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackReplyWhereInput
  }


  /**
   * Count Type UserBadgeCountOutputType
   */

  export type UserBadgeCountOutputType = {
    userRecords: number
  }

  export type UserBadgeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userRecords?: boolean | UserBadgeCountOutputTypeCountUserRecordsArgs
  }

  // Custom InputTypes
  /**
   * UserBadgeCountOutputType without action
   */
  export type UserBadgeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadgeCountOutputType
     */
    select?: UserBadgeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserBadgeCountOutputType without action
   */
  export type UserBadgeCountOutputTypeCountUserRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserBadgeRecordWhereInput
  }


  /**
   * Count Type RoleCountOutputType
   */

  export type RoleCountOutputType = {
    userRoles: number
    permissions: number
  }

  export type RoleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userRoles?: boolean | RoleCountOutputTypeCountUserRolesArgs
    permissions?: boolean | RoleCountOutputTypeCountPermissionsArgs
  }

  // Custom InputTypes
  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     */
    select?: RoleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountUserRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRoleWhereInput
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RolePermissionWhereInput
  }


  /**
   * Count Type PermissionCountOutputType
   */

  export type PermissionCountOutputType = {
    roles: number
  }

  export type PermissionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roles?: boolean | PermissionCountOutputTypeCountRolesArgs
  }

  // Custom InputTypes
  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionCountOutputType
     */
    select?: PermissionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeCountRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RolePermissionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    gender: number | null
    credits: number | null
    level: number | null
    exp: number | null
    topicsCount: number | null
    commentsCount: number | null
    likesCount: number | null
    fansCount: number | null
    followsCount: number | null
  }

  export type UserSumAggregateOutputType = {
    gender: number | null
    credits: number | null
    level: number | null
    exp: number | null
    topicsCount: number | null
    commentsCount: number | null
    likesCount: number | null
    fansCount: number | null
    followsCount: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    openid: string | null
    unionid: string | null
    sessionKey: string | null
    nickname: string | null
    avatar: string | null
    gender: number | null
    phone: string | null
    bio: string | null
    school: string | null
    major: string | null
    grade: string | null
    verified: boolean | null
    skills: string | null
    interests: string | null
    credits: number | null
    level: number | null
    exp: number | null
    topicsCount: number | null
    commentsCount: number | null
    likesCount: number | null
    fansCount: number | null
    followsCount: number | null
    status: string | null
    isCertified: boolean | null
    isVip: boolean | null
    lastLoginAt: Date | null
    lastActiveAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    openid: string | null
    unionid: string | null
    sessionKey: string | null
    nickname: string | null
    avatar: string | null
    gender: number | null
    phone: string | null
    bio: string | null
    school: string | null
    major: string | null
    grade: string | null
    verified: boolean | null
    skills: string | null
    interests: string | null
    credits: number | null
    level: number | null
    exp: number | null
    topicsCount: number | null
    commentsCount: number | null
    likesCount: number | null
    fansCount: number | null
    followsCount: number | null
    status: string | null
    isCertified: boolean | null
    isVip: boolean | null
    lastLoginAt: Date | null
    lastActiveAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    openid: number
    unionid: number
    sessionKey: number
    nickname: number
    avatar: number
    gender: number
    phone: number
    bio: number
    school: number
    major: number
    grade: number
    verified: number
    skills: number
    interests: number
    credits: number
    level: number
    exp: number
    topicsCount: number
    commentsCount: number
    likesCount: number
    fansCount: number
    followsCount: number
    status: number
    isCertified: number
    isVip: number
    lastLoginAt: number
    lastActiveAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    gender?: true
    credits?: true
    level?: true
    exp?: true
    topicsCount?: true
    commentsCount?: true
    likesCount?: true
    fansCount?: true
    followsCount?: true
  }

  export type UserSumAggregateInputType = {
    gender?: true
    credits?: true
    level?: true
    exp?: true
    topicsCount?: true
    commentsCount?: true
    likesCount?: true
    fansCount?: true
    followsCount?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    openid?: true
    unionid?: true
    sessionKey?: true
    nickname?: true
    avatar?: true
    gender?: true
    phone?: true
    bio?: true
    school?: true
    major?: true
    grade?: true
    verified?: true
    skills?: true
    interests?: true
    credits?: true
    level?: true
    exp?: true
    topicsCount?: true
    commentsCount?: true
    likesCount?: true
    fansCount?: true
    followsCount?: true
    status?: true
    isCertified?: true
    isVip?: true
    lastLoginAt?: true
    lastActiveAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    openid?: true
    unionid?: true
    sessionKey?: true
    nickname?: true
    avatar?: true
    gender?: true
    phone?: true
    bio?: true
    school?: true
    major?: true
    grade?: true
    verified?: true
    skills?: true
    interests?: true
    credits?: true
    level?: true
    exp?: true
    topicsCount?: true
    commentsCount?: true
    likesCount?: true
    fansCount?: true
    followsCount?: true
    status?: true
    isCertified?: true
    isVip?: true
    lastLoginAt?: true
    lastActiveAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    openid?: true
    unionid?: true
    sessionKey?: true
    nickname?: true
    avatar?: true
    gender?: true
    phone?: true
    bio?: true
    school?: true
    major?: true
    grade?: true
    verified?: true
    skills?: true
    interests?: true
    credits?: true
    level?: true
    exp?: true
    topicsCount?: true
    commentsCount?: true
    likesCount?: true
    fansCount?: true
    followsCount?: true
    status?: true
    isCertified?: true
    isVip?: true
    lastLoginAt?: true
    lastActiveAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    openid: string | null
    unionid: string | null
    sessionKey: string | null
    nickname: string
    avatar: string | null
    gender: number
    phone: string | null
    bio: string | null
    school: string | null
    major: string | null
    grade: string | null
    verified: boolean
    skills: string | null
    interests: string | null
    credits: number
    level: number
    exp: number
    topicsCount: number
    commentsCount: number
    likesCount: number
    fansCount: number
    followsCount: number
    status: string
    isCertified: boolean
    isVip: boolean
    lastLoginAt: Date | null
    lastActiveAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    openid?: boolean
    unionid?: boolean
    sessionKey?: boolean
    nickname?: boolean
    avatar?: boolean
    gender?: boolean
    phone?: boolean
    bio?: boolean
    school?: boolean
    major?: boolean
    grade?: boolean
    verified?: boolean
    skills?: boolean
    interests?: boolean
    credits?: boolean
    level?: boolean
    exp?: boolean
    topicsCount?: boolean
    commentsCount?: boolean
    likesCount?: boolean
    fansCount?: boolean
    followsCount?: boolean
    status?: boolean
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: boolean
    lastActiveAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    topics?: boolean | User$topicsArgs<ExtArgs>
    projects?: boolean | User$projectsArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    likes?: boolean | User$likesArgs<ExtArgs>
    bookmarks?: boolean | User$bookmarksArgs<ExtArgs>
    follows?: boolean | User$followsArgs<ExtArgs>
    followers?: boolean | User$followersArgs<ExtArgs>
    sentNotifications?: boolean | User$sentNotificationsArgs<ExtArgs>
    receivedNotifications?: boolean | User$receivedNotificationsArgs<ExtArgs>
    userActions?: boolean | User$userActionsArgs<ExtArgs>
    topicQuickActions?: boolean | User$topicQuickActionsArgs<ExtArgs>
    topicActions?: boolean | User$topicActionsArgs<ExtArgs>
    projectActions?: boolean | User$projectActionsArgs<ExtArgs>
    activities?: boolean | User$activitiesArgs<ExtArgs>
    activityParticipants?: boolean | User$activityParticipantsArgs<ExtArgs>
    activityLikes?: boolean | User$activityLikesArgs<ExtArgs>
    activityComments?: boolean | User$activityCommentsArgs<ExtArgs>
    userBindings?: boolean | User$userBindingsArgs<ExtArgs>
    loginLogs?: boolean | User$loginLogsArgs<ExtArgs>
    feedbacks?: boolean | User$feedbacksArgs<ExtArgs>
    feedbackReplies?: boolean | User$feedbackRepliesArgs<ExtArgs>
    creditLogs?: boolean | User$creditLogsArgs<ExtArgs>
    badgeRecords?: boolean | User$badgeRecordsArgs<ExtArgs>
    checkIns?: boolean | User$checkInsArgs<ExtArgs>
    roles?: boolean | User$rolesArgs<ExtArgs>
    operationLogs?: boolean | User$operationLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    openid?: boolean
    unionid?: boolean
    sessionKey?: boolean
    nickname?: boolean
    avatar?: boolean
    gender?: boolean
    phone?: boolean
    bio?: boolean
    school?: boolean
    major?: boolean
    grade?: boolean
    verified?: boolean
    skills?: boolean
    interests?: boolean
    credits?: boolean
    level?: boolean
    exp?: boolean
    topicsCount?: boolean
    commentsCount?: boolean
    likesCount?: boolean
    fansCount?: boolean
    followsCount?: boolean
    status?: boolean
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: boolean
    lastActiveAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    topics?: boolean | User$topicsArgs<ExtArgs>
    projects?: boolean | User$projectsArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    likes?: boolean | User$likesArgs<ExtArgs>
    bookmarks?: boolean | User$bookmarksArgs<ExtArgs>
    follows?: boolean | User$followsArgs<ExtArgs>
    followers?: boolean | User$followersArgs<ExtArgs>
    sentNotifications?: boolean | User$sentNotificationsArgs<ExtArgs>
    receivedNotifications?: boolean | User$receivedNotificationsArgs<ExtArgs>
    userActions?: boolean | User$userActionsArgs<ExtArgs>
    topicQuickActions?: boolean | User$topicQuickActionsArgs<ExtArgs>
    topicActions?: boolean | User$topicActionsArgs<ExtArgs>
    projectActions?: boolean | User$projectActionsArgs<ExtArgs>
    activities?: boolean | User$activitiesArgs<ExtArgs>
    activityParticipants?: boolean | User$activityParticipantsArgs<ExtArgs>
    activityLikes?: boolean | User$activityLikesArgs<ExtArgs>
    activityComments?: boolean | User$activityCommentsArgs<ExtArgs>
    userBindings?: boolean | User$userBindingsArgs<ExtArgs>
    loginLogs?: boolean | User$loginLogsArgs<ExtArgs>
    feedbacks?: boolean | User$feedbacksArgs<ExtArgs>
    feedbackReplies?: boolean | User$feedbackRepliesArgs<ExtArgs>
    creditLogs?: boolean | User$creditLogsArgs<ExtArgs>
    badgeRecords?: boolean | User$badgeRecordsArgs<ExtArgs>
    checkIns?: boolean | User$checkInsArgs<ExtArgs>
    roles?: boolean | User$rolesArgs<ExtArgs>
    operationLogs?: boolean | User$operationLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      topics: Prisma.$TopicPayload<ExtArgs>[]
      projects: Prisma.$ProjectPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
      likes: Prisma.$LikePayload<ExtArgs>[]
      bookmarks: Prisma.$BookmarkPayload<ExtArgs>[]
      follows: Prisma.$FollowPayload<ExtArgs>[]
      followers: Prisma.$FollowPayload<ExtArgs>[]
      sentNotifications: Prisma.$NotificationPayload<ExtArgs>[]
      receivedNotifications: Prisma.$NotificationPayload<ExtArgs>[]
      userActions: Prisma.$UserActionPayload<ExtArgs>[]
      topicQuickActions: Prisma.$TopicQuickActionPayload<ExtArgs>[]
      topicActions: Prisma.$TopicActionPayload<ExtArgs>[]
      projectActions: Prisma.$ProjectActionPayload<ExtArgs>[]
      activities: Prisma.$ActivityPayload<ExtArgs>[]
      activityParticipants: Prisma.$ActivityParticipantPayload<ExtArgs>[]
      activityLikes: Prisma.$ActivityLikePayload<ExtArgs>[]
      activityComments: Prisma.$ActivityCommentPayload<ExtArgs>[]
      userBindings: Prisma.$UserBindingPayload<ExtArgs>[]
      loginLogs: Prisma.$LoginLogPayload<ExtArgs>[]
      feedbacks: Prisma.$FeedbackPayload<ExtArgs>[]
      feedbackReplies: Prisma.$FeedbackReplyPayload<ExtArgs>[]
      creditLogs: Prisma.$CreditLogPayload<ExtArgs>[]
      badgeRecords: Prisma.$UserBadgeRecordPayload<ExtArgs>[]
      checkIns: Prisma.$DailyCheckInPayload<ExtArgs>[]
      roles: Prisma.$UserRolePayload<ExtArgs>[]
      operationLogs: Prisma.$OperationLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      openid: string | null
      unionid: string | null
      sessionKey: string | null
      nickname: string
      avatar: string | null
      gender: number
      phone: string | null
      bio: string | null
      school: string | null
      major: string | null
      grade: string | null
      verified: boolean
      skills: string | null
      interests: string | null
      credits: number
      level: number
      exp: number
      topicsCount: number
      commentsCount: number
      likesCount: number
      fansCount: number
      followsCount: number
      status: string
      isCertified: boolean
      isVip: boolean
      lastLoginAt: Date | null
      lastActiveAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    topics<T extends User$topicsArgs<ExtArgs> = {}>(args?: Subset<T, User$topicsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findMany"> | Null>
    projects<T extends User$projectsArgs<ExtArgs> = {}>(args?: Subset<T, User$projectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany"> | Null>
    comments<T extends User$commentsArgs<ExtArgs> = {}>(args?: Subset<T, User$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany"> | Null>
    likes<T extends User$likesArgs<ExtArgs> = {}>(args?: Subset<T, User$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findMany"> | Null>
    bookmarks<T extends User$bookmarksArgs<ExtArgs> = {}>(args?: Subset<T, User$bookmarksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, "findMany"> | Null>
    follows<T extends User$followsArgs<ExtArgs> = {}>(args?: Subset<T, User$followsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findMany"> | Null>
    followers<T extends User$followersArgs<ExtArgs> = {}>(args?: Subset<T, User$followersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findMany"> | Null>
    sentNotifications<T extends User$sentNotificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$sentNotificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    receivedNotifications<T extends User$receivedNotificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$receivedNotificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    userActions<T extends User$userActionsArgs<ExtArgs> = {}>(args?: Subset<T, User$userActionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserActionPayload<ExtArgs>, T, "findMany"> | Null>
    topicQuickActions<T extends User$topicQuickActionsArgs<ExtArgs> = {}>(args?: Subset<T, User$topicQuickActionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TopicQuickActionPayload<ExtArgs>, T, "findMany"> | Null>
    topicActions<T extends User$topicActionsArgs<ExtArgs> = {}>(args?: Subset<T, User$topicActionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TopicActionPayload<ExtArgs>, T, "findMany"> | Null>
    projectActions<T extends User$projectActionsArgs<ExtArgs> = {}>(args?: Subset<T, User$projectActionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectActionPayload<ExtArgs>, T, "findMany"> | Null>
    activities<T extends User$activitiesArgs<ExtArgs> = {}>(args?: Subset<T, User$activitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findMany"> | Null>
    activityParticipants<T extends User$activityParticipantsArgs<ExtArgs> = {}>(args?: Subset<T, User$activityParticipantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityParticipantPayload<ExtArgs>, T, "findMany"> | Null>
    activityLikes<T extends User$activityLikesArgs<ExtArgs> = {}>(args?: Subset<T, User$activityLikesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityLikePayload<ExtArgs>, T, "findMany"> | Null>
    activityComments<T extends User$activityCommentsArgs<ExtArgs> = {}>(args?: Subset<T, User$activityCommentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityCommentPayload<ExtArgs>, T, "findMany"> | Null>
    userBindings<T extends User$userBindingsArgs<ExtArgs> = {}>(args?: Subset<T, User$userBindingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBindingPayload<ExtArgs>, T, "findMany"> | Null>
    loginLogs<T extends User$loginLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$loginLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoginLogPayload<ExtArgs>, T, "findMany"> | Null>
    feedbacks<T extends User$feedbacksArgs<ExtArgs> = {}>(args?: Subset<T, User$feedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany"> | Null>
    feedbackReplies<T extends User$feedbackRepliesArgs<ExtArgs> = {}>(args?: Subset<T, User$feedbackRepliesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackReplyPayload<ExtArgs>, T, "findMany"> | Null>
    creditLogs<T extends User$creditLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$creditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CreditLogPayload<ExtArgs>, T, "findMany"> | Null>
    badgeRecords<T extends User$badgeRecordsArgs<ExtArgs> = {}>(args?: Subset<T, User$badgeRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBadgeRecordPayload<ExtArgs>, T, "findMany"> | Null>
    checkIns<T extends User$checkInsArgs<ExtArgs> = {}>(args?: Subset<T, User$checkInsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyCheckInPayload<ExtArgs>, T, "findMany"> | Null>
    roles<T extends User$rolesArgs<ExtArgs> = {}>(args?: Subset<T, User$rolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findMany"> | Null>
    operationLogs<T extends User$operationLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$operationLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperationLogPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly openid: FieldRef<"User", 'String'>
    readonly unionid: FieldRef<"User", 'String'>
    readonly sessionKey: FieldRef<"User", 'String'>
    readonly nickname: FieldRef<"User", 'String'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly gender: FieldRef<"User", 'Int'>
    readonly phone: FieldRef<"User", 'String'>
    readonly bio: FieldRef<"User", 'String'>
    readonly school: FieldRef<"User", 'String'>
    readonly major: FieldRef<"User", 'String'>
    readonly grade: FieldRef<"User", 'String'>
    readonly verified: FieldRef<"User", 'Boolean'>
    readonly skills: FieldRef<"User", 'String'>
    readonly interests: FieldRef<"User", 'String'>
    readonly credits: FieldRef<"User", 'Int'>
    readonly level: FieldRef<"User", 'Int'>
    readonly exp: FieldRef<"User", 'Int'>
    readonly topicsCount: FieldRef<"User", 'Int'>
    readonly commentsCount: FieldRef<"User", 'Int'>
    readonly likesCount: FieldRef<"User", 'Int'>
    readonly fansCount: FieldRef<"User", 'Int'>
    readonly followsCount: FieldRef<"User", 'Int'>
    readonly status: FieldRef<"User", 'String'>
    readonly isCertified: FieldRef<"User", 'Boolean'>
    readonly isVip: FieldRef<"User", 'Boolean'>
    readonly lastLoginAt: FieldRef<"User", 'DateTime'>
    readonly lastActiveAt: FieldRef<"User", 'DateTime'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.topics
   */
  export type User$topicsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicInclude<ExtArgs> | null
    where?: TopicWhereInput
    orderBy?: TopicOrderByWithRelationInput | TopicOrderByWithRelationInput[]
    cursor?: TopicWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TopicScalarFieldEnum | TopicScalarFieldEnum[]
  }

  /**
   * User.projects
   */
  export type User$projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * User.comments
   */
  export type User$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * User.likes
   */
  export type User$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    where?: LikeWhereInput
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    cursor?: LikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * User.bookmarks
   */
  export type User$bookmarksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    where?: BookmarkWhereInput
    orderBy?: BookmarkOrderByWithRelationInput | BookmarkOrderByWithRelationInput[]
    cursor?: BookmarkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookmarkScalarFieldEnum | BookmarkScalarFieldEnum[]
  }

  /**
   * User.follows
   */
  export type User$followsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    where?: FollowWhereInput
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    cursor?: FollowWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[]
  }

  /**
   * User.followers
   */
  export type User$followersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    where?: FollowWhereInput
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    cursor?: FollowWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[]
  }

  /**
   * User.sentNotifications
   */
  export type User$sentNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.receivedNotifications
   */
  export type User$receivedNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.userActions
   */
  export type User$userActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAction
     */
    select?: UserActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActionInclude<ExtArgs> | null
    where?: UserActionWhereInput
    orderBy?: UserActionOrderByWithRelationInput | UserActionOrderByWithRelationInput[]
    cursor?: UserActionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserActionScalarFieldEnum | UserActionScalarFieldEnum[]
  }

  /**
   * User.topicQuickActions
   */
  export type User$topicQuickActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopicQuickAction
     */
    select?: TopicQuickActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicQuickActionInclude<ExtArgs> | null
    where?: TopicQuickActionWhereInput
    orderBy?: TopicQuickActionOrderByWithRelationInput | TopicQuickActionOrderByWithRelationInput[]
    cursor?: TopicQuickActionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TopicQuickActionScalarFieldEnum | TopicQuickActionScalarFieldEnum[]
  }

  /**
   * User.topicActions
   */
  export type User$topicActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopicAction
     */
    select?: TopicActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicActionInclude<ExtArgs> | null
    where?: TopicActionWhereInput
    orderBy?: TopicActionOrderByWithRelationInput | TopicActionOrderByWithRelationInput[]
    cursor?: TopicActionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TopicActionScalarFieldEnum | TopicActionScalarFieldEnum[]
  }

  /**
   * User.projectActions
   */
  export type User$projectActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectAction
     */
    select?: ProjectActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectActionInclude<ExtArgs> | null
    where?: ProjectActionWhereInput
    orderBy?: ProjectActionOrderByWithRelationInput | ProjectActionOrderByWithRelationInput[]
    cursor?: ProjectActionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectActionScalarFieldEnum | ProjectActionScalarFieldEnum[]
  }

  /**
   * User.activities
   */
  export type User$activitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    where?: ActivityWhereInput
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    cursor?: ActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * User.activityParticipants
   */
  export type User$activityParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityParticipant
     */
    select?: ActivityParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityParticipantInclude<ExtArgs> | null
    where?: ActivityParticipantWhereInput
    orderBy?: ActivityParticipantOrderByWithRelationInput | ActivityParticipantOrderByWithRelationInput[]
    cursor?: ActivityParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityParticipantScalarFieldEnum | ActivityParticipantScalarFieldEnum[]
  }

  /**
   * User.activityLikes
   */
  export type User$activityLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLike
     */
    select?: ActivityLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLikeInclude<ExtArgs> | null
    where?: ActivityLikeWhereInput
    orderBy?: ActivityLikeOrderByWithRelationInput | ActivityLikeOrderByWithRelationInput[]
    cursor?: ActivityLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityLikeScalarFieldEnum | ActivityLikeScalarFieldEnum[]
  }

  /**
   * User.activityComments
   */
  export type User$activityCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityComment
     */
    select?: ActivityCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityCommentInclude<ExtArgs> | null
    where?: ActivityCommentWhereInput
    orderBy?: ActivityCommentOrderByWithRelationInput | ActivityCommentOrderByWithRelationInput[]
    cursor?: ActivityCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityCommentScalarFieldEnum | ActivityCommentScalarFieldEnum[]
  }

  /**
   * User.userBindings
   */
  export type User$userBindingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBinding
     */
    select?: UserBindingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBindingInclude<ExtArgs> | null
    where?: UserBindingWhereInput
    orderBy?: UserBindingOrderByWithRelationInput | UserBindingOrderByWithRelationInput[]
    cursor?: UserBindingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserBindingScalarFieldEnum | UserBindingScalarFieldEnum[]
  }

  /**
   * User.loginLogs
   */
  export type User$loginLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginLog
     */
    select?: LoginLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginLogInclude<ExtArgs> | null
    where?: LoginLogWhereInput
    orderBy?: LoginLogOrderByWithRelationInput | LoginLogOrderByWithRelationInput[]
    cursor?: LoginLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LoginLogScalarFieldEnum | LoginLogScalarFieldEnum[]
  }

  /**
   * User.feedbacks
   */
  export type User$feedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    cursor?: FeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * User.feedbackReplies
   */
  export type User$feedbackRepliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackReply
     */
    select?: FeedbackReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackReplyInclude<ExtArgs> | null
    where?: FeedbackReplyWhereInput
    orderBy?: FeedbackReplyOrderByWithRelationInput | FeedbackReplyOrderByWithRelationInput[]
    cursor?: FeedbackReplyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackReplyScalarFieldEnum | FeedbackReplyScalarFieldEnum[]
  }

  /**
   * User.creditLogs
   */
  export type User$creditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditLog
     */
    select?: CreditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditLogInclude<ExtArgs> | null
    where?: CreditLogWhereInput
    orderBy?: CreditLogOrderByWithRelationInput | CreditLogOrderByWithRelationInput[]
    cursor?: CreditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CreditLogScalarFieldEnum | CreditLogScalarFieldEnum[]
  }

  /**
   * User.badgeRecords
   */
  export type User$badgeRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadgeRecord
     */
    select?: UserBadgeRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeRecordInclude<ExtArgs> | null
    where?: UserBadgeRecordWhereInput
    orderBy?: UserBadgeRecordOrderByWithRelationInput | UserBadgeRecordOrderByWithRelationInput[]
    cursor?: UserBadgeRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserBadgeRecordScalarFieldEnum | UserBadgeRecordScalarFieldEnum[]
  }

  /**
   * User.checkIns
   */
  export type User$checkInsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyCheckIn
     */
    select?: DailyCheckInSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyCheckInInclude<ExtArgs> | null
    where?: DailyCheckInWhereInput
    orderBy?: DailyCheckInOrderByWithRelationInput | DailyCheckInOrderByWithRelationInput[]
    cursor?: DailyCheckInWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DailyCheckInScalarFieldEnum | DailyCheckInScalarFieldEnum[]
  }

  /**
   * User.roles
   */
  export type User$rolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    where?: UserRoleWhereInput
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    cursor?: UserRoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * User.operationLogs
   */
  export type User$operationLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperationLog
     */
    select?: OperationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationLogInclude<ExtArgs> | null
    where?: OperationLogWhereInput
    orderBy?: OperationLogOrderByWithRelationInput | OperationLogOrderByWithRelationInput[]
    cursor?: OperationLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OperationLogScalarFieldEnum | OperationLogScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Topic
   */

  export type AggregateTopic = {
    _count: TopicCountAggregateOutputType | null
    _avg: TopicAvgAggregateOutputType | null
    _sum: TopicSumAggregateOutputType | null
    _min: TopicMinAggregateOutputType | null
    _max: TopicMaxAggregateOutputType | null
  }

  export type TopicAvgAggregateOutputType = {
    threshold: number | null
    wantToHearCount: number | null
    canTellCount: number | null
    teamSize: number | null
    interestedCount: number | null
    viewsCount: number | null
    likesCount: number | null
    commentsCount: number | null
    bookmarksCount: number | null
    hotScore: number | null
    trendingScore: number | null
  }

  export type TopicSumAggregateOutputType = {
    threshold: number | null
    wantToHearCount: number | null
    canTellCount: number | null
    teamSize: number | null
    interestedCount: number | null
    viewsCount: number | null
    likesCount: number | null
    commentsCount: number | null
    bookmarksCount: number | null
    hotScore: number | null
    trendingScore: number | null
  }

  export type TopicMinAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    contentType: string | null
    summary: string | null
    category: string | null
    tags: string | null
    topicType: string | null
    demandType: string | null
    skillsNeeded: string | null
    skillsProvided: string | null
    threshold: number | null
    wantToHearCount: number | null
    canTellCount: number | null
    status: string | null
    teamSize: number | null
    projectStage: string | null
    website: string | null
    github: string | null
    interestedCount: number | null
    duration: string | null
    targetAudience: string | null
    scheduledTime: Date | null
    deadline: Date | null
    budget: string | null
    contactInfo: string | null
    images: string | null
    documents: string | null
    videos: string | null
    links: string | null
    quickActions: string | null
    visibility: string | null
    viewsCount: number | null
    likesCount: number | null
    commentsCount: number | null
    bookmarksCount: number | null
    hotScore: number | null
    trendingScore: number | null
    isHot: boolean | null
    publishedAt: Date | null
    lastActiveAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    authorId: string | null
  }

  export type TopicMaxAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    contentType: string | null
    summary: string | null
    category: string | null
    tags: string | null
    topicType: string | null
    demandType: string | null
    skillsNeeded: string | null
    skillsProvided: string | null
    threshold: number | null
    wantToHearCount: number | null
    canTellCount: number | null
    status: string | null
    teamSize: number | null
    projectStage: string | null
    website: string | null
    github: string | null
    interestedCount: number | null
    duration: string | null
    targetAudience: string | null
    scheduledTime: Date | null
    deadline: Date | null
    budget: string | null
    contactInfo: string | null
    images: string | null
    documents: string | null
    videos: string | null
    links: string | null
    quickActions: string | null
    visibility: string | null
    viewsCount: number | null
    likesCount: number | null
    commentsCount: number | null
    bookmarksCount: number | null
    hotScore: number | null
    trendingScore: number | null
    isHot: boolean | null
    publishedAt: Date | null
    lastActiveAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    authorId: string | null
  }

  export type TopicCountAggregateOutputType = {
    id: number
    title: number
    content: number
    contentType: number
    summary: number
    category: number
    tags: number
    topicType: number
    demandType: number
    skillsNeeded: number
    skillsProvided: number
    threshold: number
    wantToHearCount: number
    canTellCount: number
    status: number
    teamSize: number
    lookingForRoles: number
    projectStage: number
    website: number
    github: number
    interestedCount: number
    duration: number
    targetAudience: number
    scheduledTime: number
    deadline: number
    budget: number
    contactInfo: number
    images: number
    documents: number
    videos: number
    links: number
    quickActions: number
    visibility: number
    viewsCount: number
    likesCount: number
    commentsCount: number
    bookmarksCount: number
    hotScore: number
    trendingScore: number
    isHot: number
    publishedAt: number
    lastActiveAt: number
    createdAt: number
    updatedAt: number
    authorId: number
    _all: number
  }


  export type TopicAvgAggregateInputType = {
    threshold?: true
    wantToHearCount?: true
    canTellCount?: true
    teamSize?: true
    interestedCount?: true
    viewsCount?: true
    likesCount?: true
    commentsCount?: true
    bookmarksCount?: true
    hotScore?: true
    trendingScore?: true
  }

  export type TopicSumAggregateInputType = {
    threshold?: true
    wantToHearCount?: true
    canTellCount?: true
    teamSize?: true
    interestedCount?: true
    viewsCount?: true
    likesCount?: true
    commentsCount?: true
    bookmarksCount?: true
    hotScore?: true
    trendingScore?: true
  }

  export type TopicMinAggregateInputType = {
    id?: true
    title?: true
    content?: true
    contentType?: true
    summary?: true
    category?: true
    tags?: true
    topicType?: true
    demandType?: true
    skillsNeeded?: true
    skillsProvided?: true
    threshold?: true
    wantToHearCount?: true
    canTellCount?: true
    status?: true
    teamSize?: true
    projectStage?: true
    website?: true
    github?: true
    interestedCount?: true
    duration?: true
    targetAudience?: true
    scheduledTime?: true
    deadline?: true
    budget?: true
    contactInfo?: true
    images?: true
    documents?: true
    videos?: true
    links?: true
    quickActions?: true
    visibility?: true
    viewsCount?: true
    likesCount?: true
    commentsCount?: true
    bookmarksCount?: true
    hotScore?: true
    trendingScore?: true
    isHot?: true
    publishedAt?: true
    lastActiveAt?: true
    createdAt?: true
    updatedAt?: true
    authorId?: true
  }

  export type TopicMaxAggregateInputType = {
    id?: true
    title?: true
    content?: true
    contentType?: true
    summary?: true
    category?: true
    tags?: true
    topicType?: true
    demandType?: true
    skillsNeeded?: true
    skillsProvided?: true
    threshold?: true
    wantToHearCount?: true
    canTellCount?: true
    status?: true
    teamSize?: true
    projectStage?: true
    website?: true
    github?: true
    interestedCount?: true
    duration?: true
    targetAudience?: true
    scheduledTime?: true
    deadline?: true
    budget?: true
    contactInfo?: true
    images?: true
    documents?: true
    videos?: true
    links?: true
    quickActions?: true
    visibility?: true
    viewsCount?: true
    likesCount?: true
    commentsCount?: true
    bookmarksCount?: true
    hotScore?: true
    trendingScore?: true
    isHot?: true
    publishedAt?: true
    lastActiveAt?: true
    createdAt?: true
    updatedAt?: true
    authorId?: true
  }

  export type TopicCountAggregateInputType = {
    id?: true
    title?: true
    content?: true
    contentType?: true
    summary?: true
    category?: true
    tags?: true
    topicType?: true
    demandType?: true
    skillsNeeded?: true
    skillsProvided?: true
    threshold?: true
    wantToHearCount?: true
    canTellCount?: true
    status?: true
    teamSize?: true
    lookingForRoles?: true
    projectStage?: true
    website?: true
    github?: true
    interestedCount?: true
    duration?: true
    targetAudience?: true
    scheduledTime?: true
    deadline?: true
    budget?: true
    contactInfo?: true
    images?: true
    documents?: true
    videos?: true
    links?: true
    quickActions?: true
    visibility?: true
    viewsCount?: true
    likesCount?: true
    commentsCount?: true
    bookmarksCount?: true
    hotScore?: true
    trendingScore?: true
    isHot?: true
    publishedAt?: true
    lastActiveAt?: true
    createdAt?: true
    updatedAt?: true
    authorId?: true
    _all?: true
  }

  export type TopicAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Topic to aggregate.
     */
    where?: TopicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Topics to fetch.
     */
    orderBy?: TopicOrderByWithRelationInput | TopicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TopicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Topics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Topics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Topics
    **/
    _count?: true | TopicCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TopicAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TopicSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TopicMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TopicMaxAggregateInputType
  }

  export type GetTopicAggregateType<T extends TopicAggregateArgs> = {
        [P in keyof T & keyof AggregateTopic]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTopic[P]>
      : GetScalarType<T[P], AggregateTopic[P]>
  }




  export type TopicGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TopicWhereInput
    orderBy?: TopicOrderByWithAggregationInput | TopicOrderByWithAggregationInput[]
    by: TopicScalarFieldEnum[] | TopicScalarFieldEnum
    having?: TopicScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TopicCountAggregateInputType | true
    _avg?: TopicAvgAggregateInputType
    _sum?: TopicSumAggregateInputType
    _min?: TopicMinAggregateInputType
    _max?: TopicMaxAggregateInputType
  }

  export type TopicGroupByOutputType = {
    id: string
    title: string
    content: string
    contentType: string
    summary: string | null
    category: string
    tags: string | null
    topicType: string
    demandType: string | null
    skillsNeeded: string | null
    skillsProvided: string | null
    threshold: number
    wantToHearCount: number
    canTellCount: number
    status: string
    teamSize: number | null
    lookingForRoles: JsonValue | null
    projectStage: string | null
    website: string | null
    github: string | null
    interestedCount: number
    duration: string | null
    targetAudience: string | null
    scheduledTime: Date | null
    deadline: Date | null
    budget: string | null
    contactInfo: string | null
    images: string | null
    documents: string | null
    videos: string | null
    links: string | null
    quickActions: string | null
    visibility: string
    viewsCount: number
    likesCount: number
    commentsCount: number
    bookmarksCount: number
    hotScore: number
    trendingScore: number
    isHot: boolean
    publishedAt: Date | null
    lastActiveAt: Date
    createdAt: Date
    updatedAt: Date
    authorId: string
    _count: TopicCountAggregateOutputType | null
    _avg: TopicAvgAggregateOutputType | null
    _sum: TopicSumAggregateOutputType | null
    _min: TopicMinAggregateOutputType | null
    _max: TopicMaxAggregateOutputType | null
  }

  type GetTopicGroupByPayload<T extends TopicGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TopicGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TopicGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TopicGroupByOutputType[P]>
            : GetScalarType<T[P], TopicGroupByOutputType[P]>
        }
      >
    >


  export type TopicSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    contentType?: boolean
    summary?: boolean
    category?: boolean
    tags?: boolean
    topicType?: boolean
    demandType?: boolean
    skillsNeeded?: boolean
    skillsProvided?: boolean
    threshold?: boolean
    wantToHearCount?: boolean
    canTellCount?: boolean
    status?: boolean
    teamSize?: boolean
    lookingForRoles?: boolean
    projectStage?: boolean
    website?: boolean
    github?: boolean
    interestedCount?: boolean
    duration?: boolean
    targetAudience?: boolean
    scheduledTime?: boolean
    deadline?: boolean
    budget?: boolean
    contactInfo?: boolean
    images?: boolean
    documents?: boolean
    videos?: boolean
    links?: boolean
    quickActions?: boolean
    visibility?: boolean
    viewsCount?: boolean
    likesCount?: boolean
    commentsCount?: boolean
    bookmarksCount?: boolean
    hotScore?: boolean
    trendingScore?: boolean
    isHot?: boolean
    publishedAt?: boolean
    lastActiveAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authorId?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    comments?: boolean | Topic$commentsArgs<ExtArgs>
    likes?: boolean | Topic$likesArgs<ExtArgs>
    bookmarks?: boolean | Topic$bookmarksArgs<ExtArgs>
    notifications?: boolean | Topic$notificationsArgs<ExtArgs>
    userActions?: boolean | Topic$userActionsArgs<ExtArgs>
    quickActionsList?: boolean | Topic$quickActionsListArgs<ExtArgs>
    actions?: boolean | Topic$actionsArgs<ExtArgs>
    _count?: boolean | TopicCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["topic"]>


  export type TopicSelectScalar = {
    id?: boolean
    title?: boolean
    content?: boolean
    contentType?: boolean
    summary?: boolean
    category?: boolean
    tags?: boolean
    topicType?: boolean
    demandType?: boolean
    skillsNeeded?: boolean
    skillsProvided?: boolean
    threshold?: boolean
    wantToHearCount?: boolean
    canTellCount?: boolean
    status?: boolean
    teamSize?: boolean
    lookingForRoles?: boolean
    projectStage?: boolean
    website?: boolean
    github?: boolean
    interestedCount?: boolean
    duration?: boolean
    targetAudience?: boolean
    scheduledTime?: boolean
    deadline?: boolean
    budget?: boolean
    contactInfo?: boolean
    images?: boolean
    documents?: boolean
    videos?: boolean
    links?: boolean
    quickActions?: boolean
    visibility?: boolean
    viewsCount?: boolean
    likesCount?: boolean
    commentsCount?: boolean
    bookmarksCount?: boolean
    hotScore?: boolean
    trendingScore?: boolean
    isHot?: boolean
    publishedAt?: boolean
    lastActiveAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authorId?: boolean
  }

  export type TopicInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    comments?: boolean | Topic$commentsArgs<ExtArgs>
    likes?: boolean | Topic$likesArgs<ExtArgs>
    bookmarks?: boolean | Topic$bookmarksArgs<ExtArgs>
    notifications?: boolean | Topic$notificationsArgs<ExtArgs>
    userActions?: boolean | Topic$userActionsArgs<ExtArgs>
    quickActionsList?: boolean | Topic$quickActionsListArgs<ExtArgs>
    actions?: boolean | Topic$actionsArgs<ExtArgs>
    _count?: boolean | TopicCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $TopicPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Topic"
    objects: {
      author: Prisma.$UserPayload<ExtArgs>
      comments: Prisma.$CommentPayload<ExtArgs>[]
      likes: Prisma.$LikePayload<ExtArgs>[]
      bookmarks: Prisma.$BookmarkPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      userActions: Prisma.$UserActionPayload<ExtArgs>[]
      quickActionsList: Prisma.$TopicQuickActionPayload<ExtArgs>[]
      actions: Prisma.$TopicActionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      content: string
      contentType: string
      summary: string | null
      category: string
      tags: string | null
      topicType: string
      demandType: string | null
      skillsNeeded: string | null
      skillsProvided: string | null
      threshold: number
      wantToHearCount: number
      canTellCount: number
      status: string
      teamSize: number | null
      lookingForRoles: Prisma.JsonValue | null
      projectStage: string | null
      website: string | null
      github: string | null
      interestedCount: number
      duration: string | null
      targetAudience: string | null
      scheduledTime: Date | null
      deadline: Date | null
      budget: string | null
      contactInfo: string | null
      images: string | null
      documents: string | null
      videos: string | null
      links: string | null
      quickActions: string | null
      visibility: string
      viewsCount: number
      likesCount: number
      commentsCount: number
      bookmarksCount: number
      hotScore: number
      trendingScore: number
      isHot: boolean
      publishedAt: Date | null
      lastActiveAt: Date
      createdAt: Date
      updatedAt: Date
      authorId: string
    }, ExtArgs["result"]["topic"]>
    composites: {}
  }

  type TopicGetPayload<S extends boolean | null | undefined | TopicDefaultArgs> = $Result.GetResult<Prisma.$TopicPayload, S>

  type TopicCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TopicFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TopicCountAggregateInputType | true
    }

  export interface TopicDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Topic'], meta: { name: 'Topic' } }
    /**
     * Find zero or one Topic that matches the filter.
     * @param {TopicFindUniqueArgs} args - Arguments to find a Topic
     * @example
     * // Get one Topic
     * const topic = await prisma.topic.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TopicFindUniqueArgs>(args: SelectSubset<T, TopicFindUniqueArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Topic that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TopicFindUniqueOrThrowArgs} args - Arguments to find a Topic
     * @example
     * // Get one Topic
     * const topic = await prisma.topic.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TopicFindUniqueOrThrowArgs>(args: SelectSubset<T, TopicFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Topic that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicFindFirstArgs} args - Arguments to find a Topic
     * @example
     * // Get one Topic
     * const topic = await prisma.topic.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TopicFindFirstArgs>(args?: SelectSubset<T, TopicFindFirstArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Topic that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicFindFirstOrThrowArgs} args - Arguments to find a Topic
     * @example
     * // Get one Topic
     * const topic = await prisma.topic.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TopicFindFirstOrThrowArgs>(args?: SelectSubset<T, TopicFindFirstOrThrowArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Topics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Topics
     * const topics = await prisma.topic.findMany()
     * 
     * // Get first 10 Topics
     * const topics = await prisma.topic.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const topicWithIdOnly = await prisma.topic.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TopicFindManyArgs>(args?: SelectSubset<T, TopicFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Topic.
     * @param {TopicCreateArgs} args - Arguments to create a Topic.
     * @example
     * // Create one Topic
     * const Topic = await prisma.topic.create({
     *   data: {
     *     // ... data to create a Topic
     *   }
     * })
     * 
     */
    create<T extends TopicCreateArgs>(args: SelectSubset<T, TopicCreateArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Topics.
     * @param {TopicCreateManyArgs} args - Arguments to create many Topics.
     * @example
     * // Create many Topics
     * const topic = await prisma.topic.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TopicCreateManyArgs>(args?: SelectSubset<T, TopicCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Topic.
     * @param {TopicDeleteArgs} args - Arguments to delete one Topic.
     * @example
     * // Delete one Topic
     * const Topic = await prisma.topic.delete({
     *   where: {
     *     // ... filter to delete one Topic
     *   }
     * })
     * 
     */
    delete<T extends TopicDeleteArgs>(args: SelectSubset<T, TopicDeleteArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Topic.
     * @param {TopicUpdateArgs} args - Arguments to update one Topic.
     * @example
     * // Update one Topic
     * const topic = await prisma.topic.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TopicUpdateArgs>(args: SelectSubset<T, TopicUpdateArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Topics.
     * @param {TopicDeleteManyArgs} args - Arguments to filter Topics to delete.
     * @example
     * // Delete a few Topics
     * const { count } = await prisma.topic.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TopicDeleteManyArgs>(args?: SelectSubset<T, TopicDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Topics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Topics
     * const topic = await prisma.topic.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TopicUpdateManyArgs>(args: SelectSubset<T, TopicUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Topic.
     * @param {TopicUpsertArgs} args - Arguments to update or create a Topic.
     * @example
     * // Update or create a Topic
     * const topic = await prisma.topic.upsert({
     *   create: {
     *     // ... data to create a Topic
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Topic we want to update
     *   }
     * })
     */
    upsert<T extends TopicUpsertArgs>(args: SelectSubset<T, TopicUpsertArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Topics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicCountArgs} args - Arguments to filter Topics to count.
     * @example
     * // Count the number of Topics
     * const count = await prisma.topic.count({
     *   where: {
     *     // ... the filter for the Topics we want to count
     *   }
     * })
    **/
    count<T extends TopicCountArgs>(
      args?: Subset<T, TopicCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TopicCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Topic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TopicAggregateArgs>(args: Subset<T, TopicAggregateArgs>): Prisma.PrismaPromise<GetTopicAggregateType<T>>

    /**
     * Group by Topic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TopicGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TopicGroupByArgs['orderBy'] }
        : { orderBy?: TopicGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TopicGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTopicGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Topic model
   */
  readonly fields: TopicFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Topic.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TopicClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    comments<T extends Topic$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Topic$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany"> | Null>
    likes<T extends Topic$likesArgs<ExtArgs> = {}>(args?: Subset<T, Topic$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findMany"> | Null>
    bookmarks<T extends Topic$bookmarksArgs<ExtArgs> = {}>(args?: Subset<T, Topic$bookmarksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, "findMany"> | Null>
    notifications<T extends Topic$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, Topic$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    userActions<T extends Topic$userActionsArgs<ExtArgs> = {}>(args?: Subset<T, Topic$userActionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserActionPayload<ExtArgs>, T, "findMany"> | Null>
    quickActionsList<T extends Topic$quickActionsListArgs<ExtArgs> = {}>(args?: Subset<T, Topic$quickActionsListArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TopicQuickActionPayload<ExtArgs>, T, "findMany"> | Null>
    actions<T extends Topic$actionsArgs<ExtArgs> = {}>(args?: Subset<T, Topic$actionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TopicActionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Topic model
   */ 
  interface TopicFieldRefs {
    readonly id: FieldRef<"Topic", 'String'>
    readonly title: FieldRef<"Topic", 'String'>
    readonly content: FieldRef<"Topic", 'String'>
    readonly contentType: FieldRef<"Topic", 'String'>
    readonly summary: FieldRef<"Topic", 'String'>
    readonly category: FieldRef<"Topic", 'String'>
    readonly tags: FieldRef<"Topic", 'String'>
    readonly topicType: FieldRef<"Topic", 'String'>
    readonly demandType: FieldRef<"Topic", 'String'>
    readonly skillsNeeded: FieldRef<"Topic", 'String'>
    readonly skillsProvided: FieldRef<"Topic", 'String'>
    readonly threshold: FieldRef<"Topic", 'Int'>
    readonly wantToHearCount: FieldRef<"Topic", 'Int'>
    readonly canTellCount: FieldRef<"Topic", 'Int'>
    readonly status: FieldRef<"Topic", 'String'>
    readonly teamSize: FieldRef<"Topic", 'Int'>
    readonly lookingForRoles: FieldRef<"Topic", 'Json'>
    readonly projectStage: FieldRef<"Topic", 'String'>
    readonly website: FieldRef<"Topic", 'String'>
    readonly github: FieldRef<"Topic", 'String'>
    readonly interestedCount: FieldRef<"Topic", 'Int'>
    readonly duration: FieldRef<"Topic", 'String'>
    readonly targetAudience: FieldRef<"Topic", 'String'>
    readonly scheduledTime: FieldRef<"Topic", 'DateTime'>
    readonly deadline: FieldRef<"Topic", 'DateTime'>
    readonly budget: FieldRef<"Topic", 'String'>
    readonly contactInfo: FieldRef<"Topic", 'String'>
    readonly images: FieldRef<"Topic", 'String'>
    readonly documents: FieldRef<"Topic", 'String'>
    readonly videos: FieldRef<"Topic", 'String'>
    readonly links: FieldRef<"Topic", 'String'>
    readonly quickActions: FieldRef<"Topic", 'String'>
    readonly visibility: FieldRef<"Topic", 'String'>
    readonly viewsCount: FieldRef<"Topic", 'Int'>
    readonly likesCount: FieldRef<"Topic", 'Int'>
    readonly commentsCount: FieldRef<"Topic", 'Int'>
    readonly bookmarksCount: FieldRef<"Topic", 'Int'>
    readonly hotScore: FieldRef<"Topic", 'Float'>
    readonly trendingScore: FieldRef<"Topic", 'Float'>
    readonly isHot: FieldRef<"Topic", 'Boolean'>
    readonly publishedAt: FieldRef<"Topic", 'DateTime'>
    readonly lastActiveAt: FieldRef<"Topic", 'DateTime'>
    readonly createdAt: FieldRef<"Topic", 'DateTime'>
    readonly updatedAt: FieldRef<"Topic", 'DateTime'>
    readonly authorId: FieldRef<"Topic", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Topic findUnique
   */
  export type TopicFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicInclude<ExtArgs> | null
    /**
     * Filter, which Topic to fetch.
     */
    where: TopicWhereUniqueInput
  }

  /**
   * Topic findUniqueOrThrow
   */
  export type TopicFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicInclude<ExtArgs> | null
    /**
     * Filter, which Topic to fetch.
     */
    where: TopicWhereUniqueInput
  }

  /**
   * Topic findFirst
   */
  export type TopicFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicInclude<ExtArgs> | null
    /**
     * Filter, which Topic to fetch.
     */
    where?: TopicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Topics to fetch.
     */
    orderBy?: TopicOrderByWithRelationInput | TopicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Topics.
     */
    cursor?: TopicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Topics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Topics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Topics.
     */
    distinct?: TopicScalarFieldEnum | TopicScalarFieldEnum[]
  }

  /**
   * Topic findFirstOrThrow
   */
  export type TopicFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicInclude<ExtArgs> | null
    /**
     * Filter, which Topic to fetch.
     */
    where?: TopicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Topics to fetch.
     */
    orderBy?: TopicOrderByWithRelationInput | TopicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Topics.
     */
    cursor?: TopicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Topics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Topics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Topics.
     */
    distinct?: TopicScalarFieldEnum | TopicScalarFieldEnum[]
  }

  /**
   * Topic findMany
   */
  export type TopicFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicInclude<ExtArgs> | null
    /**
     * Filter, which Topics to fetch.
     */
    where?: TopicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Topics to fetch.
     */
    orderBy?: TopicOrderByWithRelationInput | TopicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Topics.
     */
    cursor?: TopicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Topics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Topics.
     */
    skip?: number
    distinct?: TopicScalarFieldEnum | TopicScalarFieldEnum[]
  }

  /**
   * Topic create
   */
  export type TopicCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicInclude<ExtArgs> | null
    /**
     * The data needed to create a Topic.
     */
    data: XOR<TopicCreateInput, TopicUncheckedCreateInput>
  }

  /**
   * Topic createMany
   */
  export type TopicCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Topics.
     */
    data: TopicCreateManyInput | TopicCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Topic update
   */
  export type TopicUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicInclude<ExtArgs> | null
    /**
     * The data needed to update a Topic.
     */
    data: XOR<TopicUpdateInput, TopicUncheckedUpdateInput>
    /**
     * Choose, which Topic to update.
     */
    where: TopicWhereUniqueInput
  }

  /**
   * Topic updateMany
   */
  export type TopicUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Topics.
     */
    data: XOR<TopicUpdateManyMutationInput, TopicUncheckedUpdateManyInput>
    /**
     * Filter which Topics to update
     */
    where?: TopicWhereInput
  }

  /**
   * Topic upsert
   */
  export type TopicUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicInclude<ExtArgs> | null
    /**
     * The filter to search for the Topic to update in case it exists.
     */
    where: TopicWhereUniqueInput
    /**
     * In case the Topic found by the `where` argument doesn't exist, create a new Topic with this data.
     */
    create: XOR<TopicCreateInput, TopicUncheckedCreateInput>
    /**
     * In case the Topic was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TopicUpdateInput, TopicUncheckedUpdateInput>
  }

  /**
   * Topic delete
   */
  export type TopicDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicInclude<ExtArgs> | null
    /**
     * Filter which Topic to delete.
     */
    where: TopicWhereUniqueInput
  }

  /**
   * Topic deleteMany
   */
  export type TopicDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Topics to delete
     */
    where?: TopicWhereInput
  }

  /**
   * Topic.comments
   */
  export type Topic$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Topic.likes
   */
  export type Topic$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    where?: LikeWhereInput
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    cursor?: LikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * Topic.bookmarks
   */
  export type Topic$bookmarksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    where?: BookmarkWhereInput
    orderBy?: BookmarkOrderByWithRelationInput | BookmarkOrderByWithRelationInput[]
    cursor?: BookmarkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookmarkScalarFieldEnum | BookmarkScalarFieldEnum[]
  }

  /**
   * Topic.notifications
   */
  export type Topic$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Topic.userActions
   */
  export type Topic$userActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAction
     */
    select?: UserActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActionInclude<ExtArgs> | null
    where?: UserActionWhereInput
    orderBy?: UserActionOrderByWithRelationInput | UserActionOrderByWithRelationInput[]
    cursor?: UserActionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserActionScalarFieldEnum | UserActionScalarFieldEnum[]
  }

  /**
   * Topic.quickActionsList
   */
  export type Topic$quickActionsListArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopicQuickAction
     */
    select?: TopicQuickActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicQuickActionInclude<ExtArgs> | null
    where?: TopicQuickActionWhereInput
    orderBy?: TopicQuickActionOrderByWithRelationInput | TopicQuickActionOrderByWithRelationInput[]
    cursor?: TopicQuickActionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TopicQuickActionScalarFieldEnum | TopicQuickActionScalarFieldEnum[]
  }

  /**
   * Topic.actions
   */
  export type Topic$actionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopicAction
     */
    select?: TopicActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicActionInclude<ExtArgs> | null
    where?: TopicActionWhereInput
    orderBy?: TopicActionOrderByWithRelationInput | TopicActionOrderByWithRelationInput[]
    cursor?: TopicActionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TopicActionScalarFieldEnum | TopicActionScalarFieldEnum[]
  }

  /**
   * Topic without action
   */
  export type TopicDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicInclude<ExtArgs> | null
  }


  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentAvgAggregateOutputType = {
    repliesCount: number | null
    likesCount: number | null
  }

  export type CommentSumAggregateOutputType = {
    repliesCount: number | null
    likesCount: number | null
  }

  export type CommentMinAggregateOutputType = {
    id: string | null
    content: string | null
    images: string | null
    parentId: string | null
    rootId: string | null
    repliesCount: number | null
    likesCount: number | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    topicId: string | null
    projectId: string | null
    authorId: string | null
  }

  export type CommentMaxAggregateOutputType = {
    id: string | null
    content: string | null
    images: string | null
    parentId: string | null
    rootId: string | null
    repliesCount: number | null
    likesCount: number | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    topicId: string | null
    projectId: string | null
    authorId: string | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    content: number
    images: number
    parentId: number
    rootId: number
    repliesCount: number
    likesCount: number
    status: number
    createdAt: number
    updatedAt: number
    topicId: number
    projectId: number
    authorId: number
    _all: number
  }


  export type CommentAvgAggregateInputType = {
    repliesCount?: true
    likesCount?: true
  }

  export type CommentSumAggregateInputType = {
    repliesCount?: true
    likesCount?: true
  }

  export type CommentMinAggregateInputType = {
    id?: true
    content?: true
    images?: true
    parentId?: true
    rootId?: true
    repliesCount?: true
    likesCount?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    topicId?: true
    projectId?: true
    authorId?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    content?: true
    images?: true
    parentId?: true
    rootId?: true
    repliesCount?: true
    likesCount?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    topicId?: true
    projectId?: true
    authorId?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    content?: true
    images?: true
    parentId?: true
    rootId?: true
    repliesCount?: true
    likesCount?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    topicId?: true
    projectId?: true
    authorId?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _avg?: CommentAvgAggregateInputType
    _sum?: CommentSumAggregateInputType
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: string
    content: string
    images: string | null
    parentId: string | null
    rootId: string | null
    repliesCount: number
    likesCount: number
    status: string
    createdAt: Date
    updatedAt: Date
    topicId: string | null
    projectId: string | null
    authorId: string
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    images?: boolean
    parentId?: boolean
    rootId?: boolean
    repliesCount?: boolean
    likesCount?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    topicId?: boolean
    projectId?: boolean
    authorId?: boolean
    topic?: boolean | Comment$topicArgs<ExtArgs>
    project?: boolean | Comment$projectArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
    parent?: boolean | Comment$parentArgs<ExtArgs>
    replies?: boolean | Comment$repliesArgs<ExtArgs>
    likes?: boolean | Comment$likesArgs<ExtArgs>
    notifications?: boolean | Comment$notificationsArgs<ExtArgs>
    _count?: boolean | CommentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>


  export type CommentSelectScalar = {
    id?: boolean
    content?: boolean
    images?: boolean
    parentId?: boolean
    rootId?: boolean
    repliesCount?: boolean
    likesCount?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    topicId?: boolean
    projectId?: boolean
    authorId?: boolean
  }

  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    topic?: boolean | Comment$topicArgs<ExtArgs>
    project?: boolean | Comment$projectArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
    parent?: boolean | Comment$parentArgs<ExtArgs>
    replies?: boolean | Comment$repliesArgs<ExtArgs>
    likes?: boolean | Comment$likesArgs<ExtArgs>
    notifications?: boolean | Comment$notificationsArgs<ExtArgs>
    _count?: boolean | CommentCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      topic: Prisma.$TopicPayload<ExtArgs> | null
      project: Prisma.$ProjectPayload<ExtArgs> | null
      author: Prisma.$UserPayload<ExtArgs>
      parent: Prisma.$CommentPayload<ExtArgs> | null
      replies: Prisma.$CommentPayload<ExtArgs>[]
      likes: Prisma.$LikePayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string
      images: string | null
      parentId: string | null
      rootId: string | null
      repliesCount: number
      likesCount: number
      status: string
      createdAt: Date
      updatedAt: Date
      topicId: string | null
      projectId: string | null
      authorId: string
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }

  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentFindUniqueArgs>(args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentFindFirstArgs>(args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommentFindManyArgs>(args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
     */
    create<T extends CommentCreateArgs>(args: SelectSubset<T, CommentCreateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Comments.
     * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentCreateManyArgs>(args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
     */
    delete<T extends CommentDeleteArgs>(args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentUpdateArgs>(args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentDeleteManyArgs>(args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentUpdateManyArgs>(args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
     */
    upsert<T extends CommentUpsertArgs>(args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    topic<T extends Comment$topicArgs<ExtArgs> = {}>(args?: Subset<T, Comment$topicArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    project<T extends Comment$projectArgs<ExtArgs> = {}>(args?: Subset<T, Comment$projectArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    parent<T extends Comment$parentArgs<ExtArgs> = {}>(args?: Subset<T, Comment$parentArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    replies<T extends Comment$repliesArgs<ExtArgs> = {}>(args?: Subset<T, Comment$repliesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany"> | Null>
    likes<T extends Comment$likesArgs<ExtArgs> = {}>(args?: Subset<T, Comment$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findMany"> | Null>
    notifications<T extends Comment$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, Comment$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comment model
   */ 
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'String'>
    readonly content: FieldRef<"Comment", 'String'>
    readonly images: FieldRef<"Comment", 'String'>
    readonly parentId: FieldRef<"Comment", 'String'>
    readonly rootId: FieldRef<"Comment", 'String'>
    readonly repliesCount: FieldRef<"Comment", 'Int'>
    readonly likesCount: FieldRef<"Comment", 'Int'>
    readonly status: FieldRef<"Comment", 'String'>
    readonly createdAt: FieldRef<"Comment", 'DateTime'>
    readonly updatedAt: FieldRef<"Comment", 'DateTime'>
    readonly topicId: FieldRef<"Comment", 'String'>
    readonly projectId: FieldRef<"Comment", 'String'>
    readonly authorId: FieldRef<"Comment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }

  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
  }

  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }

  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
  }

  /**
   * Comment.topic
   */
  export type Comment$topicArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicInclude<ExtArgs> | null
    where?: TopicWhereInput
  }

  /**
   * Comment.project
   */
  export type Comment$projectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
  }

  /**
   * Comment.parent
   */
  export type Comment$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
  }

  /**
   * Comment.replies
   */
  export type Comment$repliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment.likes
   */
  export type Comment$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    where?: LikeWhereInput
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    cursor?: LikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * Comment.notifications
   */
  export type Comment$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
  }


  /**
   * Model Like
   */

  export type AggregateLike = {
    _count: LikeCountAggregateOutputType | null
    _min: LikeMinAggregateOutputType | null
    _max: LikeMaxAggregateOutputType | null
  }

  export type LikeMinAggregateOutputType = {
    id: string | null
    targetType: string | null
    targetId: string | null
    createdAt: Date | null
    userId: string | null
  }

  export type LikeMaxAggregateOutputType = {
    id: string | null
    targetType: string | null
    targetId: string | null
    createdAt: Date | null
    userId: string | null
  }

  export type LikeCountAggregateOutputType = {
    id: number
    targetType: number
    targetId: number
    createdAt: number
    userId: number
    _all: number
  }


  export type LikeMinAggregateInputType = {
    id?: true
    targetType?: true
    targetId?: true
    createdAt?: true
    userId?: true
  }

  export type LikeMaxAggregateInputType = {
    id?: true
    targetType?: true
    targetId?: true
    createdAt?: true
    userId?: true
  }

  export type LikeCountAggregateInputType = {
    id?: true
    targetType?: true
    targetId?: true
    createdAt?: true
    userId?: true
    _all?: true
  }

  export type LikeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Like to aggregate.
     */
    where?: LikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Likes
    **/
    _count?: true | LikeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LikeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LikeMaxAggregateInputType
  }

  export type GetLikeAggregateType<T extends LikeAggregateArgs> = {
        [P in keyof T & keyof AggregateLike]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLike[P]>
      : GetScalarType<T[P], AggregateLike[P]>
  }




  export type LikeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeWhereInput
    orderBy?: LikeOrderByWithAggregationInput | LikeOrderByWithAggregationInput[]
    by: LikeScalarFieldEnum[] | LikeScalarFieldEnum
    having?: LikeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LikeCountAggregateInputType | true
    _min?: LikeMinAggregateInputType
    _max?: LikeMaxAggregateInputType
  }

  export type LikeGroupByOutputType = {
    id: string
    targetType: string
    targetId: string
    createdAt: Date
    userId: string
    _count: LikeCountAggregateOutputType | null
    _min: LikeMinAggregateOutputType | null
    _max: LikeMaxAggregateOutputType | null
  }

  type GetLikeGroupByPayload<T extends LikeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LikeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LikeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LikeGroupByOutputType[P]>
            : GetScalarType<T[P], LikeGroupByOutputType[P]>
        }
      >
    >


  export type LikeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    targetType?: boolean
    targetId?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    topic?: boolean | Like$topicArgs<ExtArgs>
    comment?: boolean | Like$commentArgs<ExtArgs>
  }, ExtArgs["result"]["like"]>


  export type LikeSelectScalar = {
    id?: boolean
    targetType?: boolean
    targetId?: boolean
    createdAt?: boolean
    userId?: boolean
  }

  export type LikeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    topic?: boolean | Like$topicArgs<ExtArgs>
    comment?: boolean | Like$commentArgs<ExtArgs>
  }

  export type $LikePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Like"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      topic: Prisma.$TopicPayload<ExtArgs> | null
      comment: Prisma.$CommentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      targetType: string
      targetId: string
      createdAt: Date
      userId: string
    }, ExtArgs["result"]["like"]>
    composites: {}
  }

  type LikeGetPayload<S extends boolean | null | undefined | LikeDefaultArgs> = $Result.GetResult<Prisma.$LikePayload, S>

  type LikeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LikeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LikeCountAggregateInputType | true
    }

  export interface LikeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Like'], meta: { name: 'Like' } }
    /**
     * Find zero or one Like that matches the filter.
     * @param {LikeFindUniqueArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LikeFindUniqueArgs>(args: SelectSubset<T, LikeFindUniqueArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Like that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LikeFindUniqueOrThrowArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LikeFindUniqueOrThrowArgs>(args: SelectSubset<T, LikeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Like that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeFindFirstArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LikeFindFirstArgs>(args?: SelectSubset<T, LikeFindFirstArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Like that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeFindFirstOrThrowArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LikeFindFirstOrThrowArgs>(args?: SelectSubset<T, LikeFindFirstOrThrowArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Likes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Likes
     * const likes = await prisma.like.findMany()
     * 
     * // Get first 10 Likes
     * const likes = await prisma.like.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const likeWithIdOnly = await prisma.like.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LikeFindManyArgs>(args?: SelectSubset<T, LikeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Like.
     * @param {LikeCreateArgs} args - Arguments to create a Like.
     * @example
     * // Create one Like
     * const Like = await prisma.like.create({
     *   data: {
     *     // ... data to create a Like
     *   }
     * })
     * 
     */
    create<T extends LikeCreateArgs>(args: SelectSubset<T, LikeCreateArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Likes.
     * @param {LikeCreateManyArgs} args - Arguments to create many Likes.
     * @example
     * // Create many Likes
     * const like = await prisma.like.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LikeCreateManyArgs>(args?: SelectSubset<T, LikeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Like.
     * @param {LikeDeleteArgs} args - Arguments to delete one Like.
     * @example
     * // Delete one Like
     * const Like = await prisma.like.delete({
     *   where: {
     *     // ... filter to delete one Like
     *   }
     * })
     * 
     */
    delete<T extends LikeDeleteArgs>(args: SelectSubset<T, LikeDeleteArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Like.
     * @param {LikeUpdateArgs} args - Arguments to update one Like.
     * @example
     * // Update one Like
     * const like = await prisma.like.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LikeUpdateArgs>(args: SelectSubset<T, LikeUpdateArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Likes.
     * @param {LikeDeleteManyArgs} args - Arguments to filter Likes to delete.
     * @example
     * // Delete a few Likes
     * const { count } = await prisma.like.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LikeDeleteManyArgs>(args?: SelectSubset<T, LikeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Likes
     * const like = await prisma.like.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LikeUpdateManyArgs>(args: SelectSubset<T, LikeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Like.
     * @param {LikeUpsertArgs} args - Arguments to update or create a Like.
     * @example
     * // Update or create a Like
     * const like = await prisma.like.upsert({
     *   create: {
     *     // ... data to create a Like
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Like we want to update
     *   }
     * })
     */
    upsert<T extends LikeUpsertArgs>(args: SelectSubset<T, LikeUpsertArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeCountArgs} args - Arguments to filter Likes to count.
     * @example
     * // Count the number of Likes
     * const count = await prisma.like.count({
     *   where: {
     *     // ... the filter for the Likes we want to count
     *   }
     * })
    **/
    count<T extends LikeCountArgs>(
      args?: Subset<T, LikeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LikeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Like.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LikeAggregateArgs>(args: Subset<T, LikeAggregateArgs>): Prisma.PrismaPromise<GetLikeAggregateType<T>>

    /**
     * Group by Like.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LikeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LikeGroupByArgs['orderBy'] }
        : { orderBy?: LikeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Like model
   */
  readonly fields: LikeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Like.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LikeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    topic<T extends Like$topicArgs<ExtArgs> = {}>(args?: Subset<T, Like$topicArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    comment<T extends Like$commentArgs<ExtArgs> = {}>(args?: Subset<T, Like$commentArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Like model
   */ 
  interface LikeFieldRefs {
    readonly id: FieldRef<"Like", 'String'>
    readonly targetType: FieldRef<"Like", 'String'>
    readonly targetId: FieldRef<"Like", 'String'>
    readonly createdAt: FieldRef<"Like", 'DateTime'>
    readonly userId: FieldRef<"Like", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Like findUnique
   */
  export type LikeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter, which Like to fetch.
     */
    where: LikeWhereUniqueInput
  }

  /**
   * Like findUniqueOrThrow
   */
  export type LikeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter, which Like to fetch.
     */
    where: LikeWhereUniqueInput
  }

  /**
   * Like findFirst
   */
  export type LikeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter, which Like to fetch.
     */
    where?: LikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Likes.
     */
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Likes.
     */
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * Like findFirstOrThrow
   */
  export type LikeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter, which Like to fetch.
     */
    where?: LikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Likes.
     */
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Likes.
     */
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * Like findMany
   */
  export type LikeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter, which Likes to fetch.
     */
    where?: LikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Likes.
     */
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * Like create
   */
  export type LikeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * The data needed to create a Like.
     */
    data: XOR<LikeCreateInput, LikeUncheckedCreateInput>
  }

  /**
   * Like createMany
   */
  export type LikeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Likes.
     */
    data: LikeCreateManyInput | LikeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Like update
   */
  export type LikeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * The data needed to update a Like.
     */
    data: XOR<LikeUpdateInput, LikeUncheckedUpdateInput>
    /**
     * Choose, which Like to update.
     */
    where: LikeWhereUniqueInput
  }

  /**
   * Like updateMany
   */
  export type LikeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Likes.
     */
    data: XOR<LikeUpdateManyMutationInput, LikeUncheckedUpdateManyInput>
    /**
     * Filter which Likes to update
     */
    where?: LikeWhereInput
  }

  /**
   * Like upsert
   */
  export type LikeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * The filter to search for the Like to update in case it exists.
     */
    where: LikeWhereUniqueInput
    /**
     * In case the Like found by the `where` argument doesn't exist, create a new Like with this data.
     */
    create: XOR<LikeCreateInput, LikeUncheckedCreateInput>
    /**
     * In case the Like was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LikeUpdateInput, LikeUncheckedUpdateInput>
  }

  /**
   * Like delete
   */
  export type LikeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter which Like to delete.
     */
    where: LikeWhereUniqueInput
  }

  /**
   * Like deleteMany
   */
  export type LikeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Likes to delete
     */
    where?: LikeWhereInput
  }

  /**
   * Like.topic
   */
  export type Like$topicArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicInclude<ExtArgs> | null
    where?: TopicWhereInput
  }

  /**
   * Like.comment
   */
  export type Like$commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
  }

  /**
   * Like without action
   */
  export type LikeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
  }


  /**
   * Model Bookmark
   */

  export type AggregateBookmark = {
    _count: BookmarkCountAggregateOutputType | null
    _min: BookmarkMinAggregateOutputType | null
    _max: BookmarkMaxAggregateOutputType | null
  }

  export type BookmarkMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    userId: string | null
    topicId: string | null
  }

  export type BookmarkMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    userId: string | null
    topicId: string | null
  }

  export type BookmarkCountAggregateOutputType = {
    id: number
    createdAt: number
    userId: number
    topicId: number
    _all: number
  }


  export type BookmarkMinAggregateInputType = {
    id?: true
    createdAt?: true
    userId?: true
    topicId?: true
  }

  export type BookmarkMaxAggregateInputType = {
    id?: true
    createdAt?: true
    userId?: true
    topicId?: true
  }

  export type BookmarkCountAggregateInputType = {
    id?: true
    createdAt?: true
    userId?: true
    topicId?: true
    _all?: true
  }

  export type BookmarkAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bookmark to aggregate.
     */
    where?: BookmarkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookmarks to fetch.
     */
    orderBy?: BookmarkOrderByWithRelationInput | BookmarkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookmarkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookmarks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookmarks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Bookmarks
    **/
    _count?: true | BookmarkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookmarkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookmarkMaxAggregateInputType
  }

  export type GetBookmarkAggregateType<T extends BookmarkAggregateArgs> = {
        [P in keyof T & keyof AggregateBookmark]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBookmark[P]>
      : GetScalarType<T[P], AggregateBookmark[P]>
  }




  export type BookmarkGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookmarkWhereInput
    orderBy?: BookmarkOrderByWithAggregationInput | BookmarkOrderByWithAggregationInput[]
    by: BookmarkScalarFieldEnum[] | BookmarkScalarFieldEnum
    having?: BookmarkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookmarkCountAggregateInputType | true
    _min?: BookmarkMinAggregateInputType
    _max?: BookmarkMaxAggregateInputType
  }

  export type BookmarkGroupByOutputType = {
    id: string
    createdAt: Date
    userId: string
    topicId: string
    _count: BookmarkCountAggregateOutputType | null
    _min: BookmarkMinAggregateOutputType | null
    _max: BookmarkMaxAggregateOutputType | null
  }

  type GetBookmarkGroupByPayload<T extends BookmarkGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BookmarkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookmarkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookmarkGroupByOutputType[P]>
            : GetScalarType<T[P], BookmarkGroupByOutputType[P]>
        }
      >
    >


  export type BookmarkSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    userId?: boolean
    topicId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    topic?: boolean | TopicDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookmark"]>


  export type BookmarkSelectScalar = {
    id?: boolean
    createdAt?: boolean
    userId?: boolean
    topicId?: boolean
  }

  export type BookmarkInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    topic?: boolean | TopicDefaultArgs<ExtArgs>
  }

  export type $BookmarkPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Bookmark"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      topic: Prisma.$TopicPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      userId: string
      topicId: string
    }, ExtArgs["result"]["bookmark"]>
    composites: {}
  }

  type BookmarkGetPayload<S extends boolean | null | undefined | BookmarkDefaultArgs> = $Result.GetResult<Prisma.$BookmarkPayload, S>

  type BookmarkCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BookmarkFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BookmarkCountAggregateInputType | true
    }

  export interface BookmarkDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Bookmark'], meta: { name: 'Bookmark' } }
    /**
     * Find zero or one Bookmark that matches the filter.
     * @param {BookmarkFindUniqueArgs} args - Arguments to find a Bookmark
     * @example
     * // Get one Bookmark
     * const bookmark = await prisma.bookmark.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BookmarkFindUniqueArgs>(args: SelectSubset<T, BookmarkFindUniqueArgs<ExtArgs>>): Prisma__BookmarkClient<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Bookmark that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BookmarkFindUniqueOrThrowArgs} args - Arguments to find a Bookmark
     * @example
     * // Get one Bookmark
     * const bookmark = await prisma.bookmark.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BookmarkFindUniqueOrThrowArgs>(args: SelectSubset<T, BookmarkFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BookmarkClient<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Bookmark that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkFindFirstArgs} args - Arguments to find a Bookmark
     * @example
     * // Get one Bookmark
     * const bookmark = await prisma.bookmark.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BookmarkFindFirstArgs>(args?: SelectSubset<T, BookmarkFindFirstArgs<ExtArgs>>): Prisma__BookmarkClient<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Bookmark that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkFindFirstOrThrowArgs} args - Arguments to find a Bookmark
     * @example
     * // Get one Bookmark
     * const bookmark = await prisma.bookmark.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BookmarkFindFirstOrThrowArgs>(args?: SelectSubset<T, BookmarkFindFirstOrThrowArgs<ExtArgs>>): Prisma__BookmarkClient<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Bookmarks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bookmarks
     * const bookmarks = await prisma.bookmark.findMany()
     * 
     * // Get first 10 Bookmarks
     * const bookmarks = await prisma.bookmark.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookmarkWithIdOnly = await prisma.bookmark.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BookmarkFindManyArgs>(args?: SelectSubset<T, BookmarkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Bookmark.
     * @param {BookmarkCreateArgs} args - Arguments to create a Bookmark.
     * @example
     * // Create one Bookmark
     * const Bookmark = await prisma.bookmark.create({
     *   data: {
     *     // ... data to create a Bookmark
     *   }
     * })
     * 
     */
    create<T extends BookmarkCreateArgs>(args: SelectSubset<T, BookmarkCreateArgs<ExtArgs>>): Prisma__BookmarkClient<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Bookmarks.
     * @param {BookmarkCreateManyArgs} args - Arguments to create many Bookmarks.
     * @example
     * // Create many Bookmarks
     * const bookmark = await prisma.bookmark.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BookmarkCreateManyArgs>(args?: SelectSubset<T, BookmarkCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Bookmark.
     * @param {BookmarkDeleteArgs} args - Arguments to delete one Bookmark.
     * @example
     * // Delete one Bookmark
     * const Bookmark = await prisma.bookmark.delete({
     *   where: {
     *     // ... filter to delete one Bookmark
     *   }
     * })
     * 
     */
    delete<T extends BookmarkDeleteArgs>(args: SelectSubset<T, BookmarkDeleteArgs<ExtArgs>>): Prisma__BookmarkClient<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Bookmark.
     * @param {BookmarkUpdateArgs} args - Arguments to update one Bookmark.
     * @example
     * // Update one Bookmark
     * const bookmark = await prisma.bookmark.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BookmarkUpdateArgs>(args: SelectSubset<T, BookmarkUpdateArgs<ExtArgs>>): Prisma__BookmarkClient<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Bookmarks.
     * @param {BookmarkDeleteManyArgs} args - Arguments to filter Bookmarks to delete.
     * @example
     * // Delete a few Bookmarks
     * const { count } = await prisma.bookmark.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BookmarkDeleteManyArgs>(args?: SelectSubset<T, BookmarkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bookmarks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bookmarks
     * const bookmark = await prisma.bookmark.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BookmarkUpdateManyArgs>(args: SelectSubset<T, BookmarkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Bookmark.
     * @param {BookmarkUpsertArgs} args - Arguments to update or create a Bookmark.
     * @example
     * // Update or create a Bookmark
     * const bookmark = await prisma.bookmark.upsert({
     *   create: {
     *     // ... data to create a Bookmark
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bookmark we want to update
     *   }
     * })
     */
    upsert<T extends BookmarkUpsertArgs>(args: SelectSubset<T, BookmarkUpsertArgs<ExtArgs>>): Prisma__BookmarkClient<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Bookmarks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkCountArgs} args - Arguments to filter Bookmarks to count.
     * @example
     * // Count the number of Bookmarks
     * const count = await prisma.bookmark.count({
     *   where: {
     *     // ... the filter for the Bookmarks we want to count
     *   }
     * })
    **/
    count<T extends BookmarkCountArgs>(
      args?: Subset<T, BookmarkCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookmarkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bookmark.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookmarkAggregateArgs>(args: Subset<T, BookmarkAggregateArgs>): Prisma.PrismaPromise<GetBookmarkAggregateType<T>>

    /**
     * Group by Bookmark.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookmarkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookmarkGroupByArgs['orderBy'] }
        : { orderBy?: BookmarkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookmarkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookmarkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Bookmark model
   */
  readonly fields: BookmarkFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Bookmark.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BookmarkClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    topic<T extends TopicDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TopicDefaultArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Bookmark model
   */ 
  interface BookmarkFieldRefs {
    readonly id: FieldRef<"Bookmark", 'String'>
    readonly createdAt: FieldRef<"Bookmark", 'DateTime'>
    readonly userId: FieldRef<"Bookmark", 'String'>
    readonly topicId: FieldRef<"Bookmark", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Bookmark findUnique
   */
  export type BookmarkFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    /**
     * Filter, which Bookmark to fetch.
     */
    where: BookmarkWhereUniqueInput
  }

  /**
   * Bookmark findUniqueOrThrow
   */
  export type BookmarkFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    /**
     * Filter, which Bookmark to fetch.
     */
    where: BookmarkWhereUniqueInput
  }

  /**
   * Bookmark findFirst
   */
  export type BookmarkFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    /**
     * Filter, which Bookmark to fetch.
     */
    where?: BookmarkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookmarks to fetch.
     */
    orderBy?: BookmarkOrderByWithRelationInput | BookmarkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bookmarks.
     */
    cursor?: BookmarkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookmarks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookmarks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bookmarks.
     */
    distinct?: BookmarkScalarFieldEnum | BookmarkScalarFieldEnum[]
  }

  /**
   * Bookmark findFirstOrThrow
   */
  export type BookmarkFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    /**
     * Filter, which Bookmark to fetch.
     */
    where?: BookmarkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookmarks to fetch.
     */
    orderBy?: BookmarkOrderByWithRelationInput | BookmarkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bookmarks.
     */
    cursor?: BookmarkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookmarks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookmarks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bookmarks.
     */
    distinct?: BookmarkScalarFieldEnum | BookmarkScalarFieldEnum[]
  }

  /**
   * Bookmark findMany
   */
  export type BookmarkFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    /**
     * Filter, which Bookmarks to fetch.
     */
    where?: BookmarkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookmarks to fetch.
     */
    orderBy?: BookmarkOrderByWithRelationInput | BookmarkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Bookmarks.
     */
    cursor?: BookmarkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookmarks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookmarks.
     */
    skip?: number
    distinct?: BookmarkScalarFieldEnum | BookmarkScalarFieldEnum[]
  }

  /**
   * Bookmark create
   */
  export type BookmarkCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    /**
     * The data needed to create a Bookmark.
     */
    data: XOR<BookmarkCreateInput, BookmarkUncheckedCreateInput>
  }

  /**
   * Bookmark createMany
   */
  export type BookmarkCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Bookmarks.
     */
    data: BookmarkCreateManyInput | BookmarkCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Bookmark update
   */
  export type BookmarkUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    /**
     * The data needed to update a Bookmark.
     */
    data: XOR<BookmarkUpdateInput, BookmarkUncheckedUpdateInput>
    /**
     * Choose, which Bookmark to update.
     */
    where: BookmarkWhereUniqueInput
  }

  /**
   * Bookmark updateMany
   */
  export type BookmarkUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Bookmarks.
     */
    data: XOR<BookmarkUpdateManyMutationInput, BookmarkUncheckedUpdateManyInput>
    /**
     * Filter which Bookmarks to update
     */
    where?: BookmarkWhereInput
  }

  /**
   * Bookmark upsert
   */
  export type BookmarkUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    /**
     * The filter to search for the Bookmark to update in case it exists.
     */
    where: BookmarkWhereUniqueInput
    /**
     * In case the Bookmark found by the `where` argument doesn't exist, create a new Bookmark with this data.
     */
    create: XOR<BookmarkCreateInput, BookmarkUncheckedCreateInput>
    /**
     * In case the Bookmark was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookmarkUpdateInput, BookmarkUncheckedUpdateInput>
  }

  /**
   * Bookmark delete
   */
  export type BookmarkDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    /**
     * Filter which Bookmark to delete.
     */
    where: BookmarkWhereUniqueInput
  }

  /**
   * Bookmark deleteMany
   */
  export type BookmarkDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bookmarks to delete
     */
    where?: BookmarkWhereInput
  }

  /**
   * Bookmark without action
   */
  export type BookmarkDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
  }


  /**
   * Model Follow
   */

  export type AggregateFollow = {
    _count: FollowCountAggregateOutputType | null
    _min: FollowMinAggregateOutputType | null
    _max: FollowMaxAggregateOutputType | null
  }

  export type FollowMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    followerId: string | null
    followingId: string | null
  }

  export type FollowMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    followerId: string | null
    followingId: string | null
  }

  export type FollowCountAggregateOutputType = {
    id: number
    createdAt: number
    followerId: number
    followingId: number
    _all: number
  }


  export type FollowMinAggregateInputType = {
    id?: true
    createdAt?: true
    followerId?: true
    followingId?: true
  }

  export type FollowMaxAggregateInputType = {
    id?: true
    createdAt?: true
    followerId?: true
    followingId?: true
  }

  export type FollowCountAggregateInputType = {
    id?: true
    createdAt?: true
    followerId?: true
    followingId?: true
    _all?: true
  }

  export type FollowAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Follow to aggregate.
     */
    where?: FollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     */
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Follows
    **/
    _count?: true | FollowCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FollowMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FollowMaxAggregateInputType
  }

  export type GetFollowAggregateType<T extends FollowAggregateArgs> = {
        [P in keyof T & keyof AggregateFollow]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFollow[P]>
      : GetScalarType<T[P], AggregateFollow[P]>
  }




  export type FollowGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FollowWhereInput
    orderBy?: FollowOrderByWithAggregationInput | FollowOrderByWithAggregationInput[]
    by: FollowScalarFieldEnum[] | FollowScalarFieldEnum
    having?: FollowScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FollowCountAggregateInputType | true
    _min?: FollowMinAggregateInputType
    _max?: FollowMaxAggregateInputType
  }

  export type FollowGroupByOutputType = {
    id: string
    createdAt: Date
    followerId: string
    followingId: string
    _count: FollowCountAggregateOutputType | null
    _min: FollowMinAggregateOutputType | null
    _max: FollowMaxAggregateOutputType | null
  }

  type GetFollowGroupByPayload<T extends FollowGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FollowGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FollowGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FollowGroupByOutputType[P]>
            : GetScalarType<T[P], FollowGroupByOutputType[P]>
        }
      >
    >


  export type FollowSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    followerId?: boolean
    followingId?: boolean
    follower?: boolean | UserDefaultArgs<ExtArgs>
    following?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["follow"]>


  export type FollowSelectScalar = {
    id?: boolean
    createdAt?: boolean
    followerId?: boolean
    followingId?: boolean
  }

  export type FollowInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    follower?: boolean | UserDefaultArgs<ExtArgs>
    following?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FollowPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Follow"
    objects: {
      follower: Prisma.$UserPayload<ExtArgs>
      following: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      followerId: string
      followingId: string
    }, ExtArgs["result"]["follow"]>
    composites: {}
  }

  type FollowGetPayload<S extends boolean | null | undefined | FollowDefaultArgs> = $Result.GetResult<Prisma.$FollowPayload, S>

  type FollowCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FollowFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FollowCountAggregateInputType | true
    }

  export interface FollowDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Follow'], meta: { name: 'Follow' } }
    /**
     * Find zero or one Follow that matches the filter.
     * @param {FollowFindUniqueArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FollowFindUniqueArgs>(args: SelectSubset<T, FollowFindUniqueArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Follow that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FollowFindUniqueOrThrowArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FollowFindUniqueOrThrowArgs>(args: SelectSubset<T, FollowFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Follow that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowFindFirstArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FollowFindFirstArgs>(args?: SelectSubset<T, FollowFindFirstArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Follow that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowFindFirstOrThrowArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FollowFindFirstOrThrowArgs>(args?: SelectSubset<T, FollowFindFirstOrThrowArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Follows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Follows
     * const follows = await prisma.follow.findMany()
     * 
     * // Get first 10 Follows
     * const follows = await prisma.follow.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const followWithIdOnly = await prisma.follow.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FollowFindManyArgs>(args?: SelectSubset<T, FollowFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Follow.
     * @param {FollowCreateArgs} args - Arguments to create a Follow.
     * @example
     * // Create one Follow
     * const Follow = await prisma.follow.create({
     *   data: {
     *     // ... data to create a Follow
     *   }
     * })
     * 
     */
    create<T extends FollowCreateArgs>(args: SelectSubset<T, FollowCreateArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Follows.
     * @param {FollowCreateManyArgs} args - Arguments to create many Follows.
     * @example
     * // Create many Follows
     * const follow = await prisma.follow.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FollowCreateManyArgs>(args?: SelectSubset<T, FollowCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Follow.
     * @param {FollowDeleteArgs} args - Arguments to delete one Follow.
     * @example
     * // Delete one Follow
     * const Follow = await prisma.follow.delete({
     *   where: {
     *     // ... filter to delete one Follow
     *   }
     * })
     * 
     */
    delete<T extends FollowDeleteArgs>(args: SelectSubset<T, FollowDeleteArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Follow.
     * @param {FollowUpdateArgs} args - Arguments to update one Follow.
     * @example
     * // Update one Follow
     * const follow = await prisma.follow.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FollowUpdateArgs>(args: SelectSubset<T, FollowUpdateArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Follows.
     * @param {FollowDeleteManyArgs} args - Arguments to filter Follows to delete.
     * @example
     * // Delete a few Follows
     * const { count } = await prisma.follow.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FollowDeleteManyArgs>(args?: SelectSubset<T, FollowDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Follows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Follows
     * const follow = await prisma.follow.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FollowUpdateManyArgs>(args: SelectSubset<T, FollowUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Follow.
     * @param {FollowUpsertArgs} args - Arguments to update or create a Follow.
     * @example
     * // Update or create a Follow
     * const follow = await prisma.follow.upsert({
     *   create: {
     *     // ... data to create a Follow
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Follow we want to update
     *   }
     * })
     */
    upsert<T extends FollowUpsertArgs>(args: SelectSubset<T, FollowUpsertArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Follows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowCountArgs} args - Arguments to filter Follows to count.
     * @example
     * // Count the number of Follows
     * const count = await prisma.follow.count({
     *   where: {
     *     // ... the filter for the Follows we want to count
     *   }
     * })
    **/
    count<T extends FollowCountArgs>(
      args?: Subset<T, FollowCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FollowCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Follow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FollowAggregateArgs>(args: Subset<T, FollowAggregateArgs>): Prisma.PrismaPromise<GetFollowAggregateType<T>>

    /**
     * Group by Follow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FollowGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FollowGroupByArgs['orderBy'] }
        : { orderBy?: FollowGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FollowGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFollowGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Follow model
   */
  readonly fields: FollowFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Follow.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FollowClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    follower<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    following<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Follow model
   */ 
  interface FollowFieldRefs {
    readonly id: FieldRef<"Follow", 'String'>
    readonly createdAt: FieldRef<"Follow", 'DateTime'>
    readonly followerId: FieldRef<"Follow", 'String'>
    readonly followingId: FieldRef<"Follow", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Follow findUnique
   */
  export type FollowFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * Filter, which Follow to fetch.
     */
    where: FollowWhereUniqueInput
  }

  /**
   * Follow findUniqueOrThrow
   */
  export type FollowFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * Filter, which Follow to fetch.
     */
    where: FollowWhereUniqueInput
  }

  /**
   * Follow findFirst
   */
  export type FollowFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * Filter, which Follow to fetch.
     */
    where?: FollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     */
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Follows.
     */
    cursor?: FollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Follows.
     */
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[]
  }

  /**
   * Follow findFirstOrThrow
   */
  export type FollowFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * Filter, which Follow to fetch.
     */
    where?: FollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     */
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Follows.
     */
    cursor?: FollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Follows.
     */
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[]
  }

  /**
   * Follow findMany
   */
  export type FollowFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * Filter, which Follows to fetch.
     */
    where?: FollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     */
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Follows.
     */
    cursor?: FollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     */
    skip?: number
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[]
  }

  /**
   * Follow create
   */
  export type FollowCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * The data needed to create a Follow.
     */
    data: XOR<FollowCreateInput, FollowUncheckedCreateInput>
  }

  /**
   * Follow createMany
   */
  export type FollowCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Follows.
     */
    data: FollowCreateManyInput | FollowCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Follow update
   */
  export type FollowUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * The data needed to update a Follow.
     */
    data: XOR<FollowUpdateInput, FollowUncheckedUpdateInput>
    /**
     * Choose, which Follow to update.
     */
    where: FollowWhereUniqueInput
  }

  /**
   * Follow updateMany
   */
  export type FollowUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Follows.
     */
    data: XOR<FollowUpdateManyMutationInput, FollowUncheckedUpdateManyInput>
    /**
     * Filter which Follows to update
     */
    where?: FollowWhereInput
  }

  /**
   * Follow upsert
   */
  export type FollowUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * The filter to search for the Follow to update in case it exists.
     */
    where: FollowWhereUniqueInput
    /**
     * In case the Follow found by the `where` argument doesn't exist, create a new Follow with this data.
     */
    create: XOR<FollowCreateInput, FollowUncheckedCreateInput>
    /**
     * In case the Follow was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FollowUpdateInput, FollowUncheckedUpdateInput>
  }

  /**
   * Follow delete
   */
  export type FollowDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * Filter which Follow to delete.
     */
    where: FollowWhereUniqueInput
  }

  /**
   * Follow deleteMany
   */
  export type FollowDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Follows to delete
     */
    where?: FollowWhereInput
  }

  /**
   * Follow without action
   */
  export type FollowDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    type: string | null
    title: string | null
    content: string | null
    isRead: boolean | null
    readAt: Date | null
    link: string | null
    createdAt: Date | null
    userId: string | null
    actorId: string | null
    targetType: string | null
    targetId: string | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    type: string | null
    title: string | null
    content: string | null
    isRead: boolean | null
    readAt: Date | null
    link: string | null
    createdAt: Date | null
    userId: string | null
    actorId: string | null
    targetType: string | null
    targetId: string | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    type: number
    title: number
    content: number
    isRead: number
    readAt: number
    link: number
    createdAt: number
    userId: number
    actorId: number
    targetType: number
    targetId: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    type?: true
    title?: true
    content?: true
    isRead?: true
    readAt?: true
    link?: true
    createdAt?: true
    userId?: true
    actorId?: true
    targetType?: true
    targetId?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    type?: true
    title?: true
    content?: true
    isRead?: true
    readAt?: true
    link?: true
    createdAt?: true
    userId?: true
    actorId?: true
    targetType?: true
    targetId?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    type?: true
    title?: true
    content?: true
    isRead?: true
    readAt?: true
    link?: true
    createdAt?: true
    userId?: true
    actorId?: true
    targetType?: true
    targetId?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    type: string
    title: string
    content: string
    isRead: boolean
    readAt: Date | null
    link: string | null
    createdAt: Date
    userId: string
    actorId: string | null
    targetType: string
    targetId: string
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    title?: boolean
    content?: boolean
    isRead?: boolean
    readAt?: boolean
    link?: boolean
    createdAt?: boolean
    userId?: boolean
    actorId?: boolean
    targetType?: boolean
    targetId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    actor?: boolean | Notification$actorArgs<ExtArgs>
    topic?: boolean | Notification$topicArgs<ExtArgs>
    comment?: boolean | Notification$commentArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>


  export type NotificationSelectScalar = {
    id?: boolean
    type?: boolean
    title?: boolean
    content?: boolean
    isRead?: boolean
    readAt?: boolean
    link?: boolean
    createdAt?: boolean
    userId?: boolean
    actorId?: boolean
    targetType?: boolean
    targetId?: boolean
  }

  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    actor?: boolean | Notification$actorArgs<ExtArgs>
    topic?: boolean | Notification$topicArgs<ExtArgs>
    comment?: boolean | Notification$commentArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      actor: Prisma.$UserPayload<ExtArgs> | null
      topic: Prisma.$TopicPayload<ExtArgs> | null
      comment: Prisma.$CommentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      title: string
      content: string
      isRead: boolean
      readAt: Date | null
      link: string | null
      createdAt: Date
      userId: string
      actorId: string | null
      targetType: string
      targetId: string
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    actor<T extends Notification$actorArgs<ExtArgs> = {}>(args?: Subset<T, Notification$actorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    topic<T extends Notification$topicArgs<ExtArgs> = {}>(args?: Subset<T, Notification$topicArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    comment<T extends Notification$commentArgs<ExtArgs> = {}>(args?: Subset<T, Notification$commentArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'String'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly content: FieldRef<"Notification", 'String'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly readAt: FieldRef<"Notification", 'DateTime'>
    readonly link: FieldRef<"Notification", 'String'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly actorId: FieldRef<"Notification", 'String'>
    readonly targetType: FieldRef<"Notification", 'String'>
    readonly targetId: FieldRef<"Notification", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification.actor
   */
  export type Notification$actorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Notification.topic
   */
  export type Notification$topicArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicInclude<ExtArgs> | null
    where?: TopicWhereInput
  }

  /**
   * Notification.comment
   */
  export type Notification$commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model UserAction
   */

  export type AggregateUserAction = {
    _count: UserActionCountAggregateOutputType | null
    _min: UserActionMinAggregateOutputType | null
    _max: UserActionMaxAggregateOutputType | null
  }

  export type UserActionMinAggregateOutputType = {
    id: string | null
    actionType: string | null
    targetType: string | null
    targetId: string | null
    metadata: string | null
    createdAt: Date | null
    userId: string | null
  }

  export type UserActionMaxAggregateOutputType = {
    id: string | null
    actionType: string | null
    targetType: string | null
    targetId: string | null
    metadata: string | null
    createdAt: Date | null
    userId: string | null
  }

  export type UserActionCountAggregateOutputType = {
    id: number
    actionType: number
    targetType: number
    targetId: number
    metadata: number
    createdAt: number
    userId: number
    _all: number
  }


  export type UserActionMinAggregateInputType = {
    id?: true
    actionType?: true
    targetType?: true
    targetId?: true
    metadata?: true
    createdAt?: true
    userId?: true
  }

  export type UserActionMaxAggregateInputType = {
    id?: true
    actionType?: true
    targetType?: true
    targetId?: true
    metadata?: true
    createdAt?: true
    userId?: true
  }

  export type UserActionCountAggregateInputType = {
    id?: true
    actionType?: true
    targetType?: true
    targetId?: true
    metadata?: true
    createdAt?: true
    userId?: true
    _all?: true
  }

  export type UserActionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserAction to aggregate.
     */
    where?: UserActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserActions to fetch.
     */
    orderBy?: UserActionOrderByWithRelationInput | UserActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserActions
    **/
    _count?: true | UserActionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserActionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserActionMaxAggregateInputType
  }

  export type GetUserActionAggregateType<T extends UserActionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserAction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserAction[P]>
      : GetScalarType<T[P], AggregateUserAction[P]>
  }




  export type UserActionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserActionWhereInput
    orderBy?: UserActionOrderByWithAggregationInput | UserActionOrderByWithAggregationInput[]
    by: UserActionScalarFieldEnum[] | UserActionScalarFieldEnum
    having?: UserActionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserActionCountAggregateInputType | true
    _min?: UserActionMinAggregateInputType
    _max?: UserActionMaxAggregateInputType
  }

  export type UserActionGroupByOutputType = {
    id: string
    actionType: string
    targetType: string
    targetId: string
    metadata: string | null
    createdAt: Date
    userId: string
    _count: UserActionCountAggregateOutputType | null
    _min: UserActionMinAggregateOutputType | null
    _max: UserActionMaxAggregateOutputType | null
  }

  type GetUserActionGroupByPayload<T extends UserActionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserActionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserActionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserActionGroupByOutputType[P]>
            : GetScalarType<T[P], UserActionGroupByOutputType[P]>
        }
      >
    >


  export type UserActionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    actionType?: boolean
    targetType?: boolean
    targetId?: boolean
    metadata?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    topic?: boolean | UserAction$topicArgs<ExtArgs>
  }, ExtArgs["result"]["userAction"]>


  export type UserActionSelectScalar = {
    id?: boolean
    actionType?: boolean
    targetType?: boolean
    targetId?: boolean
    metadata?: boolean
    createdAt?: boolean
    userId?: boolean
  }

  export type UserActionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    topic?: boolean | UserAction$topicArgs<ExtArgs>
  }

  export type $UserActionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserAction"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      topic: Prisma.$TopicPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      actionType: string
      targetType: string
      targetId: string
      metadata: string | null
      createdAt: Date
      userId: string
    }, ExtArgs["result"]["userAction"]>
    composites: {}
  }

  type UserActionGetPayload<S extends boolean | null | undefined | UserActionDefaultArgs> = $Result.GetResult<Prisma.$UserActionPayload, S>

  type UserActionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserActionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserActionCountAggregateInputType | true
    }

  export interface UserActionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserAction'], meta: { name: 'UserAction' } }
    /**
     * Find zero or one UserAction that matches the filter.
     * @param {UserActionFindUniqueArgs} args - Arguments to find a UserAction
     * @example
     * // Get one UserAction
     * const userAction = await prisma.userAction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserActionFindUniqueArgs>(args: SelectSubset<T, UserActionFindUniqueArgs<ExtArgs>>): Prisma__UserActionClient<$Result.GetResult<Prisma.$UserActionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserAction that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserActionFindUniqueOrThrowArgs} args - Arguments to find a UserAction
     * @example
     * // Get one UserAction
     * const userAction = await prisma.userAction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserActionFindUniqueOrThrowArgs>(args: SelectSubset<T, UserActionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserActionClient<$Result.GetResult<Prisma.$UserActionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserAction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActionFindFirstArgs} args - Arguments to find a UserAction
     * @example
     * // Get one UserAction
     * const userAction = await prisma.userAction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserActionFindFirstArgs>(args?: SelectSubset<T, UserActionFindFirstArgs<ExtArgs>>): Prisma__UserActionClient<$Result.GetResult<Prisma.$UserActionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserAction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActionFindFirstOrThrowArgs} args - Arguments to find a UserAction
     * @example
     * // Get one UserAction
     * const userAction = await prisma.userAction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserActionFindFirstOrThrowArgs>(args?: SelectSubset<T, UserActionFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserActionClient<$Result.GetResult<Prisma.$UserActionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserActions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserActions
     * const userActions = await prisma.userAction.findMany()
     * 
     * // Get first 10 UserActions
     * const userActions = await prisma.userAction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userActionWithIdOnly = await prisma.userAction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserActionFindManyArgs>(args?: SelectSubset<T, UserActionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserActionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserAction.
     * @param {UserActionCreateArgs} args - Arguments to create a UserAction.
     * @example
     * // Create one UserAction
     * const UserAction = await prisma.userAction.create({
     *   data: {
     *     // ... data to create a UserAction
     *   }
     * })
     * 
     */
    create<T extends UserActionCreateArgs>(args: SelectSubset<T, UserActionCreateArgs<ExtArgs>>): Prisma__UserActionClient<$Result.GetResult<Prisma.$UserActionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserActions.
     * @param {UserActionCreateManyArgs} args - Arguments to create many UserActions.
     * @example
     * // Create many UserActions
     * const userAction = await prisma.userAction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserActionCreateManyArgs>(args?: SelectSubset<T, UserActionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserAction.
     * @param {UserActionDeleteArgs} args - Arguments to delete one UserAction.
     * @example
     * // Delete one UserAction
     * const UserAction = await prisma.userAction.delete({
     *   where: {
     *     // ... filter to delete one UserAction
     *   }
     * })
     * 
     */
    delete<T extends UserActionDeleteArgs>(args: SelectSubset<T, UserActionDeleteArgs<ExtArgs>>): Prisma__UserActionClient<$Result.GetResult<Prisma.$UserActionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserAction.
     * @param {UserActionUpdateArgs} args - Arguments to update one UserAction.
     * @example
     * // Update one UserAction
     * const userAction = await prisma.userAction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserActionUpdateArgs>(args: SelectSubset<T, UserActionUpdateArgs<ExtArgs>>): Prisma__UserActionClient<$Result.GetResult<Prisma.$UserActionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserActions.
     * @param {UserActionDeleteManyArgs} args - Arguments to filter UserActions to delete.
     * @example
     * // Delete a few UserActions
     * const { count } = await prisma.userAction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserActionDeleteManyArgs>(args?: SelectSubset<T, UserActionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserActions
     * const userAction = await prisma.userAction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserActionUpdateManyArgs>(args: SelectSubset<T, UserActionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserAction.
     * @param {UserActionUpsertArgs} args - Arguments to update or create a UserAction.
     * @example
     * // Update or create a UserAction
     * const userAction = await prisma.userAction.upsert({
     *   create: {
     *     // ... data to create a UserAction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserAction we want to update
     *   }
     * })
     */
    upsert<T extends UserActionUpsertArgs>(args: SelectSubset<T, UserActionUpsertArgs<ExtArgs>>): Prisma__UserActionClient<$Result.GetResult<Prisma.$UserActionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActionCountArgs} args - Arguments to filter UserActions to count.
     * @example
     * // Count the number of UserActions
     * const count = await prisma.userAction.count({
     *   where: {
     *     // ... the filter for the UserActions we want to count
     *   }
     * })
    **/
    count<T extends UserActionCountArgs>(
      args?: Subset<T, UserActionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserActionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserActionAggregateArgs>(args: Subset<T, UserActionAggregateArgs>): Prisma.PrismaPromise<GetUserActionAggregateType<T>>

    /**
     * Group by UserAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserActionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserActionGroupByArgs['orderBy'] }
        : { orderBy?: UserActionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserActionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserActionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserAction model
   */
  readonly fields: UserActionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserAction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserActionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    topic<T extends UserAction$topicArgs<ExtArgs> = {}>(args?: Subset<T, UserAction$topicArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserAction model
   */ 
  interface UserActionFieldRefs {
    readonly id: FieldRef<"UserAction", 'String'>
    readonly actionType: FieldRef<"UserAction", 'String'>
    readonly targetType: FieldRef<"UserAction", 'String'>
    readonly targetId: FieldRef<"UserAction", 'String'>
    readonly metadata: FieldRef<"UserAction", 'String'>
    readonly createdAt: FieldRef<"UserAction", 'DateTime'>
    readonly userId: FieldRef<"UserAction", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserAction findUnique
   */
  export type UserActionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAction
     */
    select?: UserActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActionInclude<ExtArgs> | null
    /**
     * Filter, which UserAction to fetch.
     */
    where: UserActionWhereUniqueInput
  }

  /**
   * UserAction findUniqueOrThrow
   */
  export type UserActionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAction
     */
    select?: UserActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActionInclude<ExtArgs> | null
    /**
     * Filter, which UserAction to fetch.
     */
    where: UserActionWhereUniqueInput
  }

  /**
   * UserAction findFirst
   */
  export type UserActionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAction
     */
    select?: UserActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActionInclude<ExtArgs> | null
    /**
     * Filter, which UserAction to fetch.
     */
    where?: UserActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserActions to fetch.
     */
    orderBy?: UserActionOrderByWithRelationInput | UserActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserActions.
     */
    cursor?: UserActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserActions.
     */
    distinct?: UserActionScalarFieldEnum | UserActionScalarFieldEnum[]
  }

  /**
   * UserAction findFirstOrThrow
   */
  export type UserActionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAction
     */
    select?: UserActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActionInclude<ExtArgs> | null
    /**
     * Filter, which UserAction to fetch.
     */
    where?: UserActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserActions to fetch.
     */
    orderBy?: UserActionOrderByWithRelationInput | UserActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserActions.
     */
    cursor?: UserActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserActions.
     */
    distinct?: UserActionScalarFieldEnum | UserActionScalarFieldEnum[]
  }

  /**
   * UserAction findMany
   */
  export type UserActionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAction
     */
    select?: UserActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActionInclude<ExtArgs> | null
    /**
     * Filter, which UserActions to fetch.
     */
    where?: UserActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserActions to fetch.
     */
    orderBy?: UserActionOrderByWithRelationInput | UserActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserActions.
     */
    cursor?: UserActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserActions.
     */
    skip?: number
    distinct?: UserActionScalarFieldEnum | UserActionScalarFieldEnum[]
  }

  /**
   * UserAction create
   */
  export type UserActionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAction
     */
    select?: UserActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActionInclude<ExtArgs> | null
    /**
     * The data needed to create a UserAction.
     */
    data: XOR<UserActionCreateInput, UserActionUncheckedCreateInput>
  }

  /**
   * UserAction createMany
   */
  export type UserActionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserActions.
     */
    data: UserActionCreateManyInput | UserActionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserAction update
   */
  export type UserActionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAction
     */
    select?: UserActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActionInclude<ExtArgs> | null
    /**
     * The data needed to update a UserAction.
     */
    data: XOR<UserActionUpdateInput, UserActionUncheckedUpdateInput>
    /**
     * Choose, which UserAction to update.
     */
    where: UserActionWhereUniqueInput
  }

  /**
   * UserAction updateMany
   */
  export type UserActionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserActions.
     */
    data: XOR<UserActionUpdateManyMutationInput, UserActionUncheckedUpdateManyInput>
    /**
     * Filter which UserActions to update
     */
    where?: UserActionWhereInput
  }

  /**
   * UserAction upsert
   */
  export type UserActionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAction
     */
    select?: UserActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActionInclude<ExtArgs> | null
    /**
     * The filter to search for the UserAction to update in case it exists.
     */
    where: UserActionWhereUniqueInput
    /**
     * In case the UserAction found by the `where` argument doesn't exist, create a new UserAction with this data.
     */
    create: XOR<UserActionCreateInput, UserActionUncheckedCreateInput>
    /**
     * In case the UserAction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserActionUpdateInput, UserActionUncheckedUpdateInput>
  }

  /**
   * UserAction delete
   */
  export type UserActionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAction
     */
    select?: UserActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActionInclude<ExtArgs> | null
    /**
     * Filter which UserAction to delete.
     */
    where: UserActionWhereUniqueInput
  }

  /**
   * UserAction deleteMany
   */
  export type UserActionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserActions to delete
     */
    where?: UserActionWhereInput
  }

  /**
   * UserAction.topic
   */
  export type UserAction$topicArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicInclude<ExtArgs> | null
    where?: TopicWhereInput
  }

  /**
   * UserAction without action
   */
  export type UserActionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAction
     */
    select?: UserActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActionInclude<ExtArgs> | null
  }


  /**
   * Model TopicQuickAction
   */

  export type AggregateTopicQuickAction = {
    _count: TopicQuickActionCountAggregateOutputType | null
    _min: TopicQuickActionMinAggregateOutputType | null
    _max: TopicQuickActionMaxAggregateOutputType | null
  }

  export type TopicQuickActionMinAggregateOutputType = {
    id: string | null
    actionType: string | null
    createdAt: Date | null
    topicId: string | null
    userId: string | null
  }

  export type TopicQuickActionMaxAggregateOutputType = {
    id: string | null
    actionType: string | null
    createdAt: Date | null
    topicId: string | null
    userId: string | null
  }

  export type TopicQuickActionCountAggregateOutputType = {
    id: number
    actionType: number
    createdAt: number
    topicId: number
    userId: number
    _all: number
  }


  export type TopicQuickActionMinAggregateInputType = {
    id?: true
    actionType?: true
    createdAt?: true
    topicId?: true
    userId?: true
  }

  export type TopicQuickActionMaxAggregateInputType = {
    id?: true
    actionType?: true
    createdAt?: true
    topicId?: true
    userId?: true
  }

  export type TopicQuickActionCountAggregateInputType = {
    id?: true
    actionType?: true
    createdAt?: true
    topicId?: true
    userId?: true
    _all?: true
  }

  export type TopicQuickActionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TopicQuickAction to aggregate.
     */
    where?: TopicQuickActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TopicQuickActions to fetch.
     */
    orderBy?: TopicQuickActionOrderByWithRelationInput | TopicQuickActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TopicQuickActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TopicQuickActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TopicQuickActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TopicQuickActions
    **/
    _count?: true | TopicQuickActionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TopicQuickActionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TopicQuickActionMaxAggregateInputType
  }

  export type GetTopicQuickActionAggregateType<T extends TopicQuickActionAggregateArgs> = {
        [P in keyof T & keyof AggregateTopicQuickAction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTopicQuickAction[P]>
      : GetScalarType<T[P], AggregateTopicQuickAction[P]>
  }




  export type TopicQuickActionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TopicQuickActionWhereInput
    orderBy?: TopicQuickActionOrderByWithAggregationInput | TopicQuickActionOrderByWithAggregationInput[]
    by: TopicQuickActionScalarFieldEnum[] | TopicQuickActionScalarFieldEnum
    having?: TopicQuickActionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TopicQuickActionCountAggregateInputType | true
    _min?: TopicQuickActionMinAggregateInputType
    _max?: TopicQuickActionMaxAggregateInputType
  }

  export type TopicQuickActionGroupByOutputType = {
    id: string
    actionType: string
    createdAt: Date
    topicId: string
    userId: string
    _count: TopicQuickActionCountAggregateOutputType | null
    _min: TopicQuickActionMinAggregateOutputType | null
    _max: TopicQuickActionMaxAggregateOutputType | null
  }

  type GetTopicQuickActionGroupByPayload<T extends TopicQuickActionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TopicQuickActionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TopicQuickActionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TopicQuickActionGroupByOutputType[P]>
            : GetScalarType<T[P], TopicQuickActionGroupByOutputType[P]>
        }
      >
    >


  export type TopicQuickActionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    actionType?: boolean
    createdAt?: boolean
    topicId?: boolean
    userId?: boolean
    topic?: boolean | TopicDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["topicQuickAction"]>


  export type TopicQuickActionSelectScalar = {
    id?: boolean
    actionType?: boolean
    createdAt?: boolean
    topicId?: boolean
    userId?: boolean
  }

  export type TopicQuickActionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    topic?: boolean | TopicDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TopicQuickActionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TopicQuickAction"
    objects: {
      topic: Prisma.$TopicPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      actionType: string
      createdAt: Date
      topicId: string
      userId: string
    }, ExtArgs["result"]["topicQuickAction"]>
    composites: {}
  }

  type TopicQuickActionGetPayload<S extends boolean | null | undefined | TopicQuickActionDefaultArgs> = $Result.GetResult<Prisma.$TopicQuickActionPayload, S>

  type TopicQuickActionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TopicQuickActionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TopicQuickActionCountAggregateInputType | true
    }

  export interface TopicQuickActionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TopicQuickAction'], meta: { name: 'TopicQuickAction' } }
    /**
     * Find zero or one TopicQuickAction that matches the filter.
     * @param {TopicQuickActionFindUniqueArgs} args - Arguments to find a TopicQuickAction
     * @example
     * // Get one TopicQuickAction
     * const topicQuickAction = await prisma.topicQuickAction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TopicQuickActionFindUniqueArgs>(args: SelectSubset<T, TopicQuickActionFindUniqueArgs<ExtArgs>>): Prisma__TopicQuickActionClient<$Result.GetResult<Prisma.$TopicQuickActionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TopicQuickAction that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TopicQuickActionFindUniqueOrThrowArgs} args - Arguments to find a TopicQuickAction
     * @example
     * // Get one TopicQuickAction
     * const topicQuickAction = await prisma.topicQuickAction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TopicQuickActionFindUniqueOrThrowArgs>(args: SelectSubset<T, TopicQuickActionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TopicQuickActionClient<$Result.GetResult<Prisma.$TopicQuickActionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TopicQuickAction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicQuickActionFindFirstArgs} args - Arguments to find a TopicQuickAction
     * @example
     * // Get one TopicQuickAction
     * const topicQuickAction = await prisma.topicQuickAction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TopicQuickActionFindFirstArgs>(args?: SelectSubset<T, TopicQuickActionFindFirstArgs<ExtArgs>>): Prisma__TopicQuickActionClient<$Result.GetResult<Prisma.$TopicQuickActionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TopicQuickAction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicQuickActionFindFirstOrThrowArgs} args - Arguments to find a TopicQuickAction
     * @example
     * // Get one TopicQuickAction
     * const topicQuickAction = await prisma.topicQuickAction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TopicQuickActionFindFirstOrThrowArgs>(args?: SelectSubset<T, TopicQuickActionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TopicQuickActionClient<$Result.GetResult<Prisma.$TopicQuickActionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TopicQuickActions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicQuickActionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TopicQuickActions
     * const topicQuickActions = await prisma.topicQuickAction.findMany()
     * 
     * // Get first 10 TopicQuickActions
     * const topicQuickActions = await prisma.topicQuickAction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const topicQuickActionWithIdOnly = await prisma.topicQuickAction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TopicQuickActionFindManyArgs>(args?: SelectSubset<T, TopicQuickActionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TopicQuickActionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TopicQuickAction.
     * @param {TopicQuickActionCreateArgs} args - Arguments to create a TopicQuickAction.
     * @example
     * // Create one TopicQuickAction
     * const TopicQuickAction = await prisma.topicQuickAction.create({
     *   data: {
     *     // ... data to create a TopicQuickAction
     *   }
     * })
     * 
     */
    create<T extends TopicQuickActionCreateArgs>(args: SelectSubset<T, TopicQuickActionCreateArgs<ExtArgs>>): Prisma__TopicQuickActionClient<$Result.GetResult<Prisma.$TopicQuickActionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TopicQuickActions.
     * @param {TopicQuickActionCreateManyArgs} args - Arguments to create many TopicQuickActions.
     * @example
     * // Create many TopicQuickActions
     * const topicQuickAction = await prisma.topicQuickAction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TopicQuickActionCreateManyArgs>(args?: SelectSubset<T, TopicQuickActionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TopicQuickAction.
     * @param {TopicQuickActionDeleteArgs} args - Arguments to delete one TopicQuickAction.
     * @example
     * // Delete one TopicQuickAction
     * const TopicQuickAction = await prisma.topicQuickAction.delete({
     *   where: {
     *     // ... filter to delete one TopicQuickAction
     *   }
     * })
     * 
     */
    delete<T extends TopicQuickActionDeleteArgs>(args: SelectSubset<T, TopicQuickActionDeleteArgs<ExtArgs>>): Prisma__TopicQuickActionClient<$Result.GetResult<Prisma.$TopicQuickActionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TopicQuickAction.
     * @param {TopicQuickActionUpdateArgs} args - Arguments to update one TopicQuickAction.
     * @example
     * // Update one TopicQuickAction
     * const topicQuickAction = await prisma.topicQuickAction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TopicQuickActionUpdateArgs>(args: SelectSubset<T, TopicQuickActionUpdateArgs<ExtArgs>>): Prisma__TopicQuickActionClient<$Result.GetResult<Prisma.$TopicQuickActionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TopicQuickActions.
     * @param {TopicQuickActionDeleteManyArgs} args - Arguments to filter TopicQuickActions to delete.
     * @example
     * // Delete a few TopicQuickActions
     * const { count } = await prisma.topicQuickAction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TopicQuickActionDeleteManyArgs>(args?: SelectSubset<T, TopicQuickActionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TopicQuickActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicQuickActionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TopicQuickActions
     * const topicQuickAction = await prisma.topicQuickAction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TopicQuickActionUpdateManyArgs>(args: SelectSubset<T, TopicQuickActionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TopicQuickAction.
     * @param {TopicQuickActionUpsertArgs} args - Arguments to update or create a TopicQuickAction.
     * @example
     * // Update or create a TopicQuickAction
     * const topicQuickAction = await prisma.topicQuickAction.upsert({
     *   create: {
     *     // ... data to create a TopicQuickAction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TopicQuickAction we want to update
     *   }
     * })
     */
    upsert<T extends TopicQuickActionUpsertArgs>(args: SelectSubset<T, TopicQuickActionUpsertArgs<ExtArgs>>): Prisma__TopicQuickActionClient<$Result.GetResult<Prisma.$TopicQuickActionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TopicQuickActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicQuickActionCountArgs} args - Arguments to filter TopicQuickActions to count.
     * @example
     * // Count the number of TopicQuickActions
     * const count = await prisma.topicQuickAction.count({
     *   where: {
     *     // ... the filter for the TopicQuickActions we want to count
     *   }
     * })
    **/
    count<T extends TopicQuickActionCountArgs>(
      args?: Subset<T, TopicQuickActionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TopicQuickActionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TopicQuickAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicQuickActionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TopicQuickActionAggregateArgs>(args: Subset<T, TopicQuickActionAggregateArgs>): Prisma.PrismaPromise<GetTopicQuickActionAggregateType<T>>

    /**
     * Group by TopicQuickAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicQuickActionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TopicQuickActionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TopicQuickActionGroupByArgs['orderBy'] }
        : { orderBy?: TopicQuickActionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TopicQuickActionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTopicQuickActionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TopicQuickAction model
   */
  readonly fields: TopicQuickActionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TopicQuickAction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TopicQuickActionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    topic<T extends TopicDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TopicDefaultArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TopicQuickAction model
   */ 
  interface TopicQuickActionFieldRefs {
    readonly id: FieldRef<"TopicQuickAction", 'String'>
    readonly actionType: FieldRef<"TopicQuickAction", 'String'>
    readonly createdAt: FieldRef<"TopicQuickAction", 'DateTime'>
    readonly topicId: FieldRef<"TopicQuickAction", 'String'>
    readonly userId: FieldRef<"TopicQuickAction", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TopicQuickAction findUnique
   */
  export type TopicQuickActionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopicQuickAction
     */
    select?: TopicQuickActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicQuickActionInclude<ExtArgs> | null
    /**
     * Filter, which TopicQuickAction to fetch.
     */
    where: TopicQuickActionWhereUniqueInput
  }

  /**
   * TopicQuickAction findUniqueOrThrow
   */
  export type TopicQuickActionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopicQuickAction
     */
    select?: TopicQuickActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicQuickActionInclude<ExtArgs> | null
    /**
     * Filter, which TopicQuickAction to fetch.
     */
    where: TopicQuickActionWhereUniqueInput
  }

  /**
   * TopicQuickAction findFirst
   */
  export type TopicQuickActionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopicQuickAction
     */
    select?: TopicQuickActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicQuickActionInclude<ExtArgs> | null
    /**
     * Filter, which TopicQuickAction to fetch.
     */
    where?: TopicQuickActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TopicQuickActions to fetch.
     */
    orderBy?: TopicQuickActionOrderByWithRelationInput | TopicQuickActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TopicQuickActions.
     */
    cursor?: TopicQuickActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TopicQuickActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TopicQuickActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TopicQuickActions.
     */
    distinct?: TopicQuickActionScalarFieldEnum | TopicQuickActionScalarFieldEnum[]
  }

  /**
   * TopicQuickAction findFirstOrThrow
   */
  export type TopicQuickActionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopicQuickAction
     */
    select?: TopicQuickActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicQuickActionInclude<ExtArgs> | null
    /**
     * Filter, which TopicQuickAction to fetch.
     */
    where?: TopicQuickActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TopicQuickActions to fetch.
     */
    orderBy?: TopicQuickActionOrderByWithRelationInput | TopicQuickActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TopicQuickActions.
     */
    cursor?: TopicQuickActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TopicQuickActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TopicQuickActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TopicQuickActions.
     */
    distinct?: TopicQuickActionScalarFieldEnum | TopicQuickActionScalarFieldEnum[]
  }

  /**
   * TopicQuickAction findMany
   */
  export type TopicQuickActionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopicQuickAction
     */
    select?: TopicQuickActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicQuickActionInclude<ExtArgs> | null
    /**
     * Filter, which TopicQuickActions to fetch.
     */
    where?: TopicQuickActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TopicQuickActions to fetch.
     */
    orderBy?: TopicQuickActionOrderByWithRelationInput | TopicQuickActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TopicQuickActions.
     */
    cursor?: TopicQuickActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TopicQuickActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TopicQuickActions.
     */
    skip?: number
    distinct?: TopicQuickActionScalarFieldEnum | TopicQuickActionScalarFieldEnum[]
  }

  /**
   * TopicQuickAction create
   */
  export type TopicQuickActionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopicQuickAction
     */
    select?: TopicQuickActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicQuickActionInclude<ExtArgs> | null
    /**
     * The data needed to create a TopicQuickAction.
     */
    data: XOR<TopicQuickActionCreateInput, TopicQuickActionUncheckedCreateInput>
  }

  /**
   * TopicQuickAction createMany
   */
  export type TopicQuickActionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TopicQuickActions.
     */
    data: TopicQuickActionCreateManyInput | TopicQuickActionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TopicQuickAction update
   */
  export type TopicQuickActionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopicQuickAction
     */
    select?: TopicQuickActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicQuickActionInclude<ExtArgs> | null
    /**
     * The data needed to update a TopicQuickAction.
     */
    data: XOR<TopicQuickActionUpdateInput, TopicQuickActionUncheckedUpdateInput>
    /**
     * Choose, which TopicQuickAction to update.
     */
    where: TopicQuickActionWhereUniqueInput
  }

  /**
   * TopicQuickAction updateMany
   */
  export type TopicQuickActionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TopicQuickActions.
     */
    data: XOR<TopicQuickActionUpdateManyMutationInput, TopicQuickActionUncheckedUpdateManyInput>
    /**
     * Filter which TopicQuickActions to update
     */
    where?: TopicQuickActionWhereInput
  }

  /**
   * TopicQuickAction upsert
   */
  export type TopicQuickActionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopicQuickAction
     */
    select?: TopicQuickActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicQuickActionInclude<ExtArgs> | null
    /**
     * The filter to search for the TopicQuickAction to update in case it exists.
     */
    where: TopicQuickActionWhereUniqueInput
    /**
     * In case the TopicQuickAction found by the `where` argument doesn't exist, create a new TopicQuickAction with this data.
     */
    create: XOR<TopicQuickActionCreateInput, TopicQuickActionUncheckedCreateInput>
    /**
     * In case the TopicQuickAction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TopicQuickActionUpdateInput, TopicQuickActionUncheckedUpdateInput>
  }

  /**
   * TopicQuickAction delete
   */
  export type TopicQuickActionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopicQuickAction
     */
    select?: TopicQuickActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicQuickActionInclude<ExtArgs> | null
    /**
     * Filter which TopicQuickAction to delete.
     */
    where: TopicQuickActionWhereUniqueInput
  }

  /**
   * TopicQuickAction deleteMany
   */
  export type TopicQuickActionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TopicQuickActions to delete
     */
    where?: TopicQuickActionWhereInput
  }

  /**
   * TopicQuickAction without action
   */
  export type TopicQuickActionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopicQuickAction
     */
    select?: TopicQuickActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicQuickActionInclude<ExtArgs> | null
  }


  /**
   * Model TopicAction
   */

  export type AggregateTopicAction = {
    _count: TopicActionCountAggregateOutputType | null
    _min: TopicActionMinAggregateOutputType | null
    _max: TopicActionMaxAggregateOutputType | null
  }

  export type TopicActionMinAggregateOutputType = {
    id: string | null
    type: string | null
    userId: string | null
    topicId: string | null
    createdAt: Date | null
  }

  export type TopicActionMaxAggregateOutputType = {
    id: string | null
    type: string | null
    userId: string | null
    topicId: string | null
    createdAt: Date | null
  }

  export type TopicActionCountAggregateOutputType = {
    id: number
    type: number
    userId: number
    topicId: number
    createdAt: number
    _all: number
  }


  export type TopicActionMinAggregateInputType = {
    id?: true
    type?: true
    userId?: true
    topicId?: true
    createdAt?: true
  }

  export type TopicActionMaxAggregateInputType = {
    id?: true
    type?: true
    userId?: true
    topicId?: true
    createdAt?: true
  }

  export type TopicActionCountAggregateInputType = {
    id?: true
    type?: true
    userId?: true
    topicId?: true
    createdAt?: true
    _all?: true
  }

  export type TopicActionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TopicAction to aggregate.
     */
    where?: TopicActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TopicActions to fetch.
     */
    orderBy?: TopicActionOrderByWithRelationInput | TopicActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TopicActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TopicActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TopicActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TopicActions
    **/
    _count?: true | TopicActionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TopicActionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TopicActionMaxAggregateInputType
  }

  export type GetTopicActionAggregateType<T extends TopicActionAggregateArgs> = {
        [P in keyof T & keyof AggregateTopicAction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTopicAction[P]>
      : GetScalarType<T[P], AggregateTopicAction[P]>
  }




  export type TopicActionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TopicActionWhereInput
    orderBy?: TopicActionOrderByWithAggregationInput | TopicActionOrderByWithAggregationInput[]
    by: TopicActionScalarFieldEnum[] | TopicActionScalarFieldEnum
    having?: TopicActionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TopicActionCountAggregateInputType | true
    _min?: TopicActionMinAggregateInputType
    _max?: TopicActionMaxAggregateInputType
  }

  export type TopicActionGroupByOutputType = {
    id: string
    type: string
    userId: string
    topicId: string
    createdAt: Date
    _count: TopicActionCountAggregateOutputType | null
    _min: TopicActionMinAggregateOutputType | null
    _max: TopicActionMaxAggregateOutputType | null
  }

  type GetTopicActionGroupByPayload<T extends TopicActionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TopicActionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TopicActionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TopicActionGroupByOutputType[P]>
            : GetScalarType<T[P], TopicActionGroupByOutputType[P]>
        }
      >
    >


  export type TopicActionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    userId?: boolean
    topicId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    topic?: boolean | TopicDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["topicAction"]>


  export type TopicActionSelectScalar = {
    id?: boolean
    type?: boolean
    userId?: boolean
    topicId?: boolean
    createdAt?: boolean
  }

  export type TopicActionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    topic?: boolean | TopicDefaultArgs<ExtArgs>
  }

  export type $TopicActionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TopicAction"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      topic: Prisma.$TopicPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      userId: string
      topicId: string
      createdAt: Date
    }, ExtArgs["result"]["topicAction"]>
    composites: {}
  }

  type TopicActionGetPayload<S extends boolean | null | undefined | TopicActionDefaultArgs> = $Result.GetResult<Prisma.$TopicActionPayload, S>

  type TopicActionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TopicActionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TopicActionCountAggregateInputType | true
    }

  export interface TopicActionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TopicAction'], meta: { name: 'TopicAction' } }
    /**
     * Find zero or one TopicAction that matches the filter.
     * @param {TopicActionFindUniqueArgs} args - Arguments to find a TopicAction
     * @example
     * // Get one TopicAction
     * const topicAction = await prisma.topicAction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TopicActionFindUniqueArgs>(args: SelectSubset<T, TopicActionFindUniqueArgs<ExtArgs>>): Prisma__TopicActionClient<$Result.GetResult<Prisma.$TopicActionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TopicAction that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TopicActionFindUniqueOrThrowArgs} args - Arguments to find a TopicAction
     * @example
     * // Get one TopicAction
     * const topicAction = await prisma.topicAction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TopicActionFindUniqueOrThrowArgs>(args: SelectSubset<T, TopicActionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TopicActionClient<$Result.GetResult<Prisma.$TopicActionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TopicAction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicActionFindFirstArgs} args - Arguments to find a TopicAction
     * @example
     * // Get one TopicAction
     * const topicAction = await prisma.topicAction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TopicActionFindFirstArgs>(args?: SelectSubset<T, TopicActionFindFirstArgs<ExtArgs>>): Prisma__TopicActionClient<$Result.GetResult<Prisma.$TopicActionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TopicAction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicActionFindFirstOrThrowArgs} args - Arguments to find a TopicAction
     * @example
     * // Get one TopicAction
     * const topicAction = await prisma.topicAction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TopicActionFindFirstOrThrowArgs>(args?: SelectSubset<T, TopicActionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TopicActionClient<$Result.GetResult<Prisma.$TopicActionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TopicActions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicActionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TopicActions
     * const topicActions = await prisma.topicAction.findMany()
     * 
     * // Get first 10 TopicActions
     * const topicActions = await prisma.topicAction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const topicActionWithIdOnly = await prisma.topicAction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TopicActionFindManyArgs>(args?: SelectSubset<T, TopicActionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TopicActionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TopicAction.
     * @param {TopicActionCreateArgs} args - Arguments to create a TopicAction.
     * @example
     * // Create one TopicAction
     * const TopicAction = await prisma.topicAction.create({
     *   data: {
     *     // ... data to create a TopicAction
     *   }
     * })
     * 
     */
    create<T extends TopicActionCreateArgs>(args: SelectSubset<T, TopicActionCreateArgs<ExtArgs>>): Prisma__TopicActionClient<$Result.GetResult<Prisma.$TopicActionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TopicActions.
     * @param {TopicActionCreateManyArgs} args - Arguments to create many TopicActions.
     * @example
     * // Create many TopicActions
     * const topicAction = await prisma.topicAction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TopicActionCreateManyArgs>(args?: SelectSubset<T, TopicActionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TopicAction.
     * @param {TopicActionDeleteArgs} args - Arguments to delete one TopicAction.
     * @example
     * // Delete one TopicAction
     * const TopicAction = await prisma.topicAction.delete({
     *   where: {
     *     // ... filter to delete one TopicAction
     *   }
     * })
     * 
     */
    delete<T extends TopicActionDeleteArgs>(args: SelectSubset<T, TopicActionDeleteArgs<ExtArgs>>): Prisma__TopicActionClient<$Result.GetResult<Prisma.$TopicActionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TopicAction.
     * @param {TopicActionUpdateArgs} args - Arguments to update one TopicAction.
     * @example
     * // Update one TopicAction
     * const topicAction = await prisma.topicAction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TopicActionUpdateArgs>(args: SelectSubset<T, TopicActionUpdateArgs<ExtArgs>>): Prisma__TopicActionClient<$Result.GetResult<Prisma.$TopicActionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TopicActions.
     * @param {TopicActionDeleteManyArgs} args - Arguments to filter TopicActions to delete.
     * @example
     * // Delete a few TopicActions
     * const { count } = await prisma.topicAction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TopicActionDeleteManyArgs>(args?: SelectSubset<T, TopicActionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TopicActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicActionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TopicActions
     * const topicAction = await prisma.topicAction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TopicActionUpdateManyArgs>(args: SelectSubset<T, TopicActionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TopicAction.
     * @param {TopicActionUpsertArgs} args - Arguments to update or create a TopicAction.
     * @example
     * // Update or create a TopicAction
     * const topicAction = await prisma.topicAction.upsert({
     *   create: {
     *     // ... data to create a TopicAction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TopicAction we want to update
     *   }
     * })
     */
    upsert<T extends TopicActionUpsertArgs>(args: SelectSubset<T, TopicActionUpsertArgs<ExtArgs>>): Prisma__TopicActionClient<$Result.GetResult<Prisma.$TopicActionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TopicActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicActionCountArgs} args - Arguments to filter TopicActions to count.
     * @example
     * // Count the number of TopicActions
     * const count = await prisma.topicAction.count({
     *   where: {
     *     // ... the filter for the TopicActions we want to count
     *   }
     * })
    **/
    count<T extends TopicActionCountArgs>(
      args?: Subset<T, TopicActionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TopicActionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TopicAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicActionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TopicActionAggregateArgs>(args: Subset<T, TopicActionAggregateArgs>): Prisma.PrismaPromise<GetTopicActionAggregateType<T>>

    /**
     * Group by TopicAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicActionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TopicActionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TopicActionGroupByArgs['orderBy'] }
        : { orderBy?: TopicActionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TopicActionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTopicActionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TopicAction model
   */
  readonly fields: TopicActionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TopicAction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TopicActionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    topic<T extends TopicDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TopicDefaultArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TopicAction model
   */ 
  interface TopicActionFieldRefs {
    readonly id: FieldRef<"TopicAction", 'String'>
    readonly type: FieldRef<"TopicAction", 'String'>
    readonly userId: FieldRef<"TopicAction", 'String'>
    readonly topicId: FieldRef<"TopicAction", 'String'>
    readonly createdAt: FieldRef<"TopicAction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TopicAction findUnique
   */
  export type TopicActionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopicAction
     */
    select?: TopicActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicActionInclude<ExtArgs> | null
    /**
     * Filter, which TopicAction to fetch.
     */
    where: TopicActionWhereUniqueInput
  }

  /**
   * TopicAction findUniqueOrThrow
   */
  export type TopicActionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopicAction
     */
    select?: TopicActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicActionInclude<ExtArgs> | null
    /**
     * Filter, which TopicAction to fetch.
     */
    where: TopicActionWhereUniqueInput
  }

  /**
   * TopicAction findFirst
   */
  export type TopicActionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopicAction
     */
    select?: TopicActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicActionInclude<ExtArgs> | null
    /**
     * Filter, which TopicAction to fetch.
     */
    where?: TopicActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TopicActions to fetch.
     */
    orderBy?: TopicActionOrderByWithRelationInput | TopicActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TopicActions.
     */
    cursor?: TopicActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TopicActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TopicActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TopicActions.
     */
    distinct?: TopicActionScalarFieldEnum | TopicActionScalarFieldEnum[]
  }

  /**
   * TopicAction findFirstOrThrow
   */
  export type TopicActionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopicAction
     */
    select?: TopicActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicActionInclude<ExtArgs> | null
    /**
     * Filter, which TopicAction to fetch.
     */
    where?: TopicActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TopicActions to fetch.
     */
    orderBy?: TopicActionOrderByWithRelationInput | TopicActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TopicActions.
     */
    cursor?: TopicActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TopicActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TopicActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TopicActions.
     */
    distinct?: TopicActionScalarFieldEnum | TopicActionScalarFieldEnum[]
  }

  /**
   * TopicAction findMany
   */
  export type TopicActionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopicAction
     */
    select?: TopicActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicActionInclude<ExtArgs> | null
    /**
     * Filter, which TopicActions to fetch.
     */
    where?: TopicActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TopicActions to fetch.
     */
    orderBy?: TopicActionOrderByWithRelationInput | TopicActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TopicActions.
     */
    cursor?: TopicActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TopicActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TopicActions.
     */
    skip?: number
    distinct?: TopicActionScalarFieldEnum | TopicActionScalarFieldEnum[]
  }

  /**
   * TopicAction create
   */
  export type TopicActionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopicAction
     */
    select?: TopicActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicActionInclude<ExtArgs> | null
    /**
     * The data needed to create a TopicAction.
     */
    data: XOR<TopicActionCreateInput, TopicActionUncheckedCreateInput>
  }

  /**
   * TopicAction createMany
   */
  export type TopicActionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TopicActions.
     */
    data: TopicActionCreateManyInput | TopicActionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TopicAction update
   */
  export type TopicActionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopicAction
     */
    select?: TopicActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicActionInclude<ExtArgs> | null
    /**
     * The data needed to update a TopicAction.
     */
    data: XOR<TopicActionUpdateInput, TopicActionUncheckedUpdateInput>
    /**
     * Choose, which TopicAction to update.
     */
    where: TopicActionWhereUniqueInput
  }

  /**
   * TopicAction updateMany
   */
  export type TopicActionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TopicActions.
     */
    data: XOR<TopicActionUpdateManyMutationInput, TopicActionUncheckedUpdateManyInput>
    /**
     * Filter which TopicActions to update
     */
    where?: TopicActionWhereInput
  }

  /**
   * TopicAction upsert
   */
  export type TopicActionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopicAction
     */
    select?: TopicActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicActionInclude<ExtArgs> | null
    /**
     * The filter to search for the TopicAction to update in case it exists.
     */
    where: TopicActionWhereUniqueInput
    /**
     * In case the TopicAction found by the `where` argument doesn't exist, create a new TopicAction with this data.
     */
    create: XOR<TopicActionCreateInput, TopicActionUncheckedCreateInput>
    /**
     * In case the TopicAction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TopicActionUpdateInput, TopicActionUncheckedUpdateInput>
  }

  /**
   * TopicAction delete
   */
  export type TopicActionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopicAction
     */
    select?: TopicActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicActionInclude<ExtArgs> | null
    /**
     * Filter which TopicAction to delete.
     */
    where: TopicActionWhereUniqueInput
  }

  /**
   * TopicAction deleteMany
   */
  export type TopicActionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TopicActions to delete
     */
    where?: TopicActionWhereInput
  }

  /**
   * TopicAction without action
   */
  export type TopicActionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopicAction
     */
    select?: TopicActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicActionInclude<ExtArgs> | null
  }


  /**
   * Model ProjectAction
   */

  export type AggregateProjectAction = {
    _count: ProjectActionCountAggregateOutputType | null
    _min: ProjectActionMinAggregateOutputType | null
    _max: ProjectActionMaxAggregateOutputType | null
  }

  export type ProjectActionMinAggregateOutputType = {
    id: string | null
    type: string | null
    userId: string | null
    projectId: string | null
    createdAt: Date | null
  }

  export type ProjectActionMaxAggregateOutputType = {
    id: string | null
    type: string | null
    userId: string | null
    projectId: string | null
    createdAt: Date | null
  }

  export type ProjectActionCountAggregateOutputType = {
    id: number
    type: number
    userId: number
    projectId: number
    createdAt: number
    _all: number
  }


  export type ProjectActionMinAggregateInputType = {
    id?: true
    type?: true
    userId?: true
    projectId?: true
    createdAt?: true
  }

  export type ProjectActionMaxAggregateInputType = {
    id?: true
    type?: true
    userId?: true
    projectId?: true
    createdAt?: true
  }

  export type ProjectActionCountAggregateInputType = {
    id?: true
    type?: true
    userId?: true
    projectId?: true
    createdAt?: true
    _all?: true
  }

  export type ProjectActionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectAction to aggregate.
     */
    where?: ProjectActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectActions to fetch.
     */
    orderBy?: ProjectActionOrderByWithRelationInput | ProjectActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProjectActions
    **/
    _count?: true | ProjectActionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectActionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectActionMaxAggregateInputType
  }

  export type GetProjectActionAggregateType<T extends ProjectActionAggregateArgs> = {
        [P in keyof T & keyof AggregateProjectAction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProjectAction[P]>
      : GetScalarType<T[P], AggregateProjectAction[P]>
  }




  export type ProjectActionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectActionWhereInput
    orderBy?: ProjectActionOrderByWithAggregationInput | ProjectActionOrderByWithAggregationInput[]
    by: ProjectActionScalarFieldEnum[] | ProjectActionScalarFieldEnum
    having?: ProjectActionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectActionCountAggregateInputType | true
    _min?: ProjectActionMinAggregateInputType
    _max?: ProjectActionMaxAggregateInputType
  }

  export type ProjectActionGroupByOutputType = {
    id: string
    type: string
    userId: string
    projectId: string
    createdAt: Date
    _count: ProjectActionCountAggregateOutputType | null
    _min: ProjectActionMinAggregateOutputType | null
    _max: ProjectActionMaxAggregateOutputType | null
  }

  type GetProjectActionGroupByPayload<T extends ProjectActionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectActionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectActionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectActionGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectActionGroupByOutputType[P]>
        }
      >
    >


  export type ProjectActionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    userId?: boolean
    projectId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectAction"]>


  export type ProjectActionSelectScalar = {
    id?: boolean
    type?: boolean
    userId?: boolean
    projectId?: boolean
    createdAt?: boolean
  }

  export type ProjectActionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $ProjectActionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProjectAction"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      project: Prisma.$ProjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      userId: string
      projectId: string
      createdAt: Date
    }, ExtArgs["result"]["projectAction"]>
    composites: {}
  }

  type ProjectActionGetPayload<S extends boolean | null | undefined | ProjectActionDefaultArgs> = $Result.GetResult<Prisma.$ProjectActionPayload, S>

  type ProjectActionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProjectActionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProjectActionCountAggregateInputType | true
    }

  export interface ProjectActionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProjectAction'], meta: { name: 'ProjectAction' } }
    /**
     * Find zero or one ProjectAction that matches the filter.
     * @param {ProjectActionFindUniqueArgs} args - Arguments to find a ProjectAction
     * @example
     * // Get one ProjectAction
     * const projectAction = await prisma.projectAction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectActionFindUniqueArgs>(args: SelectSubset<T, ProjectActionFindUniqueArgs<ExtArgs>>): Prisma__ProjectActionClient<$Result.GetResult<Prisma.$ProjectActionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ProjectAction that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProjectActionFindUniqueOrThrowArgs} args - Arguments to find a ProjectAction
     * @example
     * // Get one ProjectAction
     * const projectAction = await prisma.projectAction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectActionFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectActionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectActionClient<$Result.GetResult<Prisma.$ProjectActionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ProjectAction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectActionFindFirstArgs} args - Arguments to find a ProjectAction
     * @example
     * // Get one ProjectAction
     * const projectAction = await prisma.projectAction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectActionFindFirstArgs>(args?: SelectSubset<T, ProjectActionFindFirstArgs<ExtArgs>>): Prisma__ProjectActionClient<$Result.GetResult<Prisma.$ProjectActionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ProjectAction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectActionFindFirstOrThrowArgs} args - Arguments to find a ProjectAction
     * @example
     * // Get one ProjectAction
     * const projectAction = await prisma.projectAction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectActionFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectActionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectActionClient<$Result.GetResult<Prisma.$ProjectActionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ProjectActions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectActionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProjectActions
     * const projectActions = await prisma.projectAction.findMany()
     * 
     * // Get first 10 ProjectActions
     * const projectActions = await prisma.projectAction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectActionWithIdOnly = await prisma.projectAction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectActionFindManyArgs>(args?: SelectSubset<T, ProjectActionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectActionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ProjectAction.
     * @param {ProjectActionCreateArgs} args - Arguments to create a ProjectAction.
     * @example
     * // Create one ProjectAction
     * const ProjectAction = await prisma.projectAction.create({
     *   data: {
     *     // ... data to create a ProjectAction
     *   }
     * })
     * 
     */
    create<T extends ProjectActionCreateArgs>(args: SelectSubset<T, ProjectActionCreateArgs<ExtArgs>>): Prisma__ProjectActionClient<$Result.GetResult<Prisma.$ProjectActionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ProjectActions.
     * @param {ProjectActionCreateManyArgs} args - Arguments to create many ProjectActions.
     * @example
     * // Create many ProjectActions
     * const projectAction = await prisma.projectAction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectActionCreateManyArgs>(args?: SelectSubset<T, ProjectActionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProjectAction.
     * @param {ProjectActionDeleteArgs} args - Arguments to delete one ProjectAction.
     * @example
     * // Delete one ProjectAction
     * const ProjectAction = await prisma.projectAction.delete({
     *   where: {
     *     // ... filter to delete one ProjectAction
     *   }
     * })
     * 
     */
    delete<T extends ProjectActionDeleteArgs>(args: SelectSubset<T, ProjectActionDeleteArgs<ExtArgs>>): Prisma__ProjectActionClient<$Result.GetResult<Prisma.$ProjectActionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ProjectAction.
     * @param {ProjectActionUpdateArgs} args - Arguments to update one ProjectAction.
     * @example
     * // Update one ProjectAction
     * const projectAction = await prisma.projectAction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectActionUpdateArgs>(args: SelectSubset<T, ProjectActionUpdateArgs<ExtArgs>>): Prisma__ProjectActionClient<$Result.GetResult<Prisma.$ProjectActionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ProjectActions.
     * @param {ProjectActionDeleteManyArgs} args - Arguments to filter ProjectActions to delete.
     * @example
     * // Delete a few ProjectActions
     * const { count } = await prisma.projectAction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectActionDeleteManyArgs>(args?: SelectSubset<T, ProjectActionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProjectActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectActionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProjectActions
     * const projectAction = await prisma.projectAction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectActionUpdateManyArgs>(args: SelectSubset<T, ProjectActionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProjectAction.
     * @param {ProjectActionUpsertArgs} args - Arguments to update or create a ProjectAction.
     * @example
     * // Update or create a ProjectAction
     * const projectAction = await prisma.projectAction.upsert({
     *   create: {
     *     // ... data to create a ProjectAction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProjectAction we want to update
     *   }
     * })
     */
    upsert<T extends ProjectActionUpsertArgs>(args: SelectSubset<T, ProjectActionUpsertArgs<ExtArgs>>): Prisma__ProjectActionClient<$Result.GetResult<Prisma.$ProjectActionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ProjectActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectActionCountArgs} args - Arguments to filter ProjectActions to count.
     * @example
     * // Count the number of ProjectActions
     * const count = await prisma.projectAction.count({
     *   where: {
     *     // ... the filter for the ProjectActions we want to count
     *   }
     * })
    **/
    count<T extends ProjectActionCountArgs>(
      args?: Subset<T, ProjectActionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectActionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProjectAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectActionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectActionAggregateArgs>(args: Subset<T, ProjectActionAggregateArgs>): Prisma.PrismaPromise<GetProjectActionAggregateType<T>>

    /**
     * Group by ProjectAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectActionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectActionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectActionGroupByArgs['orderBy'] }
        : { orderBy?: ProjectActionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectActionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectActionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProjectAction model
   */
  readonly fields: ProjectActionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProjectAction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectActionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProjectAction model
   */ 
  interface ProjectActionFieldRefs {
    readonly id: FieldRef<"ProjectAction", 'String'>
    readonly type: FieldRef<"ProjectAction", 'String'>
    readonly userId: FieldRef<"ProjectAction", 'String'>
    readonly projectId: FieldRef<"ProjectAction", 'String'>
    readonly createdAt: FieldRef<"ProjectAction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProjectAction findUnique
   */
  export type ProjectActionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectAction
     */
    select?: ProjectActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectActionInclude<ExtArgs> | null
    /**
     * Filter, which ProjectAction to fetch.
     */
    where: ProjectActionWhereUniqueInput
  }

  /**
   * ProjectAction findUniqueOrThrow
   */
  export type ProjectActionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectAction
     */
    select?: ProjectActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectActionInclude<ExtArgs> | null
    /**
     * Filter, which ProjectAction to fetch.
     */
    where: ProjectActionWhereUniqueInput
  }

  /**
   * ProjectAction findFirst
   */
  export type ProjectActionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectAction
     */
    select?: ProjectActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectActionInclude<ExtArgs> | null
    /**
     * Filter, which ProjectAction to fetch.
     */
    where?: ProjectActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectActions to fetch.
     */
    orderBy?: ProjectActionOrderByWithRelationInput | ProjectActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectActions.
     */
    cursor?: ProjectActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectActions.
     */
    distinct?: ProjectActionScalarFieldEnum | ProjectActionScalarFieldEnum[]
  }

  /**
   * ProjectAction findFirstOrThrow
   */
  export type ProjectActionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectAction
     */
    select?: ProjectActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectActionInclude<ExtArgs> | null
    /**
     * Filter, which ProjectAction to fetch.
     */
    where?: ProjectActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectActions to fetch.
     */
    orderBy?: ProjectActionOrderByWithRelationInput | ProjectActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectActions.
     */
    cursor?: ProjectActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectActions.
     */
    distinct?: ProjectActionScalarFieldEnum | ProjectActionScalarFieldEnum[]
  }

  /**
   * ProjectAction findMany
   */
  export type ProjectActionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectAction
     */
    select?: ProjectActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectActionInclude<ExtArgs> | null
    /**
     * Filter, which ProjectActions to fetch.
     */
    where?: ProjectActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectActions to fetch.
     */
    orderBy?: ProjectActionOrderByWithRelationInput | ProjectActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProjectActions.
     */
    cursor?: ProjectActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectActions.
     */
    skip?: number
    distinct?: ProjectActionScalarFieldEnum | ProjectActionScalarFieldEnum[]
  }

  /**
   * ProjectAction create
   */
  export type ProjectActionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectAction
     */
    select?: ProjectActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectActionInclude<ExtArgs> | null
    /**
     * The data needed to create a ProjectAction.
     */
    data: XOR<ProjectActionCreateInput, ProjectActionUncheckedCreateInput>
  }

  /**
   * ProjectAction createMany
   */
  export type ProjectActionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProjectActions.
     */
    data: ProjectActionCreateManyInput | ProjectActionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProjectAction update
   */
  export type ProjectActionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectAction
     */
    select?: ProjectActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectActionInclude<ExtArgs> | null
    /**
     * The data needed to update a ProjectAction.
     */
    data: XOR<ProjectActionUpdateInput, ProjectActionUncheckedUpdateInput>
    /**
     * Choose, which ProjectAction to update.
     */
    where: ProjectActionWhereUniqueInput
  }

  /**
   * ProjectAction updateMany
   */
  export type ProjectActionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProjectActions.
     */
    data: XOR<ProjectActionUpdateManyMutationInput, ProjectActionUncheckedUpdateManyInput>
    /**
     * Filter which ProjectActions to update
     */
    where?: ProjectActionWhereInput
  }

  /**
   * ProjectAction upsert
   */
  export type ProjectActionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectAction
     */
    select?: ProjectActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectActionInclude<ExtArgs> | null
    /**
     * The filter to search for the ProjectAction to update in case it exists.
     */
    where: ProjectActionWhereUniqueInput
    /**
     * In case the ProjectAction found by the `where` argument doesn't exist, create a new ProjectAction with this data.
     */
    create: XOR<ProjectActionCreateInput, ProjectActionUncheckedCreateInput>
    /**
     * In case the ProjectAction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectActionUpdateInput, ProjectActionUncheckedUpdateInput>
  }

  /**
   * ProjectAction delete
   */
  export type ProjectActionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectAction
     */
    select?: ProjectActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectActionInclude<ExtArgs> | null
    /**
     * Filter which ProjectAction to delete.
     */
    where: ProjectActionWhereUniqueInput
  }

  /**
   * ProjectAction deleteMany
   */
  export type ProjectActionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectActions to delete
     */
    where?: ProjectActionWhereInput
  }

  /**
   * ProjectAction without action
   */
  export type ProjectActionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectAction
     */
    select?: ProjectActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectActionInclude<ExtArgs> | null
  }


  /**
   * Model Project
   */

  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectAvgAggregateOutputType = {
    teamSize: number | null
    viewCount: number | null
    likeCount: number | null
    commentCount: number | null
    interestedCount: number | null
  }

  export type ProjectSumAggregateOutputType = {
    teamSize: number | null
    viewCount: number | null
    likeCount: number | null
    commentCount: number | null
    interestedCount: number | null
  }

  export type ProjectMinAggregateOutputType = {
    id: string | null
    category: string | null
    title: string | null
    description: string | null
    tags: string | null
    teamSize: number | null
    projectStage: string | null
    website: string | null
    github: string | null
    viewCount: number | null
    likeCount: number | null
    commentCount: number | null
    interestedCount: number | null
    images: string | null
    authorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectMaxAggregateOutputType = {
    id: string | null
    category: string | null
    title: string | null
    description: string | null
    tags: string | null
    teamSize: number | null
    projectStage: string | null
    website: string | null
    github: string | null
    viewCount: number | null
    likeCount: number | null
    commentCount: number | null
    interestedCount: number | null
    images: string | null
    authorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectCountAggregateOutputType = {
    id: number
    category: number
    title: number
    description: number
    tags: number
    teamSize: number
    lookingForRoles: number
    projectStage: number
    website: number
    github: number
    viewCount: number
    likeCount: number
    commentCount: number
    interestedCount: number
    images: number
    authorId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProjectAvgAggregateInputType = {
    teamSize?: true
    viewCount?: true
    likeCount?: true
    commentCount?: true
    interestedCount?: true
  }

  export type ProjectSumAggregateInputType = {
    teamSize?: true
    viewCount?: true
    likeCount?: true
    commentCount?: true
    interestedCount?: true
  }

  export type ProjectMinAggregateInputType = {
    id?: true
    category?: true
    title?: true
    description?: true
    tags?: true
    teamSize?: true
    projectStage?: true
    website?: true
    github?: true
    viewCount?: true
    likeCount?: true
    commentCount?: true
    interestedCount?: true
    images?: true
    authorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectMaxAggregateInputType = {
    id?: true
    category?: true
    title?: true
    description?: true
    tags?: true
    teamSize?: true
    projectStage?: true
    website?: true
    github?: true
    viewCount?: true
    likeCount?: true
    commentCount?: true
    interestedCount?: true
    images?: true
    authorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectCountAggregateInputType = {
    id?: true
    category?: true
    title?: true
    description?: true
    tags?: true
    teamSize?: true
    lookingForRoles?: true
    projectStage?: true
    website?: true
    github?: true
    viewCount?: true
    likeCount?: true
    commentCount?: true
    interestedCount?: true
    images?: true
    authorId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Project to aggregate.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithAggregationInput | ProjectOrderByWithAggregationInput[]
    by: ProjectScalarFieldEnum[] | ProjectScalarFieldEnum
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _avg?: ProjectAvgAggregateInputType
    _sum?: ProjectSumAggregateInputType
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }

  export type ProjectGroupByOutputType = {
    id: string
    category: string
    title: string
    description: string
    tags: string | null
    teamSize: number | null
    lookingForRoles: JsonValue | null
    projectStage: string | null
    website: string | null
    github: string | null
    viewCount: number
    likeCount: number
    commentCount: number
    interestedCount: number
    images: string | null
    authorId: string
    createdAt: Date
    updatedAt: Date
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    category?: boolean
    title?: boolean
    description?: boolean
    tags?: boolean
    teamSize?: boolean
    lookingForRoles?: boolean
    projectStage?: boolean
    website?: boolean
    github?: boolean
    viewCount?: boolean
    likeCount?: boolean
    commentCount?: boolean
    interestedCount?: boolean
    images?: boolean
    authorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    comments?: boolean | Project$commentsArgs<ExtArgs>
    actions?: boolean | Project$actionsArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>


  export type ProjectSelectScalar = {
    id?: boolean
    category?: boolean
    title?: boolean
    description?: boolean
    tags?: boolean
    teamSize?: boolean
    lookingForRoles?: boolean
    projectStage?: boolean
    website?: boolean
    github?: boolean
    viewCount?: boolean
    likeCount?: boolean
    commentCount?: boolean
    interestedCount?: boolean
    images?: boolean
    authorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    comments?: boolean | Project$commentsArgs<ExtArgs>
    actions?: boolean | Project$actionsArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ProjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Project"
    objects: {
      author: Prisma.$UserPayload<ExtArgs>
      comments: Prisma.$CommentPayload<ExtArgs>[]
      actions: Prisma.$ProjectActionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      category: string
      title: string
      description: string
      tags: string | null
      teamSize: number | null
      lookingForRoles: Prisma.JsonValue | null
      projectStage: string | null
      website: string | null
      github: string | null
      viewCount: number
      likeCount: number
      commentCount: number
      interestedCount: number
      images: string | null
      authorId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["project"]>
    composites: {}
  }

  type ProjectGetPayload<S extends boolean | null | undefined | ProjectDefaultArgs> = $Result.GetResult<Prisma.$ProjectPayload, S>

  type ProjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProjectFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProjectCountAggregateInputType | true
    }

  export interface ProjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Project'], meta: { name: 'Project' } }
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectFindUniqueArgs>(args: SelectSubset<T, ProjectFindUniqueArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Project that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectFindFirstArgs>(args?: SelectSubset<T, ProjectFindFirstArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Project that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectFindManyArgs>(args?: SelectSubset<T, ProjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
     */
    create<T extends ProjectCreateArgs>(args: SelectSubset<T, ProjectCreateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Projects.
     * @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectCreateManyArgs>(args?: SelectSubset<T, ProjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
     */
    delete<T extends ProjectDeleteArgs>(args: SelectSubset<T, ProjectDeleteArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectUpdateArgs>(args: SelectSubset<T, ProjectUpdateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectDeleteManyArgs>(args?: SelectSubset<T, ProjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectUpdateManyArgs>(args: SelectSubset<T, ProjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
     */
    upsert<T extends ProjectUpsertArgs>(args: SelectSubset<T, ProjectUpsertArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Project model
   */
  readonly fields: ProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    comments<T extends Project$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Project$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany"> | Null>
    actions<T extends Project$actionsArgs<ExtArgs> = {}>(args?: Subset<T, Project$actionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectActionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Project model
   */ 
  interface ProjectFieldRefs {
    readonly id: FieldRef<"Project", 'String'>
    readonly category: FieldRef<"Project", 'String'>
    readonly title: FieldRef<"Project", 'String'>
    readonly description: FieldRef<"Project", 'String'>
    readonly tags: FieldRef<"Project", 'String'>
    readonly teamSize: FieldRef<"Project", 'Int'>
    readonly lookingForRoles: FieldRef<"Project", 'Json'>
    readonly projectStage: FieldRef<"Project", 'String'>
    readonly website: FieldRef<"Project", 'String'>
    readonly github: FieldRef<"Project", 'String'>
    readonly viewCount: FieldRef<"Project", 'Int'>
    readonly likeCount: FieldRef<"Project", 'Int'>
    readonly commentCount: FieldRef<"Project", 'Int'>
    readonly interestedCount: FieldRef<"Project", 'Int'>
    readonly images: FieldRef<"Project", 'String'>
    readonly authorId: FieldRef<"Project", 'String'>
    readonly createdAt: FieldRef<"Project", 'DateTime'>
    readonly updatedAt: FieldRef<"Project", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Project findUnique
   */
  export type ProjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findFirst
   */
  export type ProjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findMany
   */
  export type ProjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project create
   */
  export type ProjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Project.
     */
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }

  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Project update
   */
  export type ProjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Project.
     */
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
  }

  /**
   * Project upsert
   */
  export type ProjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Project to update in case it exists.
     */
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     */
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }

  /**
   * Project delete
   */
  export type ProjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter which Project to delete.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectWhereInput
  }

  /**
   * Project.comments
   */
  export type Project$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Project.actions
   */
  export type Project$actionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectAction
     */
    select?: ProjectActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectActionInclude<ExtArgs> | null
    where?: ProjectActionWhereInput
    orderBy?: ProjectActionOrderByWithRelationInput | ProjectActionOrderByWithRelationInput[]
    cursor?: ProjectActionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectActionScalarFieldEnum | ProjectActionScalarFieldEnum[]
  }

  /**
   * Project without action
   */
  export type ProjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
  }


  /**
   * Model Activity
   */

  export type AggregateActivity = {
    _count: ActivityCountAggregateOutputType | null
    _avg: ActivityAvgAggregateOutputType | null
    _sum: ActivitySumAggregateOutputType | null
    _min: ActivityMinAggregateOutputType | null
    _max: ActivityMaxAggregateOutputType | null
  }

  export type ActivityAvgAggregateOutputType = {
    maxParticipants: number | null
    participantsCount: number | null
    likesCount: number | null
    commentsCount: number | null
  }

  export type ActivitySumAggregateOutputType = {
    maxParticipants: number | null
    participantsCount: number | null
    likesCount: number | null
    commentsCount: number | null
  }

  export type ActivityMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    location: string | null
    startTime: Date | null
    endTime: Date | null
    maxParticipants: number | null
    category: string | null
    tags: string | null
    cover: string | null
    images: string | null
    participantsCount: number | null
    likesCount: number | null
    commentsCount: number | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    authorId: string | null
  }

  export type ActivityMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    location: string | null
    startTime: Date | null
    endTime: Date | null
    maxParticipants: number | null
    category: string | null
    tags: string | null
    cover: string | null
    images: string | null
    participantsCount: number | null
    likesCount: number | null
    commentsCount: number | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    authorId: string | null
  }

  export type ActivityCountAggregateOutputType = {
    id: number
    title: number
    description: number
    location: number
    startTime: number
    endTime: number
    maxParticipants: number
    category: number
    tags: number
    cover: number
    images: number
    participantsCount: number
    likesCount: number
    commentsCount: number
    status: number
    createdAt: number
    updatedAt: number
    authorId: number
    _all: number
  }


  export type ActivityAvgAggregateInputType = {
    maxParticipants?: true
    participantsCount?: true
    likesCount?: true
    commentsCount?: true
  }

  export type ActivitySumAggregateInputType = {
    maxParticipants?: true
    participantsCount?: true
    likesCount?: true
    commentsCount?: true
  }

  export type ActivityMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    location?: true
    startTime?: true
    endTime?: true
    maxParticipants?: true
    category?: true
    tags?: true
    cover?: true
    images?: true
    participantsCount?: true
    likesCount?: true
    commentsCount?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    authorId?: true
  }

  export type ActivityMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    location?: true
    startTime?: true
    endTime?: true
    maxParticipants?: true
    category?: true
    tags?: true
    cover?: true
    images?: true
    participantsCount?: true
    likesCount?: true
    commentsCount?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    authorId?: true
  }

  export type ActivityCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    location?: true
    startTime?: true
    endTime?: true
    maxParticipants?: true
    category?: true
    tags?: true
    cover?: true
    images?: true
    participantsCount?: true
    likesCount?: true
    commentsCount?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    authorId?: true
    _all?: true
  }

  export type ActivityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Activity to aggregate.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Activities
    **/
    _count?: true | ActivityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ActivityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ActivitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivityMaxAggregateInputType
  }

  export type GetActivityAggregateType<T extends ActivityAggregateArgs> = {
        [P in keyof T & keyof AggregateActivity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivity[P]>
      : GetScalarType<T[P], AggregateActivity[P]>
  }




  export type ActivityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityWhereInput
    orderBy?: ActivityOrderByWithAggregationInput | ActivityOrderByWithAggregationInput[]
    by: ActivityScalarFieldEnum[] | ActivityScalarFieldEnum
    having?: ActivityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivityCountAggregateInputType | true
    _avg?: ActivityAvgAggregateInputType
    _sum?: ActivitySumAggregateInputType
    _min?: ActivityMinAggregateInputType
    _max?: ActivityMaxAggregateInputType
  }

  export type ActivityGroupByOutputType = {
    id: string
    title: string
    description: string
    location: string
    startTime: Date
    endTime: Date | null
    maxParticipants: number | null
    category: string
    tags: string | null
    cover: string | null
    images: string | null
    participantsCount: number
    likesCount: number
    commentsCount: number
    status: string
    createdAt: Date
    updatedAt: Date
    authorId: string
    _count: ActivityCountAggregateOutputType | null
    _avg: ActivityAvgAggregateOutputType | null
    _sum: ActivitySumAggregateOutputType | null
    _min: ActivityMinAggregateOutputType | null
    _max: ActivityMaxAggregateOutputType | null
  }

  type GetActivityGroupByPayload<T extends ActivityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivityGroupByOutputType[P]>
            : GetScalarType<T[P], ActivityGroupByOutputType[P]>
        }
      >
    >


  export type ActivitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    location?: boolean
    startTime?: boolean
    endTime?: boolean
    maxParticipants?: boolean
    category?: boolean
    tags?: boolean
    cover?: boolean
    images?: boolean
    participantsCount?: boolean
    likesCount?: boolean
    commentsCount?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authorId?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    participants?: boolean | Activity$participantsArgs<ExtArgs>
    likes?: boolean | Activity$likesArgs<ExtArgs>
    comments?: boolean | Activity$commentsArgs<ExtArgs>
    _count?: boolean | ActivityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activity"]>


  export type ActivitySelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    location?: boolean
    startTime?: boolean
    endTime?: boolean
    maxParticipants?: boolean
    category?: boolean
    tags?: boolean
    cover?: boolean
    images?: boolean
    participantsCount?: boolean
    likesCount?: boolean
    commentsCount?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authorId?: boolean
  }

  export type ActivityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    participants?: boolean | Activity$participantsArgs<ExtArgs>
    likes?: boolean | Activity$likesArgs<ExtArgs>
    comments?: boolean | Activity$commentsArgs<ExtArgs>
    _count?: boolean | ActivityCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ActivityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Activity"
    objects: {
      author: Prisma.$UserPayload<ExtArgs>
      participants: Prisma.$ActivityParticipantPayload<ExtArgs>[]
      likes: Prisma.$ActivityLikePayload<ExtArgs>[]
      comments: Prisma.$ActivityCommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      location: string
      startTime: Date
      endTime: Date | null
      maxParticipants: number | null
      category: string
      tags: string | null
      cover: string | null
      images: string | null
      participantsCount: number
      likesCount: number
      commentsCount: number
      status: string
      createdAt: Date
      updatedAt: Date
      authorId: string
    }, ExtArgs["result"]["activity"]>
    composites: {}
  }

  type ActivityGetPayload<S extends boolean | null | undefined | ActivityDefaultArgs> = $Result.GetResult<Prisma.$ActivityPayload, S>

  type ActivityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ActivityFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ActivityCountAggregateInputType | true
    }

  export interface ActivityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Activity'], meta: { name: 'Activity' } }
    /**
     * Find zero or one Activity that matches the filter.
     * @param {ActivityFindUniqueArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActivityFindUniqueArgs>(args: SelectSubset<T, ActivityFindUniqueArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Activity that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ActivityFindUniqueOrThrowArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActivityFindUniqueOrThrowArgs>(args: SelectSubset<T, ActivityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Activity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindFirstArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActivityFindFirstArgs>(args?: SelectSubset<T, ActivityFindFirstArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Activity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindFirstOrThrowArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActivityFindFirstOrThrowArgs>(args?: SelectSubset<T, ActivityFindFirstOrThrowArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Activities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Activities
     * const activities = await prisma.activity.findMany()
     * 
     * // Get first 10 Activities
     * const activities = await prisma.activity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const activityWithIdOnly = await prisma.activity.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ActivityFindManyArgs>(args?: SelectSubset<T, ActivityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Activity.
     * @param {ActivityCreateArgs} args - Arguments to create a Activity.
     * @example
     * // Create one Activity
     * const Activity = await prisma.activity.create({
     *   data: {
     *     // ... data to create a Activity
     *   }
     * })
     * 
     */
    create<T extends ActivityCreateArgs>(args: SelectSubset<T, ActivityCreateArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Activities.
     * @param {ActivityCreateManyArgs} args - Arguments to create many Activities.
     * @example
     * // Create many Activities
     * const activity = await prisma.activity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ActivityCreateManyArgs>(args?: SelectSubset<T, ActivityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Activity.
     * @param {ActivityDeleteArgs} args - Arguments to delete one Activity.
     * @example
     * // Delete one Activity
     * const Activity = await prisma.activity.delete({
     *   where: {
     *     // ... filter to delete one Activity
     *   }
     * })
     * 
     */
    delete<T extends ActivityDeleteArgs>(args: SelectSubset<T, ActivityDeleteArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Activity.
     * @param {ActivityUpdateArgs} args - Arguments to update one Activity.
     * @example
     * // Update one Activity
     * const activity = await prisma.activity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ActivityUpdateArgs>(args: SelectSubset<T, ActivityUpdateArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Activities.
     * @param {ActivityDeleteManyArgs} args - Arguments to filter Activities to delete.
     * @example
     * // Delete a few Activities
     * const { count } = await prisma.activity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ActivityDeleteManyArgs>(args?: SelectSubset<T, ActivityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Activities
     * const activity = await prisma.activity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ActivityUpdateManyArgs>(args: SelectSubset<T, ActivityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Activity.
     * @param {ActivityUpsertArgs} args - Arguments to update or create a Activity.
     * @example
     * // Update or create a Activity
     * const activity = await prisma.activity.upsert({
     *   create: {
     *     // ... data to create a Activity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Activity we want to update
     *   }
     * })
     */
    upsert<T extends ActivityUpsertArgs>(args: SelectSubset<T, ActivityUpsertArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityCountArgs} args - Arguments to filter Activities to count.
     * @example
     * // Count the number of Activities
     * const count = await prisma.activity.count({
     *   where: {
     *     // ... the filter for the Activities we want to count
     *   }
     * })
    **/
    count<T extends ActivityCountArgs>(
      args?: Subset<T, ActivityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Activity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivityAggregateArgs>(args: Subset<T, ActivityAggregateArgs>): Prisma.PrismaPromise<GetActivityAggregateType<T>>

    /**
     * Group by Activity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivityGroupByArgs['orderBy'] }
        : { orderBy?: ActivityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Activity model
   */
  readonly fields: ActivityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Activity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActivityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    participants<T extends Activity$participantsArgs<ExtArgs> = {}>(args?: Subset<T, Activity$participantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityParticipantPayload<ExtArgs>, T, "findMany"> | Null>
    likes<T extends Activity$likesArgs<ExtArgs> = {}>(args?: Subset<T, Activity$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityLikePayload<ExtArgs>, T, "findMany"> | Null>
    comments<T extends Activity$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Activity$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityCommentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Activity model
   */ 
  interface ActivityFieldRefs {
    readonly id: FieldRef<"Activity", 'String'>
    readonly title: FieldRef<"Activity", 'String'>
    readonly description: FieldRef<"Activity", 'String'>
    readonly location: FieldRef<"Activity", 'String'>
    readonly startTime: FieldRef<"Activity", 'DateTime'>
    readonly endTime: FieldRef<"Activity", 'DateTime'>
    readonly maxParticipants: FieldRef<"Activity", 'Int'>
    readonly category: FieldRef<"Activity", 'String'>
    readonly tags: FieldRef<"Activity", 'String'>
    readonly cover: FieldRef<"Activity", 'String'>
    readonly images: FieldRef<"Activity", 'String'>
    readonly participantsCount: FieldRef<"Activity", 'Int'>
    readonly likesCount: FieldRef<"Activity", 'Int'>
    readonly commentsCount: FieldRef<"Activity", 'Int'>
    readonly status: FieldRef<"Activity", 'String'>
    readonly createdAt: FieldRef<"Activity", 'DateTime'>
    readonly updatedAt: FieldRef<"Activity", 'DateTime'>
    readonly authorId: FieldRef<"Activity", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Activity findUnique
   */
  export type ActivityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where: ActivityWhereUniqueInput
  }

  /**
   * Activity findUniqueOrThrow
   */
  export type ActivityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where: ActivityWhereUniqueInput
  }

  /**
   * Activity findFirst
   */
  export type ActivityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Activities.
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Activities.
     */
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * Activity findFirstOrThrow
   */
  export type ActivityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Activities.
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Activities.
     */
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * Activity findMany
   */
  export type ActivityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activities to fetch.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Activities.
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * Activity create
   */
  export type ActivityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * The data needed to create a Activity.
     */
    data: XOR<ActivityCreateInput, ActivityUncheckedCreateInput>
  }

  /**
   * Activity createMany
   */
  export type ActivityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Activities.
     */
    data: ActivityCreateManyInput | ActivityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Activity update
   */
  export type ActivityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * The data needed to update a Activity.
     */
    data: XOR<ActivityUpdateInput, ActivityUncheckedUpdateInput>
    /**
     * Choose, which Activity to update.
     */
    where: ActivityWhereUniqueInput
  }

  /**
   * Activity updateMany
   */
  export type ActivityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Activities.
     */
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyInput>
    /**
     * Filter which Activities to update
     */
    where?: ActivityWhereInput
  }

  /**
   * Activity upsert
   */
  export type ActivityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * The filter to search for the Activity to update in case it exists.
     */
    where: ActivityWhereUniqueInput
    /**
     * In case the Activity found by the `where` argument doesn't exist, create a new Activity with this data.
     */
    create: XOR<ActivityCreateInput, ActivityUncheckedCreateInput>
    /**
     * In case the Activity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivityUpdateInput, ActivityUncheckedUpdateInput>
  }

  /**
   * Activity delete
   */
  export type ActivityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter which Activity to delete.
     */
    where: ActivityWhereUniqueInput
  }

  /**
   * Activity deleteMany
   */
  export type ActivityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Activities to delete
     */
    where?: ActivityWhereInput
  }

  /**
   * Activity.participants
   */
  export type Activity$participantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityParticipant
     */
    select?: ActivityParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityParticipantInclude<ExtArgs> | null
    where?: ActivityParticipantWhereInput
    orderBy?: ActivityParticipantOrderByWithRelationInput | ActivityParticipantOrderByWithRelationInput[]
    cursor?: ActivityParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityParticipantScalarFieldEnum | ActivityParticipantScalarFieldEnum[]
  }

  /**
   * Activity.likes
   */
  export type Activity$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLike
     */
    select?: ActivityLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLikeInclude<ExtArgs> | null
    where?: ActivityLikeWhereInput
    orderBy?: ActivityLikeOrderByWithRelationInput | ActivityLikeOrderByWithRelationInput[]
    cursor?: ActivityLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityLikeScalarFieldEnum | ActivityLikeScalarFieldEnum[]
  }

  /**
   * Activity.comments
   */
  export type Activity$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityComment
     */
    select?: ActivityCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityCommentInclude<ExtArgs> | null
    where?: ActivityCommentWhereInput
    orderBy?: ActivityCommentOrderByWithRelationInput | ActivityCommentOrderByWithRelationInput[]
    cursor?: ActivityCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityCommentScalarFieldEnum | ActivityCommentScalarFieldEnum[]
  }

  /**
   * Activity without action
   */
  export type ActivityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
  }


  /**
   * Model ActivityParticipant
   */

  export type AggregateActivityParticipant = {
    _count: ActivityParticipantCountAggregateOutputType | null
    _min: ActivityParticipantMinAggregateOutputType | null
    _max: ActivityParticipantMaxAggregateOutputType | null
  }

  export type ActivityParticipantMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    userId: string | null
    activityId: string | null
  }

  export type ActivityParticipantMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    userId: string | null
    activityId: string | null
  }

  export type ActivityParticipantCountAggregateOutputType = {
    id: number
    createdAt: number
    userId: number
    activityId: number
    _all: number
  }


  export type ActivityParticipantMinAggregateInputType = {
    id?: true
    createdAt?: true
    userId?: true
    activityId?: true
  }

  export type ActivityParticipantMaxAggregateInputType = {
    id?: true
    createdAt?: true
    userId?: true
    activityId?: true
  }

  export type ActivityParticipantCountAggregateInputType = {
    id?: true
    createdAt?: true
    userId?: true
    activityId?: true
    _all?: true
  }

  export type ActivityParticipantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityParticipant to aggregate.
     */
    where?: ActivityParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityParticipants to fetch.
     */
    orderBy?: ActivityParticipantOrderByWithRelationInput | ActivityParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActivityParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ActivityParticipants
    **/
    _count?: true | ActivityParticipantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivityParticipantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivityParticipantMaxAggregateInputType
  }

  export type GetActivityParticipantAggregateType<T extends ActivityParticipantAggregateArgs> = {
        [P in keyof T & keyof AggregateActivityParticipant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivityParticipant[P]>
      : GetScalarType<T[P], AggregateActivityParticipant[P]>
  }




  export type ActivityParticipantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityParticipantWhereInput
    orderBy?: ActivityParticipantOrderByWithAggregationInput | ActivityParticipantOrderByWithAggregationInput[]
    by: ActivityParticipantScalarFieldEnum[] | ActivityParticipantScalarFieldEnum
    having?: ActivityParticipantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivityParticipantCountAggregateInputType | true
    _min?: ActivityParticipantMinAggregateInputType
    _max?: ActivityParticipantMaxAggregateInputType
  }

  export type ActivityParticipantGroupByOutputType = {
    id: string
    createdAt: Date
    userId: string
    activityId: string
    _count: ActivityParticipantCountAggregateOutputType | null
    _min: ActivityParticipantMinAggregateOutputType | null
    _max: ActivityParticipantMaxAggregateOutputType | null
  }

  type GetActivityParticipantGroupByPayload<T extends ActivityParticipantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivityParticipantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivityParticipantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivityParticipantGroupByOutputType[P]>
            : GetScalarType<T[P], ActivityParticipantGroupByOutputType[P]>
        }
      >
    >


  export type ActivityParticipantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    userId?: boolean
    activityId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activityParticipant"]>


  export type ActivityParticipantSelectScalar = {
    id?: boolean
    createdAt?: boolean
    userId?: boolean
    activityId?: boolean
  }

  export type ActivityParticipantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }

  export type $ActivityParticipantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ActivityParticipant"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      activity: Prisma.$ActivityPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      userId: string
      activityId: string
    }, ExtArgs["result"]["activityParticipant"]>
    composites: {}
  }

  type ActivityParticipantGetPayload<S extends boolean | null | undefined | ActivityParticipantDefaultArgs> = $Result.GetResult<Prisma.$ActivityParticipantPayload, S>

  type ActivityParticipantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ActivityParticipantFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ActivityParticipantCountAggregateInputType | true
    }

  export interface ActivityParticipantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ActivityParticipant'], meta: { name: 'ActivityParticipant' } }
    /**
     * Find zero or one ActivityParticipant that matches the filter.
     * @param {ActivityParticipantFindUniqueArgs} args - Arguments to find a ActivityParticipant
     * @example
     * // Get one ActivityParticipant
     * const activityParticipant = await prisma.activityParticipant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActivityParticipantFindUniqueArgs>(args: SelectSubset<T, ActivityParticipantFindUniqueArgs<ExtArgs>>): Prisma__ActivityParticipantClient<$Result.GetResult<Prisma.$ActivityParticipantPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ActivityParticipant that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ActivityParticipantFindUniqueOrThrowArgs} args - Arguments to find a ActivityParticipant
     * @example
     * // Get one ActivityParticipant
     * const activityParticipant = await prisma.activityParticipant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActivityParticipantFindUniqueOrThrowArgs>(args: SelectSubset<T, ActivityParticipantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ActivityParticipantClient<$Result.GetResult<Prisma.$ActivityParticipantPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ActivityParticipant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityParticipantFindFirstArgs} args - Arguments to find a ActivityParticipant
     * @example
     * // Get one ActivityParticipant
     * const activityParticipant = await prisma.activityParticipant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActivityParticipantFindFirstArgs>(args?: SelectSubset<T, ActivityParticipantFindFirstArgs<ExtArgs>>): Prisma__ActivityParticipantClient<$Result.GetResult<Prisma.$ActivityParticipantPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ActivityParticipant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityParticipantFindFirstOrThrowArgs} args - Arguments to find a ActivityParticipant
     * @example
     * // Get one ActivityParticipant
     * const activityParticipant = await prisma.activityParticipant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActivityParticipantFindFirstOrThrowArgs>(args?: SelectSubset<T, ActivityParticipantFindFirstOrThrowArgs<ExtArgs>>): Prisma__ActivityParticipantClient<$Result.GetResult<Prisma.$ActivityParticipantPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ActivityParticipants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityParticipantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ActivityParticipants
     * const activityParticipants = await prisma.activityParticipant.findMany()
     * 
     * // Get first 10 ActivityParticipants
     * const activityParticipants = await prisma.activityParticipant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const activityParticipantWithIdOnly = await prisma.activityParticipant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ActivityParticipantFindManyArgs>(args?: SelectSubset<T, ActivityParticipantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityParticipantPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ActivityParticipant.
     * @param {ActivityParticipantCreateArgs} args - Arguments to create a ActivityParticipant.
     * @example
     * // Create one ActivityParticipant
     * const ActivityParticipant = await prisma.activityParticipant.create({
     *   data: {
     *     // ... data to create a ActivityParticipant
     *   }
     * })
     * 
     */
    create<T extends ActivityParticipantCreateArgs>(args: SelectSubset<T, ActivityParticipantCreateArgs<ExtArgs>>): Prisma__ActivityParticipantClient<$Result.GetResult<Prisma.$ActivityParticipantPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ActivityParticipants.
     * @param {ActivityParticipantCreateManyArgs} args - Arguments to create many ActivityParticipants.
     * @example
     * // Create many ActivityParticipants
     * const activityParticipant = await prisma.activityParticipant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ActivityParticipantCreateManyArgs>(args?: SelectSubset<T, ActivityParticipantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ActivityParticipant.
     * @param {ActivityParticipantDeleteArgs} args - Arguments to delete one ActivityParticipant.
     * @example
     * // Delete one ActivityParticipant
     * const ActivityParticipant = await prisma.activityParticipant.delete({
     *   where: {
     *     // ... filter to delete one ActivityParticipant
     *   }
     * })
     * 
     */
    delete<T extends ActivityParticipantDeleteArgs>(args: SelectSubset<T, ActivityParticipantDeleteArgs<ExtArgs>>): Prisma__ActivityParticipantClient<$Result.GetResult<Prisma.$ActivityParticipantPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ActivityParticipant.
     * @param {ActivityParticipantUpdateArgs} args - Arguments to update one ActivityParticipant.
     * @example
     * // Update one ActivityParticipant
     * const activityParticipant = await prisma.activityParticipant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ActivityParticipantUpdateArgs>(args: SelectSubset<T, ActivityParticipantUpdateArgs<ExtArgs>>): Prisma__ActivityParticipantClient<$Result.GetResult<Prisma.$ActivityParticipantPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ActivityParticipants.
     * @param {ActivityParticipantDeleteManyArgs} args - Arguments to filter ActivityParticipants to delete.
     * @example
     * // Delete a few ActivityParticipants
     * const { count } = await prisma.activityParticipant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ActivityParticipantDeleteManyArgs>(args?: SelectSubset<T, ActivityParticipantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivityParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityParticipantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ActivityParticipants
     * const activityParticipant = await prisma.activityParticipant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ActivityParticipantUpdateManyArgs>(args: SelectSubset<T, ActivityParticipantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ActivityParticipant.
     * @param {ActivityParticipantUpsertArgs} args - Arguments to update or create a ActivityParticipant.
     * @example
     * // Update or create a ActivityParticipant
     * const activityParticipant = await prisma.activityParticipant.upsert({
     *   create: {
     *     // ... data to create a ActivityParticipant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ActivityParticipant we want to update
     *   }
     * })
     */
    upsert<T extends ActivityParticipantUpsertArgs>(args: SelectSubset<T, ActivityParticipantUpsertArgs<ExtArgs>>): Prisma__ActivityParticipantClient<$Result.GetResult<Prisma.$ActivityParticipantPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ActivityParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityParticipantCountArgs} args - Arguments to filter ActivityParticipants to count.
     * @example
     * // Count the number of ActivityParticipants
     * const count = await prisma.activityParticipant.count({
     *   where: {
     *     // ... the filter for the ActivityParticipants we want to count
     *   }
     * })
    **/
    count<T extends ActivityParticipantCountArgs>(
      args?: Subset<T, ActivityParticipantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivityParticipantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ActivityParticipant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityParticipantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivityParticipantAggregateArgs>(args: Subset<T, ActivityParticipantAggregateArgs>): Prisma.PrismaPromise<GetActivityParticipantAggregateType<T>>

    /**
     * Group by ActivityParticipant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityParticipantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivityParticipantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivityParticipantGroupByArgs['orderBy'] }
        : { orderBy?: ActivityParticipantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivityParticipantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityParticipantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ActivityParticipant model
   */
  readonly fields: ActivityParticipantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ActivityParticipant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActivityParticipantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    activity<T extends ActivityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ActivityDefaultArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ActivityParticipant model
   */ 
  interface ActivityParticipantFieldRefs {
    readonly id: FieldRef<"ActivityParticipant", 'String'>
    readonly createdAt: FieldRef<"ActivityParticipant", 'DateTime'>
    readonly userId: FieldRef<"ActivityParticipant", 'String'>
    readonly activityId: FieldRef<"ActivityParticipant", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ActivityParticipant findUnique
   */
  export type ActivityParticipantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityParticipant
     */
    select?: ActivityParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityParticipantInclude<ExtArgs> | null
    /**
     * Filter, which ActivityParticipant to fetch.
     */
    where: ActivityParticipantWhereUniqueInput
  }

  /**
   * ActivityParticipant findUniqueOrThrow
   */
  export type ActivityParticipantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityParticipant
     */
    select?: ActivityParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityParticipantInclude<ExtArgs> | null
    /**
     * Filter, which ActivityParticipant to fetch.
     */
    where: ActivityParticipantWhereUniqueInput
  }

  /**
   * ActivityParticipant findFirst
   */
  export type ActivityParticipantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityParticipant
     */
    select?: ActivityParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityParticipantInclude<ExtArgs> | null
    /**
     * Filter, which ActivityParticipant to fetch.
     */
    where?: ActivityParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityParticipants to fetch.
     */
    orderBy?: ActivityParticipantOrderByWithRelationInput | ActivityParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityParticipants.
     */
    cursor?: ActivityParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityParticipants.
     */
    distinct?: ActivityParticipantScalarFieldEnum | ActivityParticipantScalarFieldEnum[]
  }

  /**
   * ActivityParticipant findFirstOrThrow
   */
  export type ActivityParticipantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityParticipant
     */
    select?: ActivityParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityParticipantInclude<ExtArgs> | null
    /**
     * Filter, which ActivityParticipant to fetch.
     */
    where?: ActivityParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityParticipants to fetch.
     */
    orderBy?: ActivityParticipantOrderByWithRelationInput | ActivityParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityParticipants.
     */
    cursor?: ActivityParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityParticipants.
     */
    distinct?: ActivityParticipantScalarFieldEnum | ActivityParticipantScalarFieldEnum[]
  }

  /**
   * ActivityParticipant findMany
   */
  export type ActivityParticipantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityParticipant
     */
    select?: ActivityParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityParticipantInclude<ExtArgs> | null
    /**
     * Filter, which ActivityParticipants to fetch.
     */
    where?: ActivityParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityParticipants to fetch.
     */
    orderBy?: ActivityParticipantOrderByWithRelationInput | ActivityParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ActivityParticipants.
     */
    cursor?: ActivityParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityParticipants.
     */
    skip?: number
    distinct?: ActivityParticipantScalarFieldEnum | ActivityParticipantScalarFieldEnum[]
  }

  /**
   * ActivityParticipant create
   */
  export type ActivityParticipantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityParticipant
     */
    select?: ActivityParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityParticipantInclude<ExtArgs> | null
    /**
     * The data needed to create a ActivityParticipant.
     */
    data: XOR<ActivityParticipantCreateInput, ActivityParticipantUncheckedCreateInput>
  }

  /**
   * ActivityParticipant createMany
   */
  export type ActivityParticipantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ActivityParticipants.
     */
    data: ActivityParticipantCreateManyInput | ActivityParticipantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ActivityParticipant update
   */
  export type ActivityParticipantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityParticipant
     */
    select?: ActivityParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityParticipantInclude<ExtArgs> | null
    /**
     * The data needed to update a ActivityParticipant.
     */
    data: XOR<ActivityParticipantUpdateInput, ActivityParticipantUncheckedUpdateInput>
    /**
     * Choose, which ActivityParticipant to update.
     */
    where: ActivityParticipantWhereUniqueInput
  }

  /**
   * ActivityParticipant updateMany
   */
  export type ActivityParticipantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ActivityParticipants.
     */
    data: XOR<ActivityParticipantUpdateManyMutationInput, ActivityParticipantUncheckedUpdateManyInput>
    /**
     * Filter which ActivityParticipants to update
     */
    where?: ActivityParticipantWhereInput
  }

  /**
   * ActivityParticipant upsert
   */
  export type ActivityParticipantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityParticipant
     */
    select?: ActivityParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityParticipantInclude<ExtArgs> | null
    /**
     * The filter to search for the ActivityParticipant to update in case it exists.
     */
    where: ActivityParticipantWhereUniqueInput
    /**
     * In case the ActivityParticipant found by the `where` argument doesn't exist, create a new ActivityParticipant with this data.
     */
    create: XOR<ActivityParticipantCreateInput, ActivityParticipantUncheckedCreateInput>
    /**
     * In case the ActivityParticipant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivityParticipantUpdateInput, ActivityParticipantUncheckedUpdateInput>
  }

  /**
   * ActivityParticipant delete
   */
  export type ActivityParticipantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityParticipant
     */
    select?: ActivityParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityParticipantInclude<ExtArgs> | null
    /**
     * Filter which ActivityParticipant to delete.
     */
    where: ActivityParticipantWhereUniqueInput
  }

  /**
   * ActivityParticipant deleteMany
   */
  export type ActivityParticipantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityParticipants to delete
     */
    where?: ActivityParticipantWhereInput
  }

  /**
   * ActivityParticipant without action
   */
  export type ActivityParticipantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityParticipant
     */
    select?: ActivityParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityParticipantInclude<ExtArgs> | null
  }


  /**
   * Model ActivityLike
   */

  export type AggregateActivityLike = {
    _count: ActivityLikeCountAggregateOutputType | null
    _min: ActivityLikeMinAggregateOutputType | null
    _max: ActivityLikeMaxAggregateOutputType | null
  }

  export type ActivityLikeMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    userId: string | null
    activityId: string | null
  }

  export type ActivityLikeMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    userId: string | null
    activityId: string | null
  }

  export type ActivityLikeCountAggregateOutputType = {
    id: number
    createdAt: number
    userId: number
    activityId: number
    _all: number
  }


  export type ActivityLikeMinAggregateInputType = {
    id?: true
    createdAt?: true
    userId?: true
    activityId?: true
  }

  export type ActivityLikeMaxAggregateInputType = {
    id?: true
    createdAt?: true
    userId?: true
    activityId?: true
  }

  export type ActivityLikeCountAggregateInputType = {
    id?: true
    createdAt?: true
    userId?: true
    activityId?: true
    _all?: true
  }

  export type ActivityLikeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityLike to aggregate.
     */
    where?: ActivityLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityLikes to fetch.
     */
    orderBy?: ActivityLikeOrderByWithRelationInput | ActivityLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActivityLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ActivityLikes
    **/
    _count?: true | ActivityLikeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivityLikeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivityLikeMaxAggregateInputType
  }

  export type GetActivityLikeAggregateType<T extends ActivityLikeAggregateArgs> = {
        [P in keyof T & keyof AggregateActivityLike]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivityLike[P]>
      : GetScalarType<T[P], AggregateActivityLike[P]>
  }




  export type ActivityLikeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityLikeWhereInput
    orderBy?: ActivityLikeOrderByWithAggregationInput | ActivityLikeOrderByWithAggregationInput[]
    by: ActivityLikeScalarFieldEnum[] | ActivityLikeScalarFieldEnum
    having?: ActivityLikeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivityLikeCountAggregateInputType | true
    _min?: ActivityLikeMinAggregateInputType
    _max?: ActivityLikeMaxAggregateInputType
  }

  export type ActivityLikeGroupByOutputType = {
    id: string
    createdAt: Date
    userId: string
    activityId: string
    _count: ActivityLikeCountAggregateOutputType | null
    _min: ActivityLikeMinAggregateOutputType | null
    _max: ActivityLikeMaxAggregateOutputType | null
  }

  type GetActivityLikeGroupByPayload<T extends ActivityLikeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivityLikeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivityLikeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivityLikeGroupByOutputType[P]>
            : GetScalarType<T[P], ActivityLikeGroupByOutputType[P]>
        }
      >
    >


  export type ActivityLikeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    userId?: boolean
    activityId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activityLike"]>


  export type ActivityLikeSelectScalar = {
    id?: boolean
    createdAt?: boolean
    userId?: boolean
    activityId?: boolean
  }

  export type ActivityLikeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }

  export type $ActivityLikePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ActivityLike"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      activity: Prisma.$ActivityPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      userId: string
      activityId: string
    }, ExtArgs["result"]["activityLike"]>
    composites: {}
  }

  type ActivityLikeGetPayload<S extends boolean | null | undefined | ActivityLikeDefaultArgs> = $Result.GetResult<Prisma.$ActivityLikePayload, S>

  type ActivityLikeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ActivityLikeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ActivityLikeCountAggregateInputType | true
    }

  export interface ActivityLikeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ActivityLike'], meta: { name: 'ActivityLike' } }
    /**
     * Find zero or one ActivityLike that matches the filter.
     * @param {ActivityLikeFindUniqueArgs} args - Arguments to find a ActivityLike
     * @example
     * // Get one ActivityLike
     * const activityLike = await prisma.activityLike.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActivityLikeFindUniqueArgs>(args: SelectSubset<T, ActivityLikeFindUniqueArgs<ExtArgs>>): Prisma__ActivityLikeClient<$Result.GetResult<Prisma.$ActivityLikePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ActivityLike that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ActivityLikeFindUniqueOrThrowArgs} args - Arguments to find a ActivityLike
     * @example
     * // Get one ActivityLike
     * const activityLike = await prisma.activityLike.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActivityLikeFindUniqueOrThrowArgs>(args: SelectSubset<T, ActivityLikeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ActivityLikeClient<$Result.GetResult<Prisma.$ActivityLikePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ActivityLike that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLikeFindFirstArgs} args - Arguments to find a ActivityLike
     * @example
     * // Get one ActivityLike
     * const activityLike = await prisma.activityLike.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActivityLikeFindFirstArgs>(args?: SelectSubset<T, ActivityLikeFindFirstArgs<ExtArgs>>): Prisma__ActivityLikeClient<$Result.GetResult<Prisma.$ActivityLikePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ActivityLike that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLikeFindFirstOrThrowArgs} args - Arguments to find a ActivityLike
     * @example
     * // Get one ActivityLike
     * const activityLike = await prisma.activityLike.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActivityLikeFindFirstOrThrowArgs>(args?: SelectSubset<T, ActivityLikeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ActivityLikeClient<$Result.GetResult<Prisma.$ActivityLikePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ActivityLikes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLikeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ActivityLikes
     * const activityLikes = await prisma.activityLike.findMany()
     * 
     * // Get first 10 ActivityLikes
     * const activityLikes = await prisma.activityLike.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const activityLikeWithIdOnly = await prisma.activityLike.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ActivityLikeFindManyArgs>(args?: SelectSubset<T, ActivityLikeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityLikePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ActivityLike.
     * @param {ActivityLikeCreateArgs} args - Arguments to create a ActivityLike.
     * @example
     * // Create one ActivityLike
     * const ActivityLike = await prisma.activityLike.create({
     *   data: {
     *     // ... data to create a ActivityLike
     *   }
     * })
     * 
     */
    create<T extends ActivityLikeCreateArgs>(args: SelectSubset<T, ActivityLikeCreateArgs<ExtArgs>>): Prisma__ActivityLikeClient<$Result.GetResult<Prisma.$ActivityLikePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ActivityLikes.
     * @param {ActivityLikeCreateManyArgs} args - Arguments to create many ActivityLikes.
     * @example
     * // Create many ActivityLikes
     * const activityLike = await prisma.activityLike.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ActivityLikeCreateManyArgs>(args?: SelectSubset<T, ActivityLikeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ActivityLike.
     * @param {ActivityLikeDeleteArgs} args - Arguments to delete one ActivityLike.
     * @example
     * // Delete one ActivityLike
     * const ActivityLike = await prisma.activityLike.delete({
     *   where: {
     *     // ... filter to delete one ActivityLike
     *   }
     * })
     * 
     */
    delete<T extends ActivityLikeDeleteArgs>(args: SelectSubset<T, ActivityLikeDeleteArgs<ExtArgs>>): Prisma__ActivityLikeClient<$Result.GetResult<Prisma.$ActivityLikePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ActivityLike.
     * @param {ActivityLikeUpdateArgs} args - Arguments to update one ActivityLike.
     * @example
     * // Update one ActivityLike
     * const activityLike = await prisma.activityLike.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ActivityLikeUpdateArgs>(args: SelectSubset<T, ActivityLikeUpdateArgs<ExtArgs>>): Prisma__ActivityLikeClient<$Result.GetResult<Prisma.$ActivityLikePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ActivityLikes.
     * @param {ActivityLikeDeleteManyArgs} args - Arguments to filter ActivityLikes to delete.
     * @example
     * // Delete a few ActivityLikes
     * const { count } = await prisma.activityLike.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ActivityLikeDeleteManyArgs>(args?: SelectSubset<T, ActivityLikeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivityLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLikeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ActivityLikes
     * const activityLike = await prisma.activityLike.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ActivityLikeUpdateManyArgs>(args: SelectSubset<T, ActivityLikeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ActivityLike.
     * @param {ActivityLikeUpsertArgs} args - Arguments to update or create a ActivityLike.
     * @example
     * // Update or create a ActivityLike
     * const activityLike = await prisma.activityLike.upsert({
     *   create: {
     *     // ... data to create a ActivityLike
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ActivityLike we want to update
     *   }
     * })
     */
    upsert<T extends ActivityLikeUpsertArgs>(args: SelectSubset<T, ActivityLikeUpsertArgs<ExtArgs>>): Prisma__ActivityLikeClient<$Result.GetResult<Prisma.$ActivityLikePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ActivityLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLikeCountArgs} args - Arguments to filter ActivityLikes to count.
     * @example
     * // Count the number of ActivityLikes
     * const count = await prisma.activityLike.count({
     *   where: {
     *     // ... the filter for the ActivityLikes we want to count
     *   }
     * })
    **/
    count<T extends ActivityLikeCountArgs>(
      args?: Subset<T, ActivityLikeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivityLikeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ActivityLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivityLikeAggregateArgs>(args: Subset<T, ActivityLikeAggregateArgs>): Prisma.PrismaPromise<GetActivityLikeAggregateType<T>>

    /**
     * Group by ActivityLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLikeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivityLikeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivityLikeGroupByArgs['orderBy'] }
        : { orderBy?: ActivityLikeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivityLikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityLikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ActivityLike model
   */
  readonly fields: ActivityLikeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ActivityLike.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActivityLikeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    activity<T extends ActivityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ActivityDefaultArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ActivityLike model
   */ 
  interface ActivityLikeFieldRefs {
    readonly id: FieldRef<"ActivityLike", 'String'>
    readonly createdAt: FieldRef<"ActivityLike", 'DateTime'>
    readonly userId: FieldRef<"ActivityLike", 'String'>
    readonly activityId: FieldRef<"ActivityLike", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ActivityLike findUnique
   */
  export type ActivityLikeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLike
     */
    select?: ActivityLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLikeInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLike to fetch.
     */
    where: ActivityLikeWhereUniqueInput
  }

  /**
   * ActivityLike findUniqueOrThrow
   */
  export type ActivityLikeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLike
     */
    select?: ActivityLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLikeInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLike to fetch.
     */
    where: ActivityLikeWhereUniqueInput
  }

  /**
   * ActivityLike findFirst
   */
  export type ActivityLikeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLike
     */
    select?: ActivityLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLikeInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLike to fetch.
     */
    where?: ActivityLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityLikes to fetch.
     */
    orderBy?: ActivityLikeOrderByWithRelationInput | ActivityLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityLikes.
     */
    cursor?: ActivityLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityLikes.
     */
    distinct?: ActivityLikeScalarFieldEnum | ActivityLikeScalarFieldEnum[]
  }

  /**
   * ActivityLike findFirstOrThrow
   */
  export type ActivityLikeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLike
     */
    select?: ActivityLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLikeInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLike to fetch.
     */
    where?: ActivityLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityLikes to fetch.
     */
    orderBy?: ActivityLikeOrderByWithRelationInput | ActivityLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityLikes.
     */
    cursor?: ActivityLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityLikes.
     */
    distinct?: ActivityLikeScalarFieldEnum | ActivityLikeScalarFieldEnum[]
  }

  /**
   * ActivityLike findMany
   */
  export type ActivityLikeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLike
     */
    select?: ActivityLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLikeInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLikes to fetch.
     */
    where?: ActivityLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityLikes to fetch.
     */
    orderBy?: ActivityLikeOrderByWithRelationInput | ActivityLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ActivityLikes.
     */
    cursor?: ActivityLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityLikes.
     */
    skip?: number
    distinct?: ActivityLikeScalarFieldEnum | ActivityLikeScalarFieldEnum[]
  }

  /**
   * ActivityLike create
   */
  export type ActivityLikeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLike
     */
    select?: ActivityLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLikeInclude<ExtArgs> | null
    /**
     * The data needed to create a ActivityLike.
     */
    data: XOR<ActivityLikeCreateInput, ActivityLikeUncheckedCreateInput>
  }

  /**
   * ActivityLike createMany
   */
  export type ActivityLikeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ActivityLikes.
     */
    data: ActivityLikeCreateManyInput | ActivityLikeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ActivityLike update
   */
  export type ActivityLikeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLike
     */
    select?: ActivityLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLikeInclude<ExtArgs> | null
    /**
     * The data needed to update a ActivityLike.
     */
    data: XOR<ActivityLikeUpdateInput, ActivityLikeUncheckedUpdateInput>
    /**
     * Choose, which ActivityLike to update.
     */
    where: ActivityLikeWhereUniqueInput
  }

  /**
   * ActivityLike updateMany
   */
  export type ActivityLikeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ActivityLikes.
     */
    data: XOR<ActivityLikeUpdateManyMutationInput, ActivityLikeUncheckedUpdateManyInput>
    /**
     * Filter which ActivityLikes to update
     */
    where?: ActivityLikeWhereInput
  }

  /**
   * ActivityLike upsert
   */
  export type ActivityLikeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLike
     */
    select?: ActivityLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLikeInclude<ExtArgs> | null
    /**
     * The filter to search for the ActivityLike to update in case it exists.
     */
    where: ActivityLikeWhereUniqueInput
    /**
     * In case the ActivityLike found by the `where` argument doesn't exist, create a new ActivityLike with this data.
     */
    create: XOR<ActivityLikeCreateInput, ActivityLikeUncheckedCreateInput>
    /**
     * In case the ActivityLike was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivityLikeUpdateInput, ActivityLikeUncheckedUpdateInput>
  }

  /**
   * ActivityLike delete
   */
  export type ActivityLikeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLike
     */
    select?: ActivityLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLikeInclude<ExtArgs> | null
    /**
     * Filter which ActivityLike to delete.
     */
    where: ActivityLikeWhereUniqueInput
  }

  /**
   * ActivityLike deleteMany
   */
  export type ActivityLikeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityLikes to delete
     */
    where?: ActivityLikeWhereInput
  }

  /**
   * ActivityLike without action
   */
  export type ActivityLikeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLike
     */
    select?: ActivityLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLikeInclude<ExtArgs> | null
  }


  /**
   * Model ActivityComment
   */

  export type AggregateActivityComment = {
    _count: ActivityCommentCountAggregateOutputType | null
    _min: ActivityCommentMinAggregateOutputType | null
    _max: ActivityCommentMaxAggregateOutputType | null
  }

  export type ActivityCommentMinAggregateOutputType = {
    id: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
    authorId: string | null
    activityId: string | null
  }

  export type ActivityCommentMaxAggregateOutputType = {
    id: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
    authorId: string | null
    activityId: string | null
  }

  export type ActivityCommentCountAggregateOutputType = {
    id: number
    content: number
    createdAt: number
    updatedAt: number
    authorId: number
    activityId: number
    _all: number
  }


  export type ActivityCommentMinAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    authorId?: true
    activityId?: true
  }

  export type ActivityCommentMaxAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    authorId?: true
    activityId?: true
  }

  export type ActivityCommentCountAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    authorId?: true
    activityId?: true
    _all?: true
  }

  export type ActivityCommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityComment to aggregate.
     */
    where?: ActivityCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityComments to fetch.
     */
    orderBy?: ActivityCommentOrderByWithRelationInput | ActivityCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActivityCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ActivityComments
    **/
    _count?: true | ActivityCommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivityCommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivityCommentMaxAggregateInputType
  }

  export type GetActivityCommentAggregateType<T extends ActivityCommentAggregateArgs> = {
        [P in keyof T & keyof AggregateActivityComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivityComment[P]>
      : GetScalarType<T[P], AggregateActivityComment[P]>
  }




  export type ActivityCommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityCommentWhereInput
    orderBy?: ActivityCommentOrderByWithAggregationInput | ActivityCommentOrderByWithAggregationInput[]
    by: ActivityCommentScalarFieldEnum[] | ActivityCommentScalarFieldEnum
    having?: ActivityCommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivityCommentCountAggregateInputType | true
    _min?: ActivityCommentMinAggregateInputType
    _max?: ActivityCommentMaxAggregateInputType
  }

  export type ActivityCommentGroupByOutputType = {
    id: string
    content: string
    createdAt: Date
    updatedAt: Date
    authorId: string
    activityId: string
    _count: ActivityCommentCountAggregateOutputType | null
    _min: ActivityCommentMinAggregateOutputType | null
    _max: ActivityCommentMaxAggregateOutputType | null
  }

  type GetActivityCommentGroupByPayload<T extends ActivityCommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivityCommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivityCommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivityCommentGroupByOutputType[P]>
            : GetScalarType<T[P], ActivityCommentGroupByOutputType[P]>
        }
      >
    >


  export type ActivityCommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authorId?: boolean
    activityId?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activityComment"]>


  export type ActivityCommentSelectScalar = {
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authorId?: boolean
    activityId?: boolean
  }

  export type ActivityCommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }

  export type $ActivityCommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ActivityComment"
    objects: {
      author: Prisma.$UserPayload<ExtArgs>
      activity: Prisma.$ActivityPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string
      createdAt: Date
      updatedAt: Date
      authorId: string
      activityId: string
    }, ExtArgs["result"]["activityComment"]>
    composites: {}
  }

  type ActivityCommentGetPayload<S extends boolean | null | undefined | ActivityCommentDefaultArgs> = $Result.GetResult<Prisma.$ActivityCommentPayload, S>

  type ActivityCommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ActivityCommentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ActivityCommentCountAggregateInputType | true
    }

  export interface ActivityCommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ActivityComment'], meta: { name: 'ActivityComment' } }
    /**
     * Find zero or one ActivityComment that matches the filter.
     * @param {ActivityCommentFindUniqueArgs} args - Arguments to find a ActivityComment
     * @example
     * // Get one ActivityComment
     * const activityComment = await prisma.activityComment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActivityCommentFindUniqueArgs>(args: SelectSubset<T, ActivityCommentFindUniqueArgs<ExtArgs>>): Prisma__ActivityCommentClient<$Result.GetResult<Prisma.$ActivityCommentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ActivityComment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ActivityCommentFindUniqueOrThrowArgs} args - Arguments to find a ActivityComment
     * @example
     * // Get one ActivityComment
     * const activityComment = await prisma.activityComment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActivityCommentFindUniqueOrThrowArgs>(args: SelectSubset<T, ActivityCommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ActivityCommentClient<$Result.GetResult<Prisma.$ActivityCommentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ActivityComment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityCommentFindFirstArgs} args - Arguments to find a ActivityComment
     * @example
     * // Get one ActivityComment
     * const activityComment = await prisma.activityComment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActivityCommentFindFirstArgs>(args?: SelectSubset<T, ActivityCommentFindFirstArgs<ExtArgs>>): Prisma__ActivityCommentClient<$Result.GetResult<Prisma.$ActivityCommentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ActivityComment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityCommentFindFirstOrThrowArgs} args - Arguments to find a ActivityComment
     * @example
     * // Get one ActivityComment
     * const activityComment = await prisma.activityComment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActivityCommentFindFirstOrThrowArgs>(args?: SelectSubset<T, ActivityCommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__ActivityCommentClient<$Result.GetResult<Prisma.$ActivityCommentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ActivityComments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityCommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ActivityComments
     * const activityComments = await prisma.activityComment.findMany()
     * 
     * // Get first 10 ActivityComments
     * const activityComments = await prisma.activityComment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const activityCommentWithIdOnly = await prisma.activityComment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ActivityCommentFindManyArgs>(args?: SelectSubset<T, ActivityCommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityCommentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ActivityComment.
     * @param {ActivityCommentCreateArgs} args - Arguments to create a ActivityComment.
     * @example
     * // Create one ActivityComment
     * const ActivityComment = await prisma.activityComment.create({
     *   data: {
     *     // ... data to create a ActivityComment
     *   }
     * })
     * 
     */
    create<T extends ActivityCommentCreateArgs>(args: SelectSubset<T, ActivityCommentCreateArgs<ExtArgs>>): Prisma__ActivityCommentClient<$Result.GetResult<Prisma.$ActivityCommentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ActivityComments.
     * @param {ActivityCommentCreateManyArgs} args - Arguments to create many ActivityComments.
     * @example
     * // Create many ActivityComments
     * const activityComment = await prisma.activityComment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ActivityCommentCreateManyArgs>(args?: SelectSubset<T, ActivityCommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ActivityComment.
     * @param {ActivityCommentDeleteArgs} args - Arguments to delete one ActivityComment.
     * @example
     * // Delete one ActivityComment
     * const ActivityComment = await prisma.activityComment.delete({
     *   where: {
     *     // ... filter to delete one ActivityComment
     *   }
     * })
     * 
     */
    delete<T extends ActivityCommentDeleteArgs>(args: SelectSubset<T, ActivityCommentDeleteArgs<ExtArgs>>): Prisma__ActivityCommentClient<$Result.GetResult<Prisma.$ActivityCommentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ActivityComment.
     * @param {ActivityCommentUpdateArgs} args - Arguments to update one ActivityComment.
     * @example
     * // Update one ActivityComment
     * const activityComment = await prisma.activityComment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ActivityCommentUpdateArgs>(args: SelectSubset<T, ActivityCommentUpdateArgs<ExtArgs>>): Prisma__ActivityCommentClient<$Result.GetResult<Prisma.$ActivityCommentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ActivityComments.
     * @param {ActivityCommentDeleteManyArgs} args - Arguments to filter ActivityComments to delete.
     * @example
     * // Delete a few ActivityComments
     * const { count } = await prisma.activityComment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ActivityCommentDeleteManyArgs>(args?: SelectSubset<T, ActivityCommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivityComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityCommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ActivityComments
     * const activityComment = await prisma.activityComment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ActivityCommentUpdateManyArgs>(args: SelectSubset<T, ActivityCommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ActivityComment.
     * @param {ActivityCommentUpsertArgs} args - Arguments to update or create a ActivityComment.
     * @example
     * // Update or create a ActivityComment
     * const activityComment = await prisma.activityComment.upsert({
     *   create: {
     *     // ... data to create a ActivityComment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ActivityComment we want to update
     *   }
     * })
     */
    upsert<T extends ActivityCommentUpsertArgs>(args: SelectSubset<T, ActivityCommentUpsertArgs<ExtArgs>>): Prisma__ActivityCommentClient<$Result.GetResult<Prisma.$ActivityCommentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ActivityComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityCommentCountArgs} args - Arguments to filter ActivityComments to count.
     * @example
     * // Count the number of ActivityComments
     * const count = await prisma.activityComment.count({
     *   where: {
     *     // ... the filter for the ActivityComments we want to count
     *   }
     * })
    **/
    count<T extends ActivityCommentCountArgs>(
      args?: Subset<T, ActivityCommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivityCommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ActivityComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityCommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivityCommentAggregateArgs>(args: Subset<T, ActivityCommentAggregateArgs>): Prisma.PrismaPromise<GetActivityCommentAggregateType<T>>

    /**
     * Group by ActivityComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityCommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivityCommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivityCommentGroupByArgs['orderBy'] }
        : { orderBy?: ActivityCommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivityCommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ActivityComment model
   */
  readonly fields: ActivityCommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ActivityComment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActivityCommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    activity<T extends ActivityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ActivityDefaultArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ActivityComment model
   */ 
  interface ActivityCommentFieldRefs {
    readonly id: FieldRef<"ActivityComment", 'String'>
    readonly content: FieldRef<"ActivityComment", 'String'>
    readonly createdAt: FieldRef<"ActivityComment", 'DateTime'>
    readonly updatedAt: FieldRef<"ActivityComment", 'DateTime'>
    readonly authorId: FieldRef<"ActivityComment", 'String'>
    readonly activityId: FieldRef<"ActivityComment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ActivityComment findUnique
   */
  export type ActivityCommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityComment
     */
    select?: ActivityCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityCommentInclude<ExtArgs> | null
    /**
     * Filter, which ActivityComment to fetch.
     */
    where: ActivityCommentWhereUniqueInput
  }

  /**
   * ActivityComment findUniqueOrThrow
   */
  export type ActivityCommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityComment
     */
    select?: ActivityCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityCommentInclude<ExtArgs> | null
    /**
     * Filter, which ActivityComment to fetch.
     */
    where: ActivityCommentWhereUniqueInput
  }

  /**
   * ActivityComment findFirst
   */
  export type ActivityCommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityComment
     */
    select?: ActivityCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityCommentInclude<ExtArgs> | null
    /**
     * Filter, which ActivityComment to fetch.
     */
    where?: ActivityCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityComments to fetch.
     */
    orderBy?: ActivityCommentOrderByWithRelationInput | ActivityCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityComments.
     */
    cursor?: ActivityCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityComments.
     */
    distinct?: ActivityCommentScalarFieldEnum | ActivityCommentScalarFieldEnum[]
  }

  /**
   * ActivityComment findFirstOrThrow
   */
  export type ActivityCommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityComment
     */
    select?: ActivityCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityCommentInclude<ExtArgs> | null
    /**
     * Filter, which ActivityComment to fetch.
     */
    where?: ActivityCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityComments to fetch.
     */
    orderBy?: ActivityCommentOrderByWithRelationInput | ActivityCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityComments.
     */
    cursor?: ActivityCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityComments.
     */
    distinct?: ActivityCommentScalarFieldEnum | ActivityCommentScalarFieldEnum[]
  }

  /**
   * ActivityComment findMany
   */
  export type ActivityCommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityComment
     */
    select?: ActivityCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityCommentInclude<ExtArgs> | null
    /**
     * Filter, which ActivityComments to fetch.
     */
    where?: ActivityCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityComments to fetch.
     */
    orderBy?: ActivityCommentOrderByWithRelationInput | ActivityCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ActivityComments.
     */
    cursor?: ActivityCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityComments.
     */
    skip?: number
    distinct?: ActivityCommentScalarFieldEnum | ActivityCommentScalarFieldEnum[]
  }

  /**
   * ActivityComment create
   */
  export type ActivityCommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityComment
     */
    select?: ActivityCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityCommentInclude<ExtArgs> | null
    /**
     * The data needed to create a ActivityComment.
     */
    data: XOR<ActivityCommentCreateInput, ActivityCommentUncheckedCreateInput>
  }

  /**
   * ActivityComment createMany
   */
  export type ActivityCommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ActivityComments.
     */
    data: ActivityCommentCreateManyInput | ActivityCommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ActivityComment update
   */
  export type ActivityCommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityComment
     */
    select?: ActivityCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityCommentInclude<ExtArgs> | null
    /**
     * The data needed to update a ActivityComment.
     */
    data: XOR<ActivityCommentUpdateInput, ActivityCommentUncheckedUpdateInput>
    /**
     * Choose, which ActivityComment to update.
     */
    where: ActivityCommentWhereUniqueInput
  }

  /**
   * ActivityComment updateMany
   */
  export type ActivityCommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ActivityComments.
     */
    data: XOR<ActivityCommentUpdateManyMutationInput, ActivityCommentUncheckedUpdateManyInput>
    /**
     * Filter which ActivityComments to update
     */
    where?: ActivityCommentWhereInput
  }

  /**
   * ActivityComment upsert
   */
  export type ActivityCommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityComment
     */
    select?: ActivityCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityCommentInclude<ExtArgs> | null
    /**
     * The filter to search for the ActivityComment to update in case it exists.
     */
    where: ActivityCommentWhereUniqueInput
    /**
     * In case the ActivityComment found by the `where` argument doesn't exist, create a new ActivityComment with this data.
     */
    create: XOR<ActivityCommentCreateInput, ActivityCommentUncheckedCreateInput>
    /**
     * In case the ActivityComment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivityCommentUpdateInput, ActivityCommentUncheckedUpdateInput>
  }

  /**
   * ActivityComment delete
   */
  export type ActivityCommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityComment
     */
    select?: ActivityCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityCommentInclude<ExtArgs> | null
    /**
     * Filter which ActivityComment to delete.
     */
    where: ActivityCommentWhereUniqueInput
  }

  /**
   * ActivityComment deleteMany
   */
  export type ActivityCommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityComments to delete
     */
    where?: ActivityCommentWhereInput
  }

  /**
   * ActivityComment without action
   */
  export type ActivityCommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityComment
     */
    select?: ActivityCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityCommentInclude<ExtArgs> | null
  }


  /**
   * Model UserBinding
   */

  export type AggregateUserBinding = {
    _count: UserBindingCountAggregateOutputType | null
    _min: UserBindingMinAggregateOutputType | null
    _max: UserBindingMaxAggregateOutputType | null
  }

  export type UserBindingMinAggregateOutputType = {
    id: string | null
    type: string | null
    bindValue: string | null
    metadata: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type UserBindingMaxAggregateOutputType = {
    id: string | null
    type: string | null
    bindValue: string | null
    metadata: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type UserBindingCountAggregateOutputType = {
    id: number
    type: number
    bindValue: number
    metadata: number
    createdAt: number
    updatedAt: number
    userId: number
    _all: number
  }


  export type UserBindingMinAggregateInputType = {
    id?: true
    type?: true
    bindValue?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type UserBindingMaxAggregateInputType = {
    id?: true
    type?: true
    bindValue?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type UserBindingCountAggregateInputType = {
    id?: true
    type?: true
    bindValue?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    _all?: true
  }

  export type UserBindingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserBinding to aggregate.
     */
    where?: UserBindingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBindings to fetch.
     */
    orderBy?: UserBindingOrderByWithRelationInput | UserBindingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserBindingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBindings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBindings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserBindings
    **/
    _count?: true | UserBindingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserBindingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserBindingMaxAggregateInputType
  }

  export type GetUserBindingAggregateType<T extends UserBindingAggregateArgs> = {
        [P in keyof T & keyof AggregateUserBinding]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserBinding[P]>
      : GetScalarType<T[P], AggregateUserBinding[P]>
  }




  export type UserBindingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserBindingWhereInput
    orderBy?: UserBindingOrderByWithAggregationInput | UserBindingOrderByWithAggregationInput[]
    by: UserBindingScalarFieldEnum[] | UserBindingScalarFieldEnum
    having?: UserBindingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserBindingCountAggregateInputType | true
    _min?: UserBindingMinAggregateInputType
    _max?: UserBindingMaxAggregateInputType
  }

  export type UserBindingGroupByOutputType = {
    id: string
    type: string
    bindValue: string
    metadata: string | null
    createdAt: Date
    updatedAt: Date
    userId: string
    _count: UserBindingCountAggregateOutputType | null
    _min: UserBindingMinAggregateOutputType | null
    _max: UserBindingMaxAggregateOutputType | null
  }

  type GetUserBindingGroupByPayload<T extends UserBindingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserBindingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserBindingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserBindingGroupByOutputType[P]>
            : GetScalarType<T[P], UserBindingGroupByOutputType[P]>
        }
      >
    >


  export type UserBindingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    bindValue?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userBinding"]>


  export type UserBindingSelectScalar = {
    id?: boolean
    type?: boolean
    bindValue?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
  }

  export type UserBindingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserBindingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserBinding"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      bindValue: string
      metadata: string | null
      createdAt: Date
      updatedAt: Date
      userId: string
    }, ExtArgs["result"]["userBinding"]>
    composites: {}
  }

  type UserBindingGetPayload<S extends boolean | null | undefined | UserBindingDefaultArgs> = $Result.GetResult<Prisma.$UserBindingPayload, S>

  type UserBindingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserBindingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserBindingCountAggregateInputType | true
    }

  export interface UserBindingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserBinding'], meta: { name: 'UserBinding' } }
    /**
     * Find zero or one UserBinding that matches the filter.
     * @param {UserBindingFindUniqueArgs} args - Arguments to find a UserBinding
     * @example
     * // Get one UserBinding
     * const userBinding = await prisma.userBinding.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserBindingFindUniqueArgs>(args: SelectSubset<T, UserBindingFindUniqueArgs<ExtArgs>>): Prisma__UserBindingClient<$Result.GetResult<Prisma.$UserBindingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserBinding that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserBindingFindUniqueOrThrowArgs} args - Arguments to find a UserBinding
     * @example
     * // Get one UserBinding
     * const userBinding = await prisma.userBinding.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserBindingFindUniqueOrThrowArgs>(args: SelectSubset<T, UserBindingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserBindingClient<$Result.GetResult<Prisma.$UserBindingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserBinding that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBindingFindFirstArgs} args - Arguments to find a UserBinding
     * @example
     * // Get one UserBinding
     * const userBinding = await prisma.userBinding.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserBindingFindFirstArgs>(args?: SelectSubset<T, UserBindingFindFirstArgs<ExtArgs>>): Prisma__UserBindingClient<$Result.GetResult<Prisma.$UserBindingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserBinding that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBindingFindFirstOrThrowArgs} args - Arguments to find a UserBinding
     * @example
     * // Get one UserBinding
     * const userBinding = await prisma.userBinding.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserBindingFindFirstOrThrowArgs>(args?: SelectSubset<T, UserBindingFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserBindingClient<$Result.GetResult<Prisma.$UserBindingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserBindings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBindingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserBindings
     * const userBindings = await prisma.userBinding.findMany()
     * 
     * // Get first 10 UserBindings
     * const userBindings = await prisma.userBinding.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userBindingWithIdOnly = await prisma.userBinding.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserBindingFindManyArgs>(args?: SelectSubset<T, UserBindingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBindingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserBinding.
     * @param {UserBindingCreateArgs} args - Arguments to create a UserBinding.
     * @example
     * // Create one UserBinding
     * const UserBinding = await prisma.userBinding.create({
     *   data: {
     *     // ... data to create a UserBinding
     *   }
     * })
     * 
     */
    create<T extends UserBindingCreateArgs>(args: SelectSubset<T, UserBindingCreateArgs<ExtArgs>>): Prisma__UserBindingClient<$Result.GetResult<Prisma.$UserBindingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserBindings.
     * @param {UserBindingCreateManyArgs} args - Arguments to create many UserBindings.
     * @example
     * // Create many UserBindings
     * const userBinding = await prisma.userBinding.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserBindingCreateManyArgs>(args?: SelectSubset<T, UserBindingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserBinding.
     * @param {UserBindingDeleteArgs} args - Arguments to delete one UserBinding.
     * @example
     * // Delete one UserBinding
     * const UserBinding = await prisma.userBinding.delete({
     *   where: {
     *     // ... filter to delete one UserBinding
     *   }
     * })
     * 
     */
    delete<T extends UserBindingDeleteArgs>(args: SelectSubset<T, UserBindingDeleteArgs<ExtArgs>>): Prisma__UserBindingClient<$Result.GetResult<Prisma.$UserBindingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserBinding.
     * @param {UserBindingUpdateArgs} args - Arguments to update one UserBinding.
     * @example
     * // Update one UserBinding
     * const userBinding = await prisma.userBinding.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserBindingUpdateArgs>(args: SelectSubset<T, UserBindingUpdateArgs<ExtArgs>>): Prisma__UserBindingClient<$Result.GetResult<Prisma.$UserBindingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserBindings.
     * @param {UserBindingDeleteManyArgs} args - Arguments to filter UserBindings to delete.
     * @example
     * // Delete a few UserBindings
     * const { count } = await prisma.userBinding.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserBindingDeleteManyArgs>(args?: SelectSubset<T, UserBindingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserBindings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBindingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserBindings
     * const userBinding = await prisma.userBinding.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserBindingUpdateManyArgs>(args: SelectSubset<T, UserBindingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserBinding.
     * @param {UserBindingUpsertArgs} args - Arguments to update or create a UserBinding.
     * @example
     * // Update or create a UserBinding
     * const userBinding = await prisma.userBinding.upsert({
     *   create: {
     *     // ... data to create a UserBinding
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserBinding we want to update
     *   }
     * })
     */
    upsert<T extends UserBindingUpsertArgs>(args: SelectSubset<T, UserBindingUpsertArgs<ExtArgs>>): Prisma__UserBindingClient<$Result.GetResult<Prisma.$UserBindingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserBindings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBindingCountArgs} args - Arguments to filter UserBindings to count.
     * @example
     * // Count the number of UserBindings
     * const count = await prisma.userBinding.count({
     *   where: {
     *     // ... the filter for the UserBindings we want to count
     *   }
     * })
    **/
    count<T extends UserBindingCountArgs>(
      args?: Subset<T, UserBindingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserBindingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserBinding.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBindingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserBindingAggregateArgs>(args: Subset<T, UserBindingAggregateArgs>): Prisma.PrismaPromise<GetUserBindingAggregateType<T>>

    /**
     * Group by UserBinding.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBindingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserBindingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserBindingGroupByArgs['orderBy'] }
        : { orderBy?: UserBindingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserBindingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserBindingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserBinding model
   */
  readonly fields: UserBindingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserBinding.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserBindingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserBinding model
   */ 
  interface UserBindingFieldRefs {
    readonly id: FieldRef<"UserBinding", 'String'>
    readonly type: FieldRef<"UserBinding", 'String'>
    readonly bindValue: FieldRef<"UserBinding", 'String'>
    readonly metadata: FieldRef<"UserBinding", 'String'>
    readonly createdAt: FieldRef<"UserBinding", 'DateTime'>
    readonly updatedAt: FieldRef<"UserBinding", 'DateTime'>
    readonly userId: FieldRef<"UserBinding", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserBinding findUnique
   */
  export type UserBindingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBinding
     */
    select?: UserBindingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBindingInclude<ExtArgs> | null
    /**
     * Filter, which UserBinding to fetch.
     */
    where: UserBindingWhereUniqueInput
  }

  /**
   * UserBinding findUniqueOrThrow
   */
  export type UserBindingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBinding
     */
    select?: UserBindingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBindingInclude<ExtArgs> | null
    /**
     * Filter, which UserBinding to fetch.
     */
    where: UserBindingWhereUniqueInput
  }

  /**
   * UserBinding findFirst
   */
  export type UserBindingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBinding
     */
    select?: UserBindingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBindingInclude<ExtArgs> | null
    /**
     * Filter, which UserBinding to fetch.
     */
    where?: UserBindingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBindings to fetch.
     */
    orderBy?: UserBindingOrderByWithRelationInput | UserBindingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserBindings.
     */
    cursor?: UserBindingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBindings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBindings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserBindings.
     */
    distinct?: UserBindingScalarFieldEnum | UserBindingScalarFieldEnum[]
  }

  /**
   * UserBinding findFirstOrThrow
   */
  export type UserBindingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBinding
     */
    select?: UserBindingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBindingInclude<ExtArgs> | null
    /**
     * Filter, which UserBinding to fetch.
     */
    where?: UserBindingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBindings to fetch.
     */
    orderBy?: UserBindingOrderByWithRelationInput | UserBindingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserBindings.
     */
    cursor?: UserBindingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBindings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBindings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserBindings.
     */
    distinct?: UserBindingScalarFieldEnum | UserBindingScalarFieldEnum[]
  }

  /**
   * UserBinding findMany
   */
  export type UserBindingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBinding
     */
    select?: UserBindingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBindingInclude<ExtArgs> | null
    /**
     * Filter, which UserBindings to fetch.
     */
    where?: UserBindingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBindings to fetch.
     */
    orderBy?: UserBindingOrderByWithRelationInput | UserBindingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserBindings.
     */
    cursor?: UserBindingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBindings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBindings.
     */
    skip?: number
    distinct?: UserBindingScalarFieldEnum | UserBindingScalarFieldEnum[]
  }

  /**
   * UserBinding create
   */
  export type UserBindingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBinding
     */
    select?: UserBindingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBindingInclude<ExtArgs> | null
    /**
     * The data needed to create a UserBinding.
     */
    data: XOR<UserBindingCreateInput, UserBindingUncheckedCreateInput>
  }

  /**
   * UserBinding createMany
   */
  export type UserBindingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserBindings.
     */
    data: UserBindingCreateManyInput | UserBindingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserBinding update
   */
  export type UserBindingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBinding
     */
    select?: UserBindingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBindingInclude<ExtArgs> | null
    /**
     * The data needed to update a UserBinding.
     */
    data: XOR<UserBindingUpdateInput, UserBindingUncheckedUpdateInput>
    /**
     * Choose, which UserBinding to update.
     */
    where: UserBindingWhereUniqueInput
  }

  /**
   * UserBinding updateMany
   */
  export type UserBindingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserBindings.
     */
    data: XOR<UserBindingUpdateManyMutationInput, UserBindingUncheckedUpdateManyInput>
    /**
     * Filter which UserBindings to update
     */
    where?: UserBindingWhereInput
  }

  /**
   * UserBinding upsert
   */
  export type UserBindingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBinding
     */
    select?: UserBindingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBindingInclude<ExtArgs> | null
    /**
     * The filter to search for the UserBinding to update in case it exists.
     */
    where: UserBindingWhereUniqueInput
    /**
     * In case the UserBinding found by the `where` argument doesn't exist, create a new UserBinding with this data.
     */
    create: XOR<UserBindingCreateInput, UserBindingUncheckedCreateInput>
    /**
     * In case the UserBinding was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserBindingUpdateInput, UserBindingUncheckedUpdateInput>
  }

  /**
   * UserBinding delete
   */
  export type UserBindingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBinding
     */
    select?: UserBindingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBindingInclude<ExtArgs> | null
    /**
     * Filter which UserBinding to delete.
     */
    where: UserBindingWhereUniqueInput
  }

  /**
   * UserBinding deleteMany
   */
  export type UserBindingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserBindings to delete
     */
    where?: UserBindingWhereInput
  }

  /**
   * UserBinding without action
   */
  export type UserBindingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBinding
     */
    select?: UserBindingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBindingInclude<ExtArgs> | null
  }


  /**
   * Model VerificationCode
   */

  export type AggregateVerificationCode = {
    _count: VerificationCodeCountAggregateOutputType | null
    _min: VerificationCodeMinAggregateOutputType | null
    _max: VerificationCodeMaxAggregateOutputType | null
  }

  export type VerificationCodeMinAggregateOutputType = {
    id: string | null
    email: string | null
    code: string | null
    type: string | null
    used: boolean | null
    usedAt: Date | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type VerificationCodeMaxAggregateOutputType = {
    id: string | null
    email: string | null
    code: string | null
    type: string | null
    used: boolean | null
    usedAt: Date | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type VerificationCodeCountAggregateOutputType = {
    id: number
    email: number
    code: number
    type: number
    used: number
    usedAt: number
    expiresAt: number
    createdAt: number
    _all: number
  }


  export type VerificationCodeMinAggregateInputType = {
    id?: true
    email?: true
    code?: true
    type?: true
    used?: true
    usedAt?: true
    expiresAt?: true
    createdAt?: true
  }

  export type VerificationCodeMaxAggregateInputType = {
    id?: true
    email?: true
    code?: true
    type?: true
    used?: true
    usedAt?: true
    expiresAt?: true
    createdAt?: true
  }

  export type VerificationCodeCountAggregateInputType = {
    id?: true
    email?: true
    code?: true
    type?: true
    used?: true
    usedAt?: true
    expiresAt?: true
    createdAt?: true
    _all?: true
  }

  export type VerificationCodeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationCode to aggregate.
     */
    where?: VerificationCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationCodes to fetch.
     */
    orderBy?: VerificationCodeOrderByWithRelationInput | VerificationCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationCodes
    **/
    _count?: true | VerificationCodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationCodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationCodeMaxAggregateInputType
  }

  export type GetVerificationCodeAggregateType<T extends VerificationCodeAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationCode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationCode[P]>
      : GetScalarType<T[P], AggregateVerificationCode[P]>
  }




  export type VerificationCodeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationCodeWhereInput
    orderBy?: VerificationCodeOrderByWithAggregationInput | VerificationCodeOrderByWithAggregationInput[]
    by: VerificationCodeScalarFieldEnum[] | VerificationCodeScalarFieldEnum
    having?: VerificationCodeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationCodeCountAggregateInputType | true
    _min?: VerificationCodeMinAggregateInputType
    _max?: VerificationCodeMaxAggregateInputType
  }

  export type VerificationCodeGroupByOutputType = {
    id: string
    email: string
    code: string
    type: string
    used: boolean
    usedAt: Date | null
    expiresAt: Date
    createdAt: Date
    _count: VerificationCodeCountAggregateOutputType | null
    _min: VerificationCodeMinAggregateOutputType | null
    _max: VerificationCodeMaxAggregateOutputType | null
  }

  type GetVerificationCodeGroupByPayload<T extends VerificationCodeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationCodeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationCodeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationCodeGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationCodeGroupByOutputType[P]>
        }
      >
    >


  export type VerificationCodeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    code?: boolean
    type?: boolean
    used?: boolean
    usedAt?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["verificationCode"]>


  export type VerificationCodeSelectScalar = {
    id?: boolean
    email?: boolean
    code?: boolean
    type?: boolean
    used?: boolean
    usedAt?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }


  export type $VerificationCodePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VerificationCode"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      code: string
      type: string
      used: boolean
      usedAt: Date | null
      expiresAt: Date
      createdAt: Date
    }, ExtArgs["result"]["verificationCode"]>
    composites: {}
  }

  type VerificationCodeGetPayload<S extends boolean | null | undefined | VerificationCodeDefaultArgs> = $Result.GetResult<Prisma.$VerificationCodePayload, S>

  type VerificationCodeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VerificationCodeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VerificationCodeCountAggregateInputType | true
    }

  export interface VerificationCodeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VerificationCode'], meta: { name: 'VerificationCode' } }
    /**
     * Find zero or one VerificationCode that matches the filter.
     * @param {VerificationCodeFindUniqueArgs} args - Arguments to find a VerificationCode
     * @example
     * // Get one VerificationCode
     * const verificationCode = await prisma.verificationCode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationCodeFindUniqueArgs>(args: SelectSubset<T, VerificationCodeFindUniqueArgs<ExtArgs>>): Prisma__VerificationCodeClient<$Result.GetResult<Prisma.$VerificationCodePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one VerificationCode that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VerificationCodeFindUniqueOrThrowArgs} args - Arguments to find a VerificationCode
     * @example
     * // Get one VerificationCode
     * const verificationCode = await prisma.verificationCode.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationCodeFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationCodeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationCodeClient<$Result.GetResult<Prisma.$VerificationCodePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first VerificationCode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationCodeFindFirstArgs} args - Arguments to find a VerificationCode
     * @example
     * // Get one VerificationCode
     * const verificationCode = await prisma.verificationCode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationCodeFindFirstArgs>(args?: SelectSubset<T, VerificationCodeFindFirstArgs<ExtArgs>>): Prisma__VerificationCodeClient<$Result.GetResult<Prisma.$VerificationCodePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first VerificationCode that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationCodeFindFirstOrThrowArgs} args - Arguments to find a VerificationCode
     * @example
     * // Get one VerificationCode
     * const verificationCode = await prisma.verificationCode.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationCodeFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationCodeFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationCodeClient<$Result.GetResult<Prisma.$VerificationCodePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more VerificationCodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationCodeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationCodes
     * const verificationCodes = await prisma.verificationCode.findMany()
     * 
     * // Get first 10 VerificationCodes
     * const verificationCodes = await prisma.verificationCode.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const verificationCodeWithIdOnly = await prisma.verificationCode.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VerificationCodeFindManyArgs>(args?: SelectSubset<T, VerificationCodeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationCodePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a VerificationCode.
     * @param {VerificationCodeCreateArgs} args - Arguments to create a VerificationCode.
     * @example
     * // Create one VerificationCode
     * const VerificationCode = await prisma.verificationCode.create({
     *   data: {
     *     // ... data to create a VerificationCode
     *   }
     * })
     * 
     */
    create<T extends VerificationCodeCreateArgs>(args: SelectSubset<T, VerificationCodeCreateArgs<ExtArgs>>): Prisma__VerificationCodeClient<$Result.GetResult<Prisma.$VerificationCodePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many VerificationCodes.
     * @param {VerificationCodeCreateManyArgs} args - Arguments to create many VerificationCodes.
     * @example
     * // Create many VerificationCodes
     * const verificationCode = await prisma.verificationCode.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationCodeCreateManyArgs>(args?: SelectSubset<T, VerificationCodeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a VerificationCode.
     * @param {VerificationCodeDeleteArgs} args - Arguments to delete one VerificationCode.
     * @example
     * // Delete one VerificationCode
     * const VerificationCode = await prisma.verificationCode.delete({
     *   where: {
     *     // ... filter to delete one VerificationCode
     *   }
     * })
     * 
     */
    delete<T extends VerificationCodeDeleteArgs>(args: SelectSubset<T, VerificationCodeDeleteArgs<ExtArgs>>): Prisma__VerificationCodeClient<$Result.GetResult<Prisma.$VerificationCodePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one VerificationCode.
     * @param {VerificationCodeUpdateArgs} args - Arguments to update one VerificationCode.
     * @example
     * // Update one VerificationCode
     * const verificationCode = await prisma.verificationCode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationCodeUpdateArgs>(args: SelectSubset<T, VerificationCodeUpdateArgs<ExtArgs>>): Prisma__VerificationCodeClient<$Result.GetResult<Prisma.$VerificationCodePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more VerificationCodes.
     * @param {VerificationCodeDeleteManyArgs} args - Arguments to filter VerificationCodes to delete.
     * @example
     * // Delete a few VerificationCodes
     * const { count } = await prisma.verificationCode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationCodeDeleteManyArgs>(args?: SelectSubset<T, VerificationCodeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationCodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationCodes
     * const verificationCode = await prisma.verificationCode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationCodeUpdateManyArgs>(args: SelectSubset<T, VerificationCodeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VerificationCode.
     * @param {VerificationCodeUpsertArgs} args - Arguments to update or create a VerificationCode.
     * @example
     * // Update or create a VerificationCode
     * const verificationCode = await prisma.verificationCode.upsert({
     *   create: {
     *     // ... data to create a VerificationCode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationCode we want to update
     *   }
     * })
     */
    upsert<T extends VerificationCodeUpsertArgs>(args: SelectSubset<T, VerificationCodeUpsertArgs<ExtArgs>>): Prisma__VerificationCodeClient<$Result.GetResult<Prisma.$VerificationCodePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of VerificationCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationCodeCountArgs} args - Arguments to filter VerificationCodes to count.
     * @example
     * // Count the number of VerificationCodes
     * const count = await prisma.verificationCode.count({
     *   where: {
     *     // ... the filter for the VerificationCodes we want to count
     *   }
     * })
    **/
    count<T extends VerificationCodeCountArgs>(
      args?: Subset<T, VerificationCodeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationCodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationCodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationCodeAggregateArgs>(args: Subset<T, VerificationCodeAggregateArgs>): Prisma.PrismaPromise<GetVerificationCodeAggregateType<T>>

    /**
     * Group by VerificationCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationCodeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationCodeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationCodeGroupByArgs['orderBy'] }
        : { orderBy?: VerificationCodeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationCodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationCodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VerificationCode model
   */
  readonly fields: VerificationCodeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationCode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationCodeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VerificationCode model
   */ 
  interface VerificationCodeFieldRefs {
    readonly id: FieldRef<"VerificationCode", 'String'>
    readonly email: FieldRef<"VerificationCode", 'String'>
    readonly code: FieldRef<"VerificationCode", 'String'>
    readonly type: FieldRef<"VerificationCode", 'String'>
    readonly used: FieldRef<"VerificationCode", 'Boolean'>
    readonly usedAt: FieldRef<"VerificationCode", 'DateTime'>
    readonly expiresAt: FieldRef<"VerificationCode", 'DateTime'>
    readonly createdAt: FieldRef<"VerificationCode", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VerificationCode findUnique
   */
  export type VerificationCodeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationCode
     */
    select?: VerificationCodeSelect<ExtArgs> | null
    /**
     * Filter, which VerificationCode to fetch.
     */
    where: VerificationCodeWhereUniqueInput
  }

  /**
   * VerificationCode findUniqueOrThrow
   */
  export type VerificationCodeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationCode
     */
    select?: VerificationCodeSelect<ExtArgs> | null
    /**
     * Filter, which VerificationCode to fetch.
     */
    where: VerificationCodeWhereUniqueInput
  }

  /**
   * VerificationCode findFirst
   */
  export type VerificationCodeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationCode
     */
    select?: VerificationCodeSelect<ExtArgs> | null
    /**
     * Filter, which VerificationCode to fetch.
     */
    where?: VerificationCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationCodes to fetch.
     */
    orderBy?: VerificationCodeOrderByWithRelationInput | VerificationCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationCodes.
     */
    cursor?: VerificationCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationCodes.
     */
    distinct?: VerificationCodeScalarFieldEnum | VerificationCodeScalarFieldEnum[]
  }

  /**
   * VerificationCode findFirstOrThrow
   */
  export type VerificationCodeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationCode
     */
    select?: VerificationCodeSelect<ExtArgs> | null
    /**
     * Filter, which VerificationCode to fetch.
     */
    where?: VerificationCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationCodes to fetch.
     */
    orderBy?: VerificationCodeOrderByWithRelationInput | VerificationCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationCodes.
     */
    cursor?: VerificationCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationCodes.
     */
    distinct?: VerificationCodeScalarFieldEnum | VerificationCodeScalarFieldEnum[]
  }

  /**
   * VerificationCode findMany
   */
  export type VerificationCodeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationCode
     */
    select?: VerificationCodeSelect<ExtArgs> | null
    /**
     * Filter, which VerificationCodes to fetch.
     */
    where?: VerificationCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationCodes to fetch.
     */
    orderBy?: VerificationCodeOrderByWithRelationInput | VerificationCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationCodes.
     */
    cursor?: VerificationCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationCodes.
     */
    skip?: number
    distinct?: VerificationCodeScalarFieldEnum | VerificationCodeScalarFieldEnum[]
  }

  /**
   * VerificationCode create
   */
  export type VerificationCodeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationCode
     */
    select?: VerificationCodeSelect<ExtArgs> | null
    /**
     * The data needed to create a VerificationCode.
     */
    data: XOR<VerificationCodeCreateInput, VerificationCodeUncheckedCreateInput>
  }

  /**
   * VerificationCode createMany
   */
  export type VerificationCodeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VerificationCodes.
     */
    data: VerificationCodeCreateManyInput | VerificationCodeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationCode update
   */
  export type VerificationCodeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationCode
     */
    select?: VerificationCodeSelect<ExtArgs> | null
    /**
     * The data needed to update a VerificationCode.
     */
    data: XOR<VerificationCodeUpdateInput, VerificationCodeUncheckedUpdateInput>
    /**
     * Choose, which VerificationCode to update.
     */
    where: VerificationCodeWhereUniqueInput
  }

  /**
   * VerificationCode updateMany
   */
  export type VerificationCodeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VerificationCodes.
     */
    data: XOR<VerificationCodeUpdateManyMutationInput, VerificationCodeUncheckedUpdateManyInput>
    /**
     * Filter which VerificationCodes to update
     */
    where?: VerificationCodeWhereInput
  }

  /**
   * VerificationCode upsert
   */
  export type VerificationCodeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationCode
     */
    select?: VerificationCodeSelect<ExtArgs> | null
    /**
     * The filter to search for the VerificationCode to update in case it exists.
     */
    where: VerificationCodeWhereUniqueInput
    /**
     * In case the VerificationCode found by the `where` argument doesn't exist, create a new VerificationCode with this data.
     */
    create: XOR<VerificationCodeCreateInput, VerificationCodeUncheckedCreateInput>
    /**
     * In case the VerificationCode was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationCodeUpdateInput, VerificationCodeUncheckedUpdateInput>
  }

  /**
   * VerificationCode delete
   */
  export type VerificationCodeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationCode
     */
    select?: VerificationCodeSelect<ExtArgs> | null
    /**
     * Filter which VerificationCode to delete.
     */
    where: VerificationCodeWhereUniqueInput
  }

  /**
   * VerificationCode deleteMany
   */
  export type VerificationCodeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationCodes to delete
     */
    where?: VerificationCodeWhereInput
  }

  /**
   * VerificationCode without action
   */
  export type VerificationCodeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationCode
     */
    select?: VerificationCodeSelect<ExtArgs> | null
  }


  /**
   * Model LoginLog
   */

  export type AggregateLoginLog = {
    _count: LoginLogCountAggregateOutputType | null
    _min: LoginLogMinAggregateOutputType | null
    _max: LoginLogMaxAggregateOutputType | null
  }

  export type LoginLogMinAggregateOutputType = {
    id: string | null
    ipAddress: string | null
    userAgent: string | null
    loginMethod: string | null
    status: string | null
    failReason: string | null
    loginTime: Date | null
    userId: string | null
  }

  export type LoginLogMaxAggregateOutputType = {
    id: string | null
    ipAddress: string | null
    userAgent: string | null
    loginMethod: string | null
    status: string | null
    failReason: string | null
    loginTime: Date | null
    userId: string | null
  }

  export type LoginLogCountAggregateOutputType = {
    id: number
    ipAddress: number
    userAgent: number
    loginMethod: number
    status: number
    failReason: number
    loginTime: number
    userId: number
    _all: number
  }


  export type LoginLogMinAggregateInputType = {
    id?: true
    ipAddress?: true
    userAgent?: true
    loginMethod?: true
    status?: true
    failReason?: true
    loginTime?: true
    userId?: true
  }

  export type LoginLogMaxAggregateInputType = {
    id?: true
    ipAddress?: true
    userAgent?: true
    loginMethod?: true
    status?: true
    failReason?: true
    loginTime?: true
    userId?: true
  }

  export type LoginLogCountAggregateInputType = {
    id?: true
    ipAddress?: true
    userAgent?: true
    loginMethod?: true
    status?: true
    failReason?: true
    loginTime?: true
    userId?: true
    _all?: true
  }

  export type LoginLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LoginLog to aggregate.
     */
    where?: LoginLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoginLogs to fetch.
     */
    orderBy?: LoginLogOrderByWithRelationInput | LoginLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LoginLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoginLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoginLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LoginLogs
    **/
    _count?: true | LoginLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LoginLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LoginLogMaxAggregateInputType
  }

  export type GetLoginLogAggregateType<T extends LoginLogAggregateArgs> = {
        [P in keyof T & keyof AggregateLoginLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLoginLog[P]>
      : GetScalarType<T[P], AggregateLoginLog[P]>
  }




  export type LoginLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoginLogWhereInput
    orderBy?: LoginLogOrderByWithAggregationInput | LoginLogOrderByWithAggregationInput[]
    by: LoginLogScalarFieldEnum[] | LoginLogScalarFieldEnum
    having?: LoginLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LoginLogCountAggregateInputType | true
    _min?: LoginLogMinAggregateInputType
    _max?: LoginLogMaxAggregateInputType
  }

  export type LoginLogGroupByOutputType = {
    id: string
    ipAddress: string | null
    userAgent: string | null
    loginMethod: string
    status: string
    failReason: string | null
    loginTime: Date
    userId: string | null
    _count: LoginLogCountAggregateOutputType | null
    _min: LoginLogMinAggregateOutputType | null
    _max: LoginLogMaxAggregateOutputType | null
  }

  type GetLoginLogGroupByPayload<T extends LoginLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LoginLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LoginLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LoginLogGroupByOutputType[P]>
            : GetScalarType<T[P], LoginLogGroupByOutputType[P]>
        }
      >
    >


  export type LoginLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    loginMethod?: boolean
    status?: boolean
    failReason?: boolean
    loginTime?: boolean
    userId?: boolean
    user?: boolean | LoginLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["loginLog"]>


  export type LoginLogSelectScalar = {
    id?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    loginMethod?: boolean
    status?: boolean
    failReason?: boolean
    loginTime?: boolean
    userId?: boolean
  }

  export type LoginLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | LoginLog$userArgs<ExtArgs>
  }

  export type $LoginLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LoginLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      ipAddress: string | null
      userAgent: string | null
      loginMethod: string
      status: string
      failReason: string | null
      loginTime: Date
      userId: string | null
    }, ExtArgs["result"]["loginLog"]>
    composites: {}
  }

  type LoginLogGetPayload<S extends boolean | null | undefined | LoginLogDefaultArgs> = $Result.GetResult<Prisma.$LoginLogPayload, S>

  type LoginLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LoginLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LoginLogCountAggregateInputType | true
    }

  export interface LoginLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LoginLog'], meta: { name: 'LoginLog' } }
    /**
     * Find zero or one LoginLog that matches the filter.
     * @param {LoginLogFindUniqueArgs} args - Arguments to find a LoginLog
     * @example
     * // Get one LoginLog
     * const loginLog = await prisma.loginLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LoginLogFindUniqueArgs>(args: SelectSubset<T, LoginLogFindUniqueArgs<ExtArgs>>): Prisma__LoginLogClient<$Result.GetResult<Prisma.$LoginLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one LoginLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LoginLogFindUniqueOrThrowArgs} args - Arguments to find a LoginLog
     * @example
     * // Get one LoginLog
     * const loginLog = await prisma.loginLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LoginLogFindUniqueOrThrowArgs>(args: SelectSubset<T, LoginLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LoginLogClient<$Result.GetResult<Prisma.$LoginLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first LoginLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginLogFindFirstArgs} args - Arguments to find a LoginLog
     * @example
     * // Get one LoginLog
     * const loginLog = await prisma.loginLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LoginLogFindFirstArgs>(args?: SelectSubset<T, LoginLogFindFirstArgs<ExtArgs>>): Prisma__LoginLogClient<$Result.GetResult<Prisma.$LoginLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first LoginLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginLogFindFirstOrThrowArgs} args - Arguments to find a LoginLog
     * @example
     * // Get one LoginLog
     * const loginLog = await prisma.loginLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LoginLogFindFirstOrThrowArgs>(args?: SelectSubset<T, LoginLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__LoginLogClient<$Result.GetResult<Prisma.$LoginLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more LoginLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LoginLogs
     * const loginLogs = await prisma.loginLog.findMany()
     * 
     * // Get first 10 LoginLogs
     * const loginLogs = await prisma.loginLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const loginLogWithIdOnly = await prisma.loginLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LoginLogFindManyArgs>(args?: SelectSubset<T, LoginLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoginLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a LoginLog.
     * @param {LoginLogCreateArgs} args - Arguments to create a LoginLog.
     * @example
     * // Create one LoginLog
     * const LoginLog = await prisma.loginLog.create({
     *   data: {
     *     // ... data to create a LoginLog
     *   }
     * })
     * 
     */
    create<T extends LoginLogCreateArgs>(args: SelectSubset<T, LoginLogCreateArgs<ExtArgs>>): Prisma__LoginLogClient<$Result.GetResult<Prisma.$LoginLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many LoginLogs.
     * @param {LoginLogCreateManyArgs} args - Arguments to create many LoginLogs.
     * @example
     * // Create many LoginLogs
     * const loginLog = await prisma.loginLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LoginLogCreateManyArgs>(args?: SelectSubset<T, LoginLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LoginLog.
     * @param {LoginLogDeleteArgs} args - Arguments to delete one LoginLog.
     * @example
     * // Delete one LoginLog
     * const LoginLog = await prisma.loginLog.delete({
     *   where: {
     *     // ... filter to delete one LoginLog
     *   }
     * })
     * 
     */
    delete<T extends LoginLogDeleteArgs>(args: SelectSubset<T, LoginLogDeleteArgs<ExtArgs>>): Prisma__LoginLogClient<$Result.GetResult<Prisma.$LoginLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one LoginLog.
     * @param {LoginLogUpdateArgs} args - Arguments to update one LoginLog.
     * @example
     * // Update one LoginLog
     * const loginLog = await prisma.loginLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LoginLogUpdateArgs>(args: SelectSubset<T, LoginLogUpdateArgs<ExtArgs>>): Prisma__LoginLogClient<$Result.GetResult<Prisma.$LoginLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more LoginLogs.
     * @param {LoginLogDeleteManyArgs} args - Arguments to filter LoginLogs to delete.
     * @example
     * // Delete a few LoginLogs
     * const { count } = await prisma.loginLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LoginLogDeleteManyArgs>(args?: SelectSubset<T, LoginLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LoginLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LoginLogs
     * const loginLog = await prisma.loginLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LoginLogUpdateManyArgs>(args: SelectSubset<T, LoginLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LoginLog.
     * @param {LoginLogUpsertArgs} args - Arguments to update or create a LoginLog.
     * @example
     * // Update or create a LoginLog
     * const loginLog = await prisma.loginLog.upsert({
     *   create: {
     *     // ... data to create a LoginLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LoginLog we want to update
     *   }
     * })
     */
    upsert<T extends LoginLogUpsertArgs>(args: SelectSubset<T, LoginLogUpsertArgs<ExtArgs>>): Prisma__LoginLogClient<$Result.GetResult<Prisma.$LoginLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of LoginLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginLogCountArgs} args - Arguments to filter LoginLogs to count.
     * @example
     * // Count the number of LoginLogs
     * const count = await prisma.loginLog.count({
     *   where: {
     *     // ... the filter for the LoginLogs we want to count
     *   }
     * })
    **/
    count<T extends LoginLogCountArgs>(
      args?: Subset<T, LoginLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LoginLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LoginLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LoginLogAggregateArgs>(args: Subset<T, LoginLogAggregateArgs>): Prisma.PrismaPromise<GetLoginLogAggregateType<T>>

    /**
     * Group by LoginLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LoginLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LoginLogGroupByArgs['orderBy'] }
        : { orderBy?: LoginLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LoginLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLoginLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LoginLog model
   */
  readonly fields: LoginLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LoginLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LoginLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends LoginLog$userArgs<ExtArgs> = {}>(args?: Subset<T, LoginLog$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LoginLog model
   */ 
  interface LoginLogFieldRefs {
    readonly id: FieldRef<"LoginLog", 'String'>
    readonly ipAddress: FieldRef<"LoginLog", 'String'>
    readonly userAgent: FieldRef<"LoginLog", 'String'>
    readonly loginMethod: FieldRef<"LoginLog", 'String'>
    readonly status: FieldRef<"LoginLog", 'String'>
    readonly failReason: FieldRef<"LoginLog", 'String'>
    readonly loginTime: FieldRef<"LoginLog", 'DateTime'>
    readonly userId: FieldRef<"LoginLog", 'String'>
  }
    

  // Custom InputTypes
  /**
   * LoginLog findUnique
   */
  export type LoginLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginLog
     */
    select?: LoginLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginLogInclude<ExtArgs> | null
    /**
     * Filter, which LoginLog to fetch.
     */
    where: LoginLogWhereUniqueInput
  }

  /**
   * LoginLog findUniqueOrThrow
   */
  export type LoginLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginLog
     */
    select?: LoginLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginLogInclude<ExtArgs> | null
    /**
     * Filter, which LoginLog to fetch.
     */
    where: LoginLogWhereUniqueInput
  }

  /**
   * LoginLog findFirst
   */
  export type LoginLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginLog
     */
    select?: LoginLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginLogInclude<ExtArgs> | null
    /**
     * Filter, which LoginLog to fetch.
     */
    where?: LoginLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoginLogs to fetch.
     */
    orderBy?: LoginLogOrderByWithRelationInput | LoginLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LoginLogs.
     */
    cursor?: LoginLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoginLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoginLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LoginLogs.
     */
    distinct?: LoginLogScalarFieldEnum | LoginLogScalarFieldEnum[]
  }

  /**
   * LoginLog findFirstOrThrow
   */
  export type LoginLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginLog
     */
    select?: LoginLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginLogInclude<ExtArgs> | null
    /**
     * Filter, which LoginLog to fetch.
     */
    where?: LoginLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoginLogs to fetch.
     */
    orderBy?: LoginLogOrderByWithRelationInput | LoginLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LoginLogs.
     */
    cursor?: LoginLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoginLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoginLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LoginLogs.
     */
    distinct?: LoginLogScalarFieldEnum | LoginLogScalarFieldEnum[]
  }

  /**
   * LoginLog findMany
   */
  export type LoginLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginLog
     */
    select?: LoginLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginLogInclude<ExtArgs> | null
    /**
     * Filter, which LoginLogs to fetch.
     */
    where?: LoginLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoginLogs to fetch.
     */
    orderBy?: LoginLogOrderByWithRelationInput | LoginLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LoginLogs.
     */
    cursor?: LoginLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoginLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoginLogs.
     */
    skip?: number
    distinct?: LoginLogScalarFieldEnum | LoginLogScalarFieldEnum[]
  }

  /**
   * LoginLog create
   */
  export type LoginLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginLog
     */
    select?: LoginLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginLogInclude<ExtArgs> | null
    /**
     * The data needed to create a LoginLog.
     */
    data: XOR<LoginLogCreateInput, LoginLogUncheckedCreateInput>
  }

  /**
   * LoginLog createMany
   */
  export type LoginLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LoginLogs.
     */
    data: LoginLogCreateManyInput | LoginLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LoginLog update
   */
  export type LoginLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginLog
     */
    select?: LoginLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginLogInclude<ExtArgs> | null
    /**
     * The data needed to update a LoginLog.
     */
    data: XOR<LoginLogUpdateInput, LoginLogUncheckedUpdateInput>
    /**
     * Choose, which LoginLog to update.
     */
    where: LoginLogWhereUniqueInput
  }

  /**
   * LoginLog updateMany
   */
  export type LoginLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LoginLogs.
     */
    data: XOR<LoginLogUpdateManyMutationInput, LoginLogUncheckedUpdateManyInput>
    /**
     * Filter which LoginLogs to update
     */
    where?: LoginLogWhereInput
  }

  /**
   * LoginLog upsert
   */
  export type LoginLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginLog
     */
    select?: LoginLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginLogInclude<ExtArgs> | null
    /**
     * The filter to search for the LoginLog to update in case it exists.
     */
    where: LoginLogWhereUniqueInput
    /**
     * In case the LoginLog found by the `where` argument doesn't exist, create a new LoginLog with this data.
     */
    create: XOR<LoginLogCreateInput, LoginLogUncheckedCreateInput>
    /**
     * In case the LoginLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LoginLogUpdateInput, LoginLogUncheckedUpdateInput>
  }

  /**
   * LoginLog delete
   */
  export type LoginLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginLog
     */
    select?: LoginLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginLogInclude<ExtArgs> | null
    /**
     * Filter which LoginLog to delete.
     */
    where: LoginLogWhereUniqueInput
  }

  /**
   * LoginLog deleteMany
   */
  export type LoginLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LoginLogs to delete
     */
    where?: LoginLogWhereInput
  }

  /**
   * LoginLog.user
   */
  export type LoginLog$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * LoginLog without action
   */
  export type LoginLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginLog
     */
    select?: LoginLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginLogInclude<ExtArgs> | null
  }


  /**
   * Model Feedback
   */

  export type AggregateFeedback = {
    _count: FeedbackCountAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  export type FeedbackMinAggregateOutputType = {
    id: string | null
    type: string | null
    title: string | null
    content: string | null
    contact: string | null
    images: string | null
    platform: string | null
    version: string | null
    deviceInfo: string | null
    ipAddress: string | null
    userAgent: string | null
    status: string | null
    processedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type FeedbackMaxAggregateOutputType = {
    id: string | null
    type: string | null
    title: string | null
    content: string | null
    contact: string | null
    images: string | null
    platform: string | null
    version: string | null
    deviceInfo: string | null
    ipAddress: string | null
    userAgent: string | null
    status: string | null
    processedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type FeedbackCountAggregateOutputType = {
    id: number
    type: number
    title: number
    content: number
    contact: number
    images: number
    platform: number
    version: number
    deviceInfo: number
    ipAddress: number
    userAgent: number
    status: number
    processedAt: number
    createdAt: number
    updatedAt: number
    userId: number
    _all: number
  }


  export type FeedbackMinAggregateInputType = {
    id?: true
    type?: true
    title?: true
    content?: true
    contact?: true
    images?: true
    platform?: true
    version?: true
    deviceInfo?: true
    ipAddress?: true
    userAgent?: true
    status?: true
    processedAt?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type FeedbackMaxAggregateInputType = {
    id?: true
    type?: true
    title?: true
    content?: true
    contact?: true
    images?: true
    platform?: true
    version?: true
    deviceInfo?: true
    ipAddress?: true
    userAgent?: true
    status?: true
    processedAt?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type FeedbackCountAggregateInputType = {
    id?: true
    type?: true
    title?: true
    content?: true
    contact?: true
    images?: true
    platform?: true
    version?: true
    deviceInfo?: true
    ipAddress?: true
    userAgent?: true
    status?: true
    processedAt?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    _all?: true
  }

  export type FeedbackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedback to aggregate.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Feedbacks
    **/
    _count?: true | FeedbackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedbackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedbackMaxAggregateInputType
  }

  export type GetFeedbackAggregateType<T extends FeedbackAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedback]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedback[P]>
      : GetScalarType<T[P], AggregateFeedback[P]>
  }




  export type FeedbackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithAggregationInput | FeedbackOrderByWithAggregationInput[]
    by: FeedbackScalarFieldEnum[] | FeedbackScalarFieldEnum
    having?: FeedbackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedbackCountAggregateInputType | true
    _min?: FeedbackMinAggregateInputType
    _max?: FeedbackMaxAggregateInputType
  }

  export type FeedbackGroupByOutputType = {
    id: string
    type: string
    title: string
    content: string
    contact: string | null
    images: string | null
    platform: string
    version: string | null
    deviceInfo: string | null
    ipAddress: string | null
    userAgent: string | null
    status: string
    processedAt: Date | null
    createdAt: Date
    updatedAt: Date
    userId: string
    _count: FeedbackCountAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  type GetFeedbackGroupByPayload<T extends FeedbackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedbackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedbackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
            : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
        }
      >
    >


  export type FeedbackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    title?: boolean
    content?: boolean
    contact?: boolean
    images?: boolean
    platform?: boolean
    version?: boolean
    deviceInfo?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    status?: boolean
    processedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    reply?: boolean | Feedback$replyArgs<ExtArgs>
    _count?: boolean | FeedbackCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>


  export type FeedbackSelectScalar = {
    id?: boolean
    type?: boolean
    title?: boolean
    content?: boolean
    contact?: boolean
    images?: boolean
    platform?: boolean
    version?: boolean
    deviceInfo?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    status?: boolean
    processedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
  }

  export type FeedbackInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    reply?: boolean | Feedback$replyArgs<ExtArgs>
    _count?: boolean | FeedbackCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $FeedbackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Feedback"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      reply: Prisma.$FeedbackReplyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      title: string
      content: string
      contact: string | null
      images: string | null
      platform: string
      version: string | null
      deviceInfo: string | null
      ipAddress: string | null
      userAgent: string | null
      status: string
      processedAt: Date | null
      createdAt: Date
      updatedAt: Date
      userId: string
    }, ExtArgs["result"]["feedback"]>
    composites: {}
  }

  type FeedbackGetPayload<S extends boolean | null | undefined | FeedbackDefaultArgs> = $Result.GetResult<Prisma.$FeedbackPayload, S>

  type FeedbackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FeedbackFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FeedbackCountAggregateInputType | true
    }

  export interface FeedbackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Feedback'], meta: { name: 'Feedback' } }
    /**
     * Find zero or one Feedback that matches the filter.
     * @param {FeedbackFindUniqueArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeedbackFindUniqueArgs>(args: SelectSubset<T, FeedbackFindUniqueArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Feedback that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FeedbackFindUniqueOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeedbackFindUniqueOrThrowArgs>(args: SelectSubset<T, FeedbackFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Feedback that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeedbackFindFirstArgs>(args?: SelectSubset<T, FeedbackFindFirstArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Feedback that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeedbackFindFirstOrThrowArgs>(args?: SelectSubset<T, FeedbackFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Feedbacks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Feedbacks
     * const feedbacks = await prisma.feedback.findMany()
     * 
     * // Get first 10 Feedbacks
     * const feedbacks = await prisma.feedback.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feedbackWithIdOnly = await prisma.feedback.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FeedbackFindManyArgs>(args?: SelectSubset<T, FeedbackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Feedback.
     * @param {FeedbackCreateArgs} args - Arguments to create a Feedback.
     * @example
     * // Create one Feedback
     * const Feedback = await prisma.feedback.create({
     *   data: {
     *     // ... data to create a Feedback
     *   }
     * })
     * 
     */
    create<T extends FeedbackCreateArgs>(args: SelectSubset<T, FeedbackCreateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Feedbacks.
     * @param {FeedbackCreateManyArgs} args - Arguments to create many Feedbacks.
     * @example
     * // Create many Feedbacks
     * const feedback = await prisma.feedback.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeedbackCreateManyArgs>(args?: SelectSubset<T, FeedbackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Feedback.
     * @param {FeedbackDeleteArgs} args - Arguments to delete one Feedback.
     * @example
     * // Delete one Feedback
     * const Feedback = await prisma.feedback.delete({
     *   where: {
     *     // ... filter to delete one Feedback
     *   }
     * })
     * 
     */
    delete<T extends FeedbackDeleteArgs>(args: SelectSubset<T, FeedbackDeleteArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Feedback.
     * @param {FeedbackUpdateArgs} args - Arguments to update one Feedback.
     * @example
     * // Update one Feedback
     * const feedback = await prisma.feedback.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeedbackUpdateArgs>(args: SelectSubset<T, FeedbackUpdateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Feedbacks.
     * @param {FeedbackDeleteManyArgs} args - Arguments to filter Feedbacks to delete.
     * @example
     * // Delete a few Feedbacks
     * const { count } = await prisma.feedback.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeedbackDeleteManyArgs>(args?: SelectSubset<T, FeedbackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Feedbacks
     * const feedback = await prisma.feedback.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeedbackUpdateManyArgs>(args: SelectSubset<T, FeedbackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Feedback.
     * @param {FeedbackUpsertArgs} args - Arguments to update or create a Feedback.
     * @example
     * // Update or create a Feedback
     * const feedback = await prisma.feedback.upsert({
     *   create: {
     *     // ... data to create a Feedback
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Feedback we want to update
     *   }
     * })
     */
    upsert<T extends FeedbackUpsertArgs>(args: SelectSubset<T, FeedbackUpsertArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackCountArgs} args - Arguments to filter Feedbacks to count.
     * @example
     * // Count the number of Feedbacks
     * const count = await prisma.feedback.count({
     *   where: {
     *     // ... the filter for the Feedbacks we want to count
     *   }
     * })
    **/
    count<T extends FeedbackCountArgs>(
      args?: Subset<T, FeedbackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedbackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedbackAggregateArgs>(args: Subset<T, FeedbackAggregateArgs>): Prisma.PrismaPromise<GetFeedbackAggregateType<T>>

    /**
     * Group by Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeedbackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedbackGroupByArgs['orderBy'] }
        : { orderBy?: FeedbackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeedbackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedbackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Feedback model
   */
  readonly fields: FeedbackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Feedback.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeedbackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    reply<T extends Feedback$replyArgs<ExtArgs> = {}>(args?: Subset<T, Feedback$replyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackReplyPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Feedback model
   */ 
  interface FeedbackFieldRefs {
    readonly id: FieldRef<"Feedback", 'String'>
    readonly type: FieldRef<"Feedback", 'String'>
    readonly title: FieldRef<"Feedback", 'String'>
    readonly content: FieldRef<"Feedback", 'String'>
    readonly contact: FieldRef<"Feedback", 'String'>
    readonly images: FieldRef<"Feedback", 'String'>
    readonly platform: FieldRef<"Feedback", 'String'>
    readonly version: FieldRef<"Feedback", 'String'>
    readonly deviceInfo: FieldRef<"Feedback", 'String'>
    readonly ipAddress: FieldRef<"Feedback", 'String'>
    readonly userAgent: FieldRef<"Feedback", 'String'>
    readonly status: FieldRef<"Feedback", 'String'>
    readonly processedAt: FieldRef<"Feedback", 'DateTime'>
    readonly createdAt: FieldRef<"Feedback", 'DateTime'>
    readonly updatedAt: FieldRef<"Feedback", 'DateTime'>
    readonly userId: FieldRef<"Feedback", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Feedback findUnique
   */
  export type FeedbackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findUniqueOrThrow
   */
  export type FeedbackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findFirst
   */
  export type FeedbackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findFirstOrThrow
   */
  export type FeedbackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findMany
   */
  export type FeedbackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedbacks to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback create
   */
  export type FeedbackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to create a Feedback.
     */
    data: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
  }

  /**
   * Feedback createMany
   */
  export type FeedbackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Feedback update
   */
  export type FeedbackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to update a Feedback.
     */
    data: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
    /**
     * Choose, which Feedback to update.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback updateMany
   */
  export type FeedbackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Feedbacks.
     */
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyInput>
    /**
     * Filter which Feedbacks to update
     */
    where?: FeedbackWhereInput
  }

  /**
   * Feedback upsert
   */
  export type FeedbackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The filter to search for the Feedback to update in case it exists.
     */
    where: FeedbackWhereUniqueInput
    /**
     * In case the Feedback found by the `where` argument doesn't exist, create a new Feedback with this data.
     */
    create: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
    /**
     * In case the Feedback was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
  }

  /**
   * Feedback delete
   */
  export type FeedbackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter which Feedback to delete.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback deleteMany
   */
  export type FeedbackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedbacks to delete
     */
    where?: FeedbackWhereInput
  }

  /**
   * Feedback.reply
   */
  export type Feedback$replyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackReply
     */
    select?: FeedbackReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackReplyInclude<ExtArgs> | null
    where?: FeedbackReplyWhereInput
    orderBy?: FeedbackReplyOrderByWithRelationInput | FeedbackReplyOrderByWithRelationInput[]
    cursor?: FeedbackReplyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackReplyScalarFieldEnum | FeedbackReplyScalarFieldEnum[]
  }

  /**
   * Feedback without action
   */
  export type FeedbackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
  }


  /**
   * Model FeedbackReply
   */

  export type AggregateFeedbackReply = {
    _count: FeedbackReplyCountAggregateOutputType | null
    _min: FeedbackReplyMinAggregateOutputType | null
    _max: FeedbackReplyMaxAggregateOutputType | null
  }

  export type FeedbackReplyMinAggregateOutputType = {
    id: string | null
    content: string | null
    createdAt: Date | null
    feedbackId: string | null
    adminId: string | null
  }

  export type FeedbackReplyMaxAggregateOutputType = {
    id: string | null
    content: string | null
    createdAt: Date | null
    feedbackId: string | null
    adminId: string | null
  }

  export type FeedbackReplyCountAggregateOutputType = {
    id: number
    content: number
    createdAt: number
    feedbackId: number
    adminId: number
    _all: number
  }


  export type FeedbackReplyMinAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    feedbackId?: true
    adminId?: true
  }

  export type FeedbackReplyMaxAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    feedbackId?: true
    adminId?: true
  }

  export type FeedbackReplyCountAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    feedbackId?: true
    adminId?: true
    _all?: true
  }

  export type FeedbackReplyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeedbackReply to aggregate.
     */
    where?: FeedbackReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedbackReplies to fetch.
     */
    orderBy?: FeedbackReplyOrderByWithRelationInput | FeedbackReplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeedbackReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedbackReplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedbackReplies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FeedbackReplies
    **/
    _count?: true | FeedbackReplyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedbackReplyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedbackReplyMaxAggregateInputType
  }

  export type GetFeedbackReplyAggregateType<T extends FeedbackReplyAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedbackReply]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedbackReply[P]>
      : GetScalarType<T[P], AggregateFeedbackReply[P]>
  }




  export type FeedbackReplyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackReplyWhereInput
    orderBy?: FeedbackReplyOrderByWithAggregationInput | FeedbackReplyOrderByWithAggregationInput[]
    by: FeedbackReplyScalarFieldEnum[] | FeedbackReplyScalarFieldEnum
    having?: FeedbackReplyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedbackReplyCountAggregateInputType | true
    _min?: FeedbackReplyMinAggregateInputType
    _max?: FeedbackReplyMaxAggregateInputType
  }

  export type FeedbackReplyGroupByOutputType = {
    id: string
    content: string
    createdAt: Date
    feedbackId: string
    adminId: string
    _count: FeedbackReplyCountAggregateOutputType | null
    _min: FeedbackReplyMinAggregateOutputType | null
    _max: FeedbackReplyMaxAggregateOutputType | null
  }

  type GetFeedbackReplyGroupByPayload<T extends FeedbackReplyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedbackReplyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedbackReplyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedbackReplyGroupByOutputType[P]>
            : GetScalarType<T[P], FeedbackReplyGroupByOutputType[P]>
        }
      >
    >


  export type FeedbackReplySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    feedbackId?: boolean
    adminId?: boolean
    feedback?: boolean | FeedbackDefaultArgs<ExtArgs>
    admin?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedbackReply"]>


  export type FeedbackReplySelectScalar = {
    id?: boolean
    content?: boolean
    createdAt?: boolean
    feedbackId?: boolean
    adminId?: boolean
  }

  export type FeedbackReplyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feedback?: boolean | FeedbackDefaultArgs<ExtArgs>
    admin?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FeedbackReplyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FeedbackReply"
    objects: {
      feedback: Prisma.$FeedbackPayload<ExtArgs>
      admin: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string
      createdAt: Date
      feedbackId: string
      adminId: string
    }, ExtArgs["result"]["feedbackReply"]>
    composites: {}
  }

  type FeedbackReplyGetPayload<S extends boolean | null | undefined | FeedbackReplyDefaultArgs> = $Result.GetResult<Prisma.$FeedbackReplyPayload, S>

  type FeedbackReplyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FeedbackReplyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FeedbackReplyCountAggregateInputType | true
    }

  export interface FeedbackReplyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FeedbackReply'], meta: { name: 'FeedbackReply' } }
    /**
     * Find zero or one FeedbackReply that matches the filter.
     * @param {FeedbackReplyFindUniqueArgs} args - Arguments to find a FeedbackReply
     * @example
     * // Get one FeedbackReply
     * const feedbackReply = await prisma.feedbackReply.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeedbackReplyFindUniqueArgs>(args: SelectSubset<T, FeedbackReplyFindUniqueArgs<ExtArgs>>): Prisma__FeedbackReplyClient<$Result.GetResult<Prisma.$FeedbackReplyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FeedbackReply that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FeedbackReplyFindUniqueOrThrowArgs} args - Arguments to find a FeedbackReply
     * @example
     * // Get one FeedbackReply
     * const feedbackReply = await prisma.feedbackReply.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeedbackReplyFindUniqueOrThrowArgs>(args: SelectSubset<T, FeedbackReplyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeedbackReplyClient<$Result.GetResult<Prisma.$FeedbackReplyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FeedbackReply that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackReplyFindFirstArgs} args - Arguments to find a FeedbackReply
     * @example
     * // Get one FeedbackReply
     * const feedbackReply = await prisma.feedbackReply.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeedbackReplyFindFirstArgs>(args?: SelectSubset<T, FeedbackReplyFindFirstArgs<ExtArgs>>): Prisma__FeedbackReplyClient<$Result.GetResult<Prisma.$FeedbackReplyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FeedbackReply that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackReplyFindFirstOrThrowArgs} args - Arguments to find a FeedbackReply
     * @example
     * // Get one FeedbackReply
     * const feedbackReply = await prisma.feedbackReply.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeedbackReplyFindFirstOrThrowArgs>(args?: SelectSubset<T, FeedbackReplyFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeedbackReplyClient<$Result.GetResult<Prisma.$FeedbackReplyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FeedbackReplies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackReplyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FeedbackReplies
     * const feedbackReplies = await prisma.feedbackReply.findMany()
     * 
     * // Get first 10 FeedbackReplies
     * const feedbackReplies = await prisma.feedbackReply.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feedbackReplyWithIdOnly = await prisma.feedbackReply.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FeedbackReplyFindManyArgs>(args?: SelectSubset<T, FeedbackReplyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackReplyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FeedbackReply.
     * @param {FeedbackReplyCreateArgs} args - Arguments to create a FeedbackReply.
     * @example
     * // Create one FeedbackReply
     * const FeedbackReply = await prisma.feedbackReply.create({
     *   data: {
     *     // ... data to create a FeedbackReply
     *   }
     * })
     * 
     */
    create<T extends FeedbackReplyCreateArgs>(args: SelectSubset<T, FeedbackReplyCreateArgs<ExtArgs>>): Prisma__FeedbackReplyClient<$Result.GetResult<Prisma.$FeedbackReplyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FeedbackReplies.
     * @param {FeedbackReplyCreateManyArgs} args - Arguments to create many FeedbackReplies.
     * @example
     * // Create many FeedbackReplies
     * const feedbackReply = await prisma.feedbackReply.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeedbackReplyCreateManyArgs>(args?: SelectSubset<T, FeedbackReplyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FeedbackReply.
     * @param {FeedbackReplyDeleteArgs} args - Arguments to delete one FeedbackReply.
     * @example
     * // Delete one FeedbackReply
     * const FeedbackReply = await prisma.feedbackReply.delete({
     *   where: {
     *     // ... filter to delete one FeedbackReply
     *   }
     * })
     * 
     */
    delete<T extends FeedbackReplyDeleteArgs>(args: SelectSubset<T, FeedbackReplyDeleteArgs<ExtArgs>>): Prisma__FeedbackReplyClient<$Result.GetResult<Prisma.$FeedbackReplyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FeedbackReply.
     * @param {FeedbackReplyUpdateArgs} args - Arguments to update one FeedbackReply.
     * @example
     * // Update one FeedbackReply
     * const feedbackReply = await prisma.feedbackReply.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeedbackReplyUpdateArgs>(args: SelectSubset<T, FeedbackReplyUpdateArgs<ExtArgs>>): Prisma__FeedbackReplyClient<$Result.GetResult<Prisma.$FeedbackReplyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FeedbackReplies.
     * @param {FeedbackReplyDeleteManyArgs} args - Arguments to filter FeedbackReplies to delete.
     * @example
     * // Delete a few FeedbackReplies
     * const { count } = await prisma.feedbackReply.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeedbackReplyDeleteManyArgs>(args?: SelectSubset<T, FeedbackReplyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeedbackReplies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackReplyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FeedbackReplies
     * const feedbackReply = await prisma.feedbackReply.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeedbackReplyUpdateManyArgs>(args: SelectSubset<T, FeedbackReplyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FeedbackReply.
     * @param {FeedbackReplyUpsertArgs} args - Arguments to update or create a FeedbackReply.
     * @example
     * // Update or create a FeedbackReply
     * const feedbackReply = await prisma.feedbackReply.upsert({
     *   create: {
     *     // ... data to create a FeedbackReply
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FeedbackReply we want to update
     *   }
     * })
     */
    upsert<T extends FeedbackReplyUpsertArgs>(args: SelectSubset<T, FeedbackReplyUpsertArgs<ExtArgs>>): Prisma__FeedbackReplyClient<$Result.GetResult<Prisma.$FeedbackReplyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FeedbackReplies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackReplyCountArgs} args - Arguments to filter FeedbackReplies to count.
     * @example
     * // Count the number of FeedbackReplies
     * const count = await prisma.feedbackReply.count({
     *   where: {
     *     // ... the filter for the FeedbackReplies we want to count
     *   }
     * })
    **/
    count<T extends FeedbackReplyCountArgs>(
      args?: Subset<T, FeedbackReplyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedbackReplyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FeedbackReply.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackReplyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedbackReplyAggregateArgs>(args: Subset<T, FeedbackReplyAggregateArgs>): Prisma.PrismaPromise<GetFeedbackReplyAggregateType<T>>

    /**
     * Group by FeedbackReply.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackReplyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeedbackReplyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedbackReplyGroupByArgs['orderBy'] }
        : { orderBy?: FeedbackReplyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeedbackReplyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedbackReplyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FeedbackReply model
   */
  readonly fields: FeedbackReplyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FeedbackReply.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeedbackReplyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    feedback<T extends FeedbackDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FeedbackDefaultArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    admin<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FeedbackReply model
   */ 
  interface FeedbackReplyFieldRefs {
    readonly id: FieldRef<"FeedbackReply", 'String'>
    readonly content: FieldRef<"FeedbackReply", 'String'>
    readonly createdAt: FieldRef<"FeedbackReply", 'DateTime'>
    readonly feedbackId: FieldRef<"FeedbackReply", 'String'>
    readonly adminId: FieldRef<"FeedbackReply", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FeedbackReply findUnique
   */
  export type FeedbackReplyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackReply
     */
    select?: FeedbackReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackReplyInclude<ExtArgs> | null
    /**
     * Filter, which FeedbackReply to fetch.
     */
    where: FeedbackReplyWhereUniqueInput
  }

  /**
   * FeedbackReply findUniqueOrThrow
   */
  export type FeedbackReplyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackReply
     */
    select?: FeedbackReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackReplyInclude<ExtArgs> | null
    /**
     * Filter, which FeedbackReply to fetch.
     */
    where: FeedbackReplyWhereUniqueInput
  }

  /**
   * FeedbackReply findFirst
   */
  export type FeedbackReplyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackReply
     */
    select?: FeedbackReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackReplyInclude<ExtArgs> | null
    /**
     * Filter, which FeedbackReply to fetch.
     */
    where?: FeedbackReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedbackReplies to fetch.
     */
    orderBy?: FeedbackReplyOrderByWithRelationInput | FeedbackReplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeedbackReplies.
     */
    cursor?: FeedbackReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedbackReplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedbackReplies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeedbackReplies.
     */
    distinct?: FeedbackReplyScalarFieldEnum | FeedbackReplyScalarFieldEnum[]
  }

  /**
   * FeedbackReply findFirstOrThrow
   */
  export type FeedbackReplyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackReply
     */
    select?: FeedbackReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackReplyInclude<ExtArgs> | null
    /**
     * Filter, which FeedbackReply to fetch.
     */
    where?: FeedbackReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedbackReplies to fetch.
     */
    orderBy?: FeedbackReplyOrderByWithRelationInput | FeedbackReplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeedbackReplies.
     */
    cursor?: FeedbackReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedbackReplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedbackReplies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeedbackReplies.
     */
    distinct?: FeedbackReplyScalarFieldEnum | FeedbackReplyScalarFieldEnum[]
  }

  /**
   * FeedbackReply findMany
   */
  export type FeedbackReplyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackReply
     */
    select?: FeedbackReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackReplyInclude<ExtArgs> | null
    /**
     * Filter, which FeedbackReplies to fetch.
     */
    where?: FeedbackReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedbackReplies to fetch.
     */
    orderBy?: FeedbackReplyOrderByWithRelationInput | FeedbackReplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FeedbackReplies.
     */
    cursor?: FeedbackReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedbackReplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedbackReplies.
     */
    skip?: number
    distinct?: FeedbackReplyScalarFieldEnum | FeedbackReplyScalarFieldEnum[]
  }

  /**
   * FeedbackReply create
   */
  export type FeedbackReplyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackReply
     */
    select?: FeedbackReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackReplyInclude<ExtArgs> | null
    /**
     * The data needed to create a FeedbackReply.
     */
    data: XOR<FeedbackReplyCreateInput, FeedbackReplyUncheckedCreateInput>
  }

  /**
   * FeedbackReply createMany
   */
  export type FeedbackReplyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FeedbackReplies.
     */
    data: FeedbackReplyCreateManyInput | FeedbackReplyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FeedbackReply update
   */
  export type FeedbackReplyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackReply
     */
    select?: FeedbackReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackReplyInclude<ExtArgs> | null
    /**
     * The data needed to update a FeedbackReply.
     */
    data: XOR<FeedbackReplyUpdateInput, FeedbackReplyUncheckedUpdateInput>
    /**
     * Choose, which FeedbackReply to update.
     */
    where: FeedbackReplyWhereUniqueInput
  }

  /**
   * FeedbackReply updateMany
   */
  export type FeedbackReplyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FeedbackReplies.
     */
    data: XOR<FeedbackReplyUpdateManyMutationInput, FeedbackReplyUncheckedUpdateManyInput>
    /**
     * Filter which FeedbackReplies to update
     */
    where?: FeedbackReplyWhereInput
  }

  /**
   * FeedbackReply upsert
   */
  export type FeedbackReplyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackReply
     */
    select?: FeedbackReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackReplyInclude<ExtArgs> | null
    /**
     * The filter to search for the FeedbackReply to update in case it exists.
     */
    where: FeedbackReplyWhereUniqueInput
    /**
     * In case the FeedbackReply found by the `where` argument doesn't exist, create a new FeedbackReply with this data.
     */
    create: XOR<FeedbackReplyCreateInput, FeedbackReplyUncheckedCreateInput>
    /**
     * In case the FeedbackReply was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeedbackReplyUpdateInput, FeedbackReplyUncheckedUpdateInput>
  }

  /**
   * FeedbackReply delete
   */
  export type FeedbackReplyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackReply
     */
    select?: FeedbackReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackReplyInclude<ExtArgs> | null
    /**
     * Filter which FeedbackReply to delete.
     */
    where: FeedbackReplyWhereUniqueInput
  }

  /**
   * FeedbackReply deleteMany
   */
  export type FeedbackReplyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeedbackReplies to delete
     */
    where?: FeedbackReplyWhereInput
  }

  /**
   * FeedbackReply without action
   */
  export type FeedbackReplyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackReply
     */
    select?: FeedbackReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackReplyInclude<ExtArgs> | null
  }


  /**
   * Model CreditLog
   */

  export type AggregateCreditLog = {
    _count: CreditLogCountAggregateOutputType | null
    _avg: CreditLogAvgAggregateOutputType | null
    _sum: CreditLogSumAggregateOutputType | null
    _min: CreditLogMinAggregateOutputType | null
    _max: CreditLogMaxAggregateOutputType | null
  }

  export type CreditLogAvgAggregateOutputType = {
    amount: number | null
  }

  export type CreditLogSumAggregateOutputType = {
    amount: number | null
  }

  export type CreditLogMinAggregateOutputType = {
    id: string | null
    action: string | null
    amount: number | null
    reason: string | null
    relatedType: string | null
    relatedId: string | null
    metadata: string | null
    createdAt: Date | null
    userId: string | null
  }

  export type CreditLogMaxAggregateOutputType = {
    id: string | null
    action: string | null
    amount: number | null
    reason: string | null
    relatedType: string | null
    relatedId: string | null
    metadata: string | null
    createdAt: Date | null
    userId: string | null
  }

  export type CreditLogCountAggregateOutputType = {
    id: number
    action: number
    amount: number
    reason: number
    relatedType: number
    relatedId: number
    metadata: number
    createdAt: number
    userId: number
    _all: number
  }


  export type CreditLogAvgAggregateInputType = {
    amount?: true
  }

  export type CreditLogSumAggregateInputType = {
    amount?: true
  }

  export type CreditLogMinAggregateInputType = {
    id?: true
    action?: true
    amount?: true
    reason?: true
    relatedType?: true
    relatedId?: true
    metadata?: true
    createdAt?: true
    userId?: true
  }

  export type CreditLogMaxAggregateInputType = {
    id?: true
    action?: true
    amount?: true
    reason?: true
    relatedType?: true
    relatedId?: true
    metadata?: true
    createdAt?: true
    userId?: true
  }

  export type CreditLogCountAggregateInputType = {
    id?: true
    action?: true
    amount?: true
    reason?: true
    relatedType?: true
    relatedId?: true
    metadata?: true
    createdAt?: true
    userId?: true
    _all?: true
  }

  export type CreditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CreditLog to aggregate.
     */
    where?: CreditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CreditLogs to fetch.
     */
    orderBy?: CreditLogOrderByWithRelationInput | CreditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CreditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CreditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CreditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CreditLogs
    **/
    _count?: true | CreditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CreditLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CreditLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CreditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CreditLogMaxAggregateInputType
  }

  export type GetCreditLogAggregateType<T extends CreditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateCreditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCreditLog[P]>
      : GetScalarType<T[P], AggregateCreditLog[P]>
  }




  export type CreditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CreditLogWhereInput
    orderBy?: CreditLogOrderByWithAggregationInput | CreditLogOrderByWithAggregationInput[]
    by: CreditLogScalarFieldEnum[] | CreditLogScalarFieldEnum
    having?: CreditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CreditLogCountAggregateInputType | true
    _avg?: CreditLogAvgAggregateInputType
    _sum?: CreditLogSumAggregateInputType
    _min?: CreditLogMinAggregateInputType
    _max?: CreditLogMaxAggregateInputType
  }

  export type CreditLogGroupByOutputType = {
    id: string
    action: string
    amount: number
    reason: string | null
    relatedType: string | null
    relatedId: string | null
    metadata: string | null
    createdAt: Date
    userId: string
    _count: CreditLogCountAggregateOutputType | null
    _avg: CreditLogAvgAggregateOutputType | null
    _sum: CreditLogSumAggregateOutputType | null
    _min: CreditLogMinAggregateOutputType | null
    _max: CreditLogMaxAggregateOutputType | null
  }

  type GetCreditLogGroupByPayload<T extends CreditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CreditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CreditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CreditLogGroupByOutputType[P]>
            : GetScalarType<T[P], CreditLogGroupByOutputType[P]>
        }
      >
    >


  export type CreditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    amount?: boolean
    reason?: boolean
    relatedType?: boolean
    relatedId?: boolean
    metadata?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["creditLog"]>


  export type CreditLogSelectScalar = {
    id?: boolean
    action?: boolean
    amount?: boolean
    reason?: boolean
    relatedType?: boolean
    relatedId?: boolean
    metadata?: boolean
    createdAt?: boolean
    userId?: boolean
  }

  export type CreditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CreditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CreditLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      action: string
      amount: number
      reason: string | null
      relatedType: string | null
      relatedId: string | null
      metadata: string | null
      createdAt: Date
      userId: string
    }, ExtArgs["result"]["creditLog"]>
    composites: {}
  }

  type CreditLogGetPayload<S extends boolean | null | undefined | CreditLogDefaultArgs> = $Result.GetResult<Prisma.$CreditLogPayload, S>

  type CreditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CreditLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CreditLogCountAggregateInputType | true
    }

  export interface CreditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CreditLog'], meta: { name: 'CreditLog' } }
    /**
     * Find zero or one CreditLog that matches the filter.
     * @param {CreditLogFindUniqueArgs} args - Arguments to find a CreditLog
     * @example
     * // Get one CreditLog
     * const creditLog = await prisma.creditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CreditLogFindUniqueArgs>(args: SelectSubset<T, CreditLogFindUniqueArgs<ExtArgs>>): Prisma__CreditLogClient<$Result.GetResult<Prisma.$CreditLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CreditLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CreditLogFindUniqueOrThrowArgs} args - Arguments to find a CreditLog
     * @example
     * // Get one CreditLog
     * const creditLog = await prisma.creditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CreditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, CreditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CreditLogClient<$Result.GetResult<Prisma.$CreditLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CreditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditLogFindFirstArgs} args - Arguments to find a CreditLog
     * @example
     * // Get one CreditLog
     * const creditLog = await prisma.creditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CreditLogFindFirstArgs>(args?: SelectSubset<T, CreditLogFindFirstArgs<ExtArgs>>): Prisma__CreditLogClient<$Result.GetResult<Prisma.$CreditLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CreditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditLogFindFirstOrThrowArgs} args - Arguments to find a CreditLog
     * @example
     * // Get one CreditLog
     * const creditLog = await prisma.creditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CreditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, CreditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__CreditLogClient<$Result.GetResult<Prisma.$CreditLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CreditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CreditLogs
     * const creditLogs = await prisma.creditLog.findMany()
     * 
     * // Get first 10 CreditLogs
     * const creditLogs = await prisma.creditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const creditLogWithIdOnly = await prisma.creditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CreditLogFindManyArgs>(args?: SelectSubset<T, CreditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CreditLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CreditLog.
     * @param {CreditLogCreateArgs} args - Arguments to create a CreditLog.
     * @example
     * // Create one CreditLog
     * const CreditLog = await prisma.creditLog.create({
     *   data: {
     *     // ... data to create a CreditLog
     *   }
     * })
     * 
     */
    create<T extends CreditLogCreateArgs>(args: SelectSubset<T, CreditLogCreateArgs<ExtArgs>>): Prisma__CreditLogClient<$Result.GetResult<Prisma.$CreditLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CreditLogs.
     * @param {CreditLogCreateManyArgs} args - Arguments to create many CreditLogs.
     * @example
     * // Create many CreditLogs
     * const creditLog = await prisma.creditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CreditLogCreateManyArgs>(args?: SelectSubset<T, CreditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CreditLog.
     * @param {CreditLogDeleteArgs} args - Arguments to delete one CreditLog.
     * @example
     * // Delete one CreditLog
     * const CreditLog = await prisma.creditLog.delete({
     *   where: {
     *     // ... filter to delete one CreditLog
     *   }
     * })
     * 
     */
    delete<T extends CreditLogDeleteArgs>(args: SelectSubset<T, CreditLogDeleteArgs<ExtArgs>>): Prisma__CreditLogClient<$Result.GetResult<Prisma.$CreditLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CreditLog.
     * @param {CreditLogUpdateArgs} args - Arguments to update one CreditLog.
     * @example
     * // Update one CreditLog
     * const creditLog = await prisma.creditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CreditLogUpdateArgs>(args: SelectSubset<T, CreditLogUpdateArgs<ExtArgs>>): Prisma__CreditLogClient<$Result.GetResult<Prisma.$CreditLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CreditLogs.
     * @param {CreditLogDeleteManyArgs} args - Arguments to filter CreditLogs to delete.
     * @example
     * // Delete a few CreditLogs
     * const { count } = await prisma.creditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CreditLogDeleteManyArgs>(args?: SelectSubset<T, CreditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CreditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CreditLogs
     * const creditLog = await prisma.creditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CreditLogUpdateManyArgs>(args: SelectSubset<T, CreditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CreditLog.
     * @param {CreditLogUpsertArgs} args - Arguments to update or create a CreditLog.
     * @example
     * // Update or create a CreditLog
     * const creditLog = await prisma.creditLog.upsert({
     *   create: {
     *     // ... data to create a CreditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CreditLog we want to update
     *   }
     * })
     */
    upsert<T extends CreditLogUpsertArgs>(args: SelectSubset<T, CreditLogUpsertArgs<ExtArgs>>): Prisma__CreditLogClient<$Result.GetResult<Prisma.$CreditLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CreditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditLogCountArgs} args - Arguments to filter CreditLogs to count.
     * @example
     * // Count the number of CreditLogs
     * const count = await prisma.creditLog.count({
     *   where: {
     *     // ... the filter for the CreditLogs we want to count
     *   }
     * })
    **/
    count<T extends CreditLogCountArgs>(
      args?: Subset<T, CreditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CreditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CreditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CreditLogAggregateArgs>(args: Subset<T, CreditLogAggregateArgs>): Prisma.PrismaPromise<GetCreditLogAggregateType<T>>

    /**
     * Group by CreditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CreditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CreditLogGroupByArgs['orderBy'] }
        : { orderBy?: CreditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CreditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCreditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CreditLog model
   */
  readonly fields: CreditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CreditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CreditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CreditLog model
   */ 
  interface CreditLogFieldRefs {
    readonly id: FieldRef<"CreditLog", 'String'>
    readonly action: FieldRef<"CreditLog", 'String'>
    readonly amount: FieldRef<"CreditLog", 'Int'>
    readonly reason: FieldRef<"CreditLog", 'String'>
    readonly relatedType: FieldRef<"CreditLog", 'String'>
    readonly relatedId: FieldRef<"CreditLog", 'String'>
    readonly metadata: FieldRef<"CreditLog", 'String'>
    readonly createdAt: FieldRef<"CreditLog", 'DateTime'>
    readonly userId: FieldRef<"CreditLog", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CreditLog findUnique
   */
  export type CreditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditLog
     */
    select?: CreditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditLogInclude<ExtArgs> | null
    /**
     * Filter, which CreditLog to fetch.
     */
    where: CreditLogWhereUniqueInput
  }

  /**
   * CreditLog findUniqueOrThrow
   */
  export type CreditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditLog
     */
    select?: CreditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditLogInclude<ExtArgs> | null
    /**
     * Filter, which CreditLog to fetch.
     */
    where: CreditLogWhereUniqueInput
  }

  /**
   * CreditLog findFirst
   */
  export type CreditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditLog
     */
    select?: CreditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditLogInclude<ExtArgs> | null
    /**
     * Filter, which CreditLog to fetch.
     */
    where?: CreditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CreditLogs to fetch.
     */
    orderBy?: CreditLogOrderByWithRelationInput | CreditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CreditLogs.
     */
    cursor?: CreditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CreditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CreditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CreditLogs.
     */
    distinct?: CreditLogScalarFieldEnum | CreditLogScalarFieldEnum[]
  }

  /**
   * CreditLog findFirstOrThrow
   */
  export type CreditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditLog
     */
    select?: CreditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditLogInclude<ExtArgs> | null
    /**
     * Filter, which CreditLog to fetch.
     */
    where?: CreditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CreditLogs to fetch.
     */
    orderBy?: CreditLogOrderByWithRelationInput | CreditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CreditLogs.
     */
    cursor?: CreditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CreditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CreditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CreditLogs.
     */
    distinct?: CreditLogScalarFieldEnum | CreditLogScalarFieldEnum[]
  }

  /**
   * CreditLog findMany
   */
  export type CreditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditLog
     */
    select?: CreditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditLogInclude<ExtArgs> | null
    /**
     * Filter, which CreditLogs to fetch.
     */
    where?: CreditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CreditLogs to fetch.
     */
    orderBy?: CreditLogOrderByWithRelationInput | CreditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CreditLogs.
     */
    cursor?: CreditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CreditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CreditLogs.
     */
    skip?: number
    distinct?: CreditLogScalarFieldEnum | CreditLogScalarFieldEnum[]
  }

  /**
   * CreditLog create
   */
  export type CreditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditLog
     */
    select?: CreditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a CreditLog.
     */
    data: XOR<CreditLogCreateInput, CreditLogUncheckedCreateInput>
  }

  /**
   * CreditLog createMany
   */
  export type CreditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CreditLogs.
     */
    data: CreditLogCreateManyInput | CreditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CreditLog update
   */
  export type CreditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditLog
     */
    select?: CreditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a CreditLog.
     */
    data: XOR<CreditLogUpdateInput, CreditLogUncheckedUpdateInput>
    /**
     * Choose, which CreditLog to update.
     */
    where: CreditLogWhereUniqueInput
  }

  /**
   * CreditLog updateMany
   */
  export type CreditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CreditLogs.
     */
    data: XOR<CreditLogUpdateManyMutationInput, CreditLogUncheckedUpdateManyInput>
    /**
     * Filter which CreditLogs to update
     */
    where?: CreditLogWhereInput
  }

  /**
   * CreditLog upsert
   */
  export type CreditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditLog
     */
    select?: CreditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the CreditLog to update in case it exists.
     */
    where: CreditLogWhereUniqueInput
    /**
     * In case the CreditLog found by the `where` argument doesn't exist, create a new CreditLog with this data.
     */
    create: XOR<CreditLogCreateInput, CreditLogUncheckedCreateInput>
    /**
     * In case the CreditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CreditLogUpdateInput, CreditLogUncheckedUpdateInput>
  }

  /**
   * CreditLog delete
   */
  export type CreditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditLog
     */
    select?: CreditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditLogInclude<ExtArgs> | null
    /**
     * Filter which CreditLog to delete.
     */
    where: CreditLogWhereUniqueInput
  }

  /**
   * CreditLog deleteMany
   */
  export type CreditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CreditLogs to delete
     */
    where?: CreditLogWhereInput
  }

  /**
   * CreditLog without action
   */
  export type CreditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditLog
     */
    select?: CreditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditLogInclude<ExtArgs> | null
  }


  /**
   * Model UserLevel
   */

  export type AggregateUserLevel = {
    _count: UserLevelCountAggregateOutputType | null
    _avg: UserLevelAvgAggregateOutputType | null
    _sum: UserLevelSumAggregateOutputType | null
    _min: UserLevelMinAggregateOutputType | null
    _max: UserLevelMaxAggregateOutputType | null
  }

  export type UserLevelAvgAggregateOutputType = {
    level: number | null
    minExp: number | null
    maxExp: number | null
  }

  export type UserLevelSumAggregateOutputType = {
    level: number | null
    minExp: number | null
    maxExp: number | null
  }

  export type UserLevelMinAggregateOutputType = {
    id: string | null
    level: number | null
    name: string | null
    minExp: number | null
    maxExp: number | null
    icon: string | null
    color: string | null
    privileges: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserLevelMaxAggregateOutputType = {
    id: string | null
    level: number | null
    name: string | null
    minExp: number | null
    maxExp: number | null
    icon: string | null
    color: string | null
    privileges: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserLevelCountAggregateOutputType = {
    id: number
    level: number
    name: number
    minExp: number
    maxExp: number
    icon: number
    color: number
    privileges: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserLevelAvgAggregateInputType = {
    level?: true
    minExp?: true
    maxExp?: true
  }

  export type UserLevelSumAggregateInputType = {
    level?: true
    minExp?: true
    maxExp?: true
  }

  export type UserLevelMinAggregateInputType = {
    id?: true
    level?: true
    name?: true
    minExp?: true
    maxExp?: true
    icon?: true
    color?: true
    privileges?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserLevelMaxAggregateInputType = {
    id?: true
    level?: true
    name?: true
    minExp?: true
    maxExp?: true
    icon?: true
    color?: true
    privileges?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserLevelCountAggregateInputType = {
    id?: true
    level?: true
    name?: true
    minExp?: true
    maxExp?: true
    icon?: true
    color?: true
    privileges?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserLevelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserLevel to aggregate.
     */
    where?: UserLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLevels to fetch.
     */
    orderBy?: UserLevelOrderByWithRelationInput | UserLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserLevels
    **/
    _count?: true | UserLevelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserLevelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserLevelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserLevelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserLevelMaxAggregateInputType
  }

  export type GetUserLevelAggregateType<T extends UserLevelAggregateArgs> = {
        [P in keyof T & keyof AggregateUserLevel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserLevel[P]>
      : GetScalarType<T[P], AggregateUserLevel[P]>
  }




  export type UserLevelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserLevelWhereInput
    orderBy?: UserLevelOrderByWithAggregationInput | UserLevelOrderByWithAggregationInput[]
    by: UserLevelScalarFieldEnum[] | UserLevelScalarFieldEnum
    having?: UserLevelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserLevelCountAggregateInputType | true
    _avg?: UserLevelAvgAggregateInputType
    _sum?: UserLevelSumAggregateInputType
    _min?: UserLevelMinAggregateInputType
    _max?: UserLevelMaxAggregateInputType
  }

  export type UserLevelGroupByOutputType = {
    id: string
    level: number
    name: string
    minExp: number
    maxExp: number
    icon: string | null
    color: string | null
    privileges: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserLevelCountAggregateOutputType | null
    _avg: UserLevelAvgAggregateOutputType | null
    _sum: UserLevelSumAggregateOutputType | null
    _min: UserLevelMinAggregateOutputType | null
    _max: UserLevelMaxAggregateOutputType | null
  }

  type GetUserLevelGroupByPayload<T extends UserLevelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserLevelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserLevelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserLevelGroupByOutputType[P]>
            : GetScalarType<T[P], UserLevelGroupByOutputType[P]>
        }
      >
    >


  export type UserLevelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    level?: boolean
    name?: boolean
    minExp?: boolean
    maxExp?: boolean
    icon?: boolean
    color?: boolean
    privileges?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["userLevel"]>


  export type UserLevelSelectScalar = {
    id?: boolean
    level?: boolean
    name?: boolean
    minExp?: boolean
    maxExp?: boolean
    icon?: boolean
    color?: boolean
    privileges?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $UserLevelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserLevel"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      level: number
      name: string
      minExp: number
      maxExp: number
      icon: string | null
      color: string | null
      privileges: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userLevel"]>
    composites: {}
  }

  type UserLevelGetPayload<S extends boolean | null | undefined | UserLevelDefaultArgs> = $Result.GetResult<Prisma.$UserLevelPayload, S>

  type UserLevelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserLevelFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserLevelCountAggregateInputType | true
    }

  export interface UserLevelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserLevel'], meta: { name: 'UserLevel' } }
    /**
     * Find zero or one UserLevel that matches the filter.
     * @param {UserLevelFindUniqueArgs} args - Arguments to find a UserLevel
     * @example
     * // Get one UserLevel
     * const userLevel = await prisma.userLevel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserLevelFindUniqueArgs>(args: SelectSubset<T, UserLevelFindUniqueArgs<ExtArgs>>): Prisma__UserLevelClient<$Result.GetResult<Prisma.$UserLevelPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserLevel that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserLevelFindUniqueOrThrowArgs} args - Arguments to find a UserLevel
     * @example
     * // Get one UserLevel
     * const userLevel = await prisma.userLevel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserLevelFindUniqueOrThrowArgs>(args: SelectSubset<T, UserLevelFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserLevelClient<$Result.GetResult<Prisma.$UserLevelPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserLevel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLevelFindFirstArgs} args - Arguments to find a UserLevel
     * @example
     * // Get one UserLevel
     * const userLevel = await prisma.userLevel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserLevelFindFirstArgs>(args?: SelectSubset<T, UserLevelFindFirstArgs<ExtArgs>>): Prisma__UserLevelClient<$Result.GetResult<Prisma.$UserLevelPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserLevel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLevelFindFirstOrThrowArgs} args - Arguments to find a UserLevel
     * @example
     * // Get one UserLevel
     * const userLevel = await prisma.userLevel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserLevelFindFirstOrThrowArgs>(args?: SelectSubset<T, UserLevelFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserLevelClient<$Result.GetResult<Prisma.$UserLevelPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserLevels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLevelFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserLevels
     * const userLevels = await prisma.userLevel.findMany()
     * 
     * // Get first 10 UserLevels
     * const userLevels = await prisma.userLevel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userLevelWithIdOnly = await prisma.userLevel.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserLevelFindManyArgs>(args?: SelectSubset<T, UserLevelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserLevelPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserLevel.
     * @param {UserLevelCreateArgs} args - Arguments to create a UserLevel.
     * @example
     * // Create one UserLevel
     * const UserLevel = await prisma.userLevel.create({
     *   data: {
     *     // ... data to create a UserLevel
     *   }
     * })
     * 
     */
    create<T extends UserLevelCreateArgs>(args: SelectSubset<T, UserLevelCreateArgs<ExtArgs>>): Prisma__UserLevelClient<$Result.GetResult<Prisma.$UserLevelPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserLevels.
     * @param {UserLevelCreateManyArgs} args - Arguments to create many UserLevels.
     * @example
     * // Create many UserLevels
     * const userLevel = await prisma.userLevel.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserLevelCreateManyArgs>(args?: SelectSubset<T, UserLevelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserLevel.
     * @param {UserLevelDeleteArgs} args - Arguments to delete one UserLevel.
     * @example
     * // Delete one UserLevel
     * const UserLevel = await prisma.userLevel.delete({
     *   where: {
     *     // ... filter to delete one UserLevel
     *   }
     * })
     * 
     */
    delete<T extends UserLevelDeleteArgs>(args: SelectSubset<T, UserLevelDeleteArgs<ExtArgs>>): Prisma__UserLevelClient<$Result.GetResult<Prisma.$UserLevelPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserLevel.
     * @param {UserLevelUpdateArgs} args - Arguments to update one UserLevel.
     * @example
     * // Update one UserLevel
     * const userLevel = await prisma.userLevel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserLevelUpdateArgs>(args: SelectSubset<T, UserLevelUpdateArgs<ExtArgs>>): Prisma__UserLevelClient<$Result.GetResult<Prisma.$UserLevelPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserLevels.
     * @param {UserLevelDeleteManyArgs} args - Arguments to filter UserLevels to delete.
     * @example
     * // Delete a few UserLevels
     * const { count } = await prisma.userLevel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserLevelDeleteManyArgs>(args?: SelectSubset<T, UserLevelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserLevels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLevelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserLevels
     * const userLevel = await prisma.userLevel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserLevelUpdateManyArgs>(args: SelectSubset<T, UserLevelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserLevel.
     * @param {UserLevelUpsertArgs} args - Arguments to update or create a UserLevel.
     * @example
     * // Update or create a UserLevel
     * const userLevel = await prisma.userLevel.upsert({
     *   create: {
     *     // ... data to create a UserLevel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserLevel we want to update
     *   }
     * })
     */
    upsert<T extends UserLevelUpsertArgs>(args: SelectSubset<T, UserLevelUpsertArgs<ExtArgs>>): Prisma__UserLevelClient<$Result.GetResult<Prisma.$UserLevelPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserLevels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLevelCountArgs} args - Arguments to filter UserLevels to count.
     * @example
     * // Count the number of UserLevels
     * const count = await prisma.userLevel.count({
     *   where: {
     *     // ... the filter for the UserLevels we want to count
     *   }
     * })
    **/
    count<T extends UserLevelCountArgs>(
      args?: Subset<T, UserLevelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserLevelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserLevel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLevelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserLevelAggregateArgs>(args: Subset<T, UserLevelAggregateArgs>): Prisma.PrismaPromise<GetUserLevelAggregateType<T>>

    /**
     * Group by UserLevel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLevelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserLevelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserLevelGroupByArgs['orderBy'] }
        : { orderBy?: UserLevelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserLevelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserLevelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserLevel model
   */
  readonly fields: UserLevelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserLevel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserLevelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserLevel model
   */ 
  interface UserLevelFieldRefs {
    readonly id: FieldRef<"UserLevel", 'String'>
    readonly level: FieldRef<"UserLevel", 'Int'>
    readonly name: FieldRef<"UserLevel", 'String'>
    readonly minExp: FieldRef<"UserLevel", 'Int'>
    readonly maxExp: FieldRef<"UserLevel", 'Int'>
    readonly icon: FieldRef<"UserLevel", 'String'>
    readonly color: FieldRef<"UserLevel", 'String'>
    readonly privileges: FieldRef<"UserLevel", 'String'>
    readonly createdAt: FieldRef<"UserLevel", 'DateTime'>
    readonly updatedAt: FieldRef<"UserLevel", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserLevel findUnique
   */
  export type UserLevelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLevel
     */
    select?: UserLevelSelect<ExtArgs> | null
    /**
     * Filter, which UserLevel to fetch.
     */
    where: UserLevelWhereUniqueInput
  }

  /**
   * UserLevel findUniqueOrThrow
   */
  export type UserLevelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLevel
     */
    select?: UserLevelSelect<ExtArgs> | null
    /**
     * Filter, which UserLevel to fetch.
     */
    where: UserLevelWhereUniqueInput
  }

  /**
   * UserLevel findFirst
   */
  export type UserLevelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLevel
     */
    select?: UserLevelSelect<ExtArgs> | null
    /**
     * Filter, which UserLevel to fetch.
     */
    where?: UserLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLevels to fetch.
     */
    orderBy?: UserLevelOrderByWithRelationInput | UserLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserLevels.
     */
    cursor?: UserLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserLevels.
     */
    distinct?: UserLevelScalarFieldEnum | UserLevelScalarFieldEnum[]
  }

  /**
   * UserLevel findFirstOrThrow
   */
  export type UserLevelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLevel
     */
    select?: UserLevelSelect<ExtArgs> | null
    /**
     * Filter, which UserLevel to fetch.
     */
    where?: UserLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLevels to fetch.
     */
    orderBy?: UserLevelOrderByWithRelationInput | UserLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserLevels.
     */
    cursor?: UserLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserLevels.
     */
    distinct?: UserLevelScalarFieldEnum | UserLevelScalarFieldEnum[]
  }

  /**
   * UserLevel findMany
   */
  export type UserLevelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLevel
     */
    select?: UserLevelSelect<ExtArgs> | null
    /**
     * Filter, which UserLevels to fetch.
     */
    where?: UserLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLevels to fetch.
     */
    orderBy?: UserLevelOrderByWithRelationInput | UserLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserLevels.
     */
    cursor?: UserLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLevels.
     */
    skip?: number
    distinct?: UserLevelScalarFieldEnum | UserLevelScalarFieldEnum[]
  }

  /**
   * UserLevel create
   */
  export type UserLevelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLevel
     */
    select?: UserLevelSelect<ExtArgs> | null
    /**
     * The data needed to create a UserLevel.
     */
    data: XOR<UserLevelCreateInput, UserLevelUncheckedCreateInput>
  }

  /**
   * UserLevel createMany
   */
  export type UserLevelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserLevels.
     */
    data: UserLevelCreateManyInput | UserLevelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserLevel update
   */
  export type UserLevelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLevel
     */
    select?: UserLevelSelect<ExtArgs> | null
    /**
     * The data needed to update a UserLevel.
     */
    data: XOR<UserLevelUpdateInput, UserLevelUncheckedUpdateInput>
    /**
     * Choose, which UserLevel to update.
     */
    where: UserLevelWhereUniqueInput
  }

  /**
   * UserLevel updateMany
   */
  export type UserLevelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserLevels.
     */
    data: XOR<UserLevelUpdateManyMutationInput, UserLevelUncheckedUpdateManyInput>
    /**
     * Filter which UserLevels to update
     */
    where?: UserLevelWhereInput
  }

  /**
   * UserLevel upsert
   */
  export type UserLevelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLevel
     */
    select?: UserLevelSelect<ExtArgs> | null
    /**
     * The filter to search for the UserLevel to update in case it exists.
     */
    where: UserLevelWhereUniqueInput
    /**
     * In case the UserLevel found by the `where` argument doesn't exist, create a new UserLevel with this data.
     */
    create: XOR<UserLevelCreateInput, UserLevelUncheckedCreateInput>
    /**
     * In case the UserLevel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserLevelUpdateInput, UserLevelUncheckedUpdateInput>
  }

  /**
   * UserLevel delete
   */
  export type UserLevelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLevel
     */
    select?: UserLevelSelect<ExtArgs> | null
    /**
     * Filter which UserLevel to delete.
     */
    where: UserLevelWhereUniqueInput
  }

  /**
   * UserLevel deleteMany
   */
  export type UserLevelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserLevels to delete
     */
    where?: UserLevelWhereInput
  }

  /**
   * UserLevel without action
   */
  export type UserLevelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLevel
     */
    select?: UserLevelSelect<ExtArgs> | null
  }


  /**
   * Model UserBadge
   */

  export type AggregateUserBadge = {
    _count: UserBadgeCountAggregateOutputType | null
    _min: UserBadgeMinAggregateOutputType | null
    _max: UserBadgeMaxAggregateOutputType | null
  }

  export type UserBadgeMinAggregateOutputType = {
    id: string | null
    code: string | null
    name: string | null
    description: string | null
    icon: string | null
    category: string | null
    rarity: string | null
    condition: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserBadgeMaxAggregateOutputType = {
    id: string | null
    code: string | null
    name: string | null
    description: string | null
    icon: string | null
    category: string | null
    rarity: string | null
    condition: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserBadgeCountAggregateOutputType = {
    id: number
    code: number
    name: number
    description: number
    icon: number
    category: number
    rarity: number
    condition: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserBadgeMinAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    icon?: true
    category?: true
    rarity?: true
    condition?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserBadgeMaxAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    icon?: true
    category?: true
    rarity?: true
    condition?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserBadgeCountAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    icon?: true
    category?: true
    rarity?: true
    condition?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserBadgeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserBadge to aggregate.
     */
    where?: UserBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBadges to fetch.
     */
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBadges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserBadges
    **/
    _count?: true | UserBadgeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserBadgeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserBadgeMaxAggregateInputType
  }

  export type GetUserBadgeAggregateType<T extends UserBadgeAggregateArgs> = {
        [P in keyof T & keyof AggregateUserBadge]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserBadge[P]>
      : GetScalarType<T[P], AggregateUserBadge[P]>
  }




  export type UserBadgeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserBadgeWhereInput
    orderBy?: UserBadgeOrderByWithAggregationInput | UserBadgeOrderByWithAggregationInput[]
    by: UserBadgeScalarFieldEnum[] | UserBadgeScalarFieldEnum
    having?: UserBadgeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserBadgeCountAggregateInputType | true
    _min?: UserBadgeMinAggregateInputType
    _max?: UserBadgeMaxAggregateInputType
  }

  export type UserBadgeGroupByOutputType = {
    id: string
    code: string
    name: string
    description: string | null
    icon: string | null
    category: string
    rarity: string
    condition: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserBadgeCountAggregateOutputType | null
    _min: UserBadgeMinAggregateOutputType | null
    _max: UserBadgeMaxAggregateOutputType | null
  }

  type GetUserBadgeGroupByPayload<T extends UserBadgeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserBadgeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserBadgeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserBadgeGroupByOutputType[P]>
            : GetScalarType<T[P], UserBadgeGroupByOutputType[P]>
        }
      >
    >


  export type UserBadgeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    category?: boolean
    rarity?: boolean
    condition?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userRecords?: boolean | UserBadge$userRecordsArgs<ExtArgs>
    _count?: boolean | UserBadgeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userBadge"]>


  export type UserBadgeSelectScalar = {
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    category?: boolean
    rarity?: boolean
    condition?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserBadgeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userRecords?: boolean | UserBadge$userRecordsArgs<ExtArgs>
    _count?: boolean | UserBadgeCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserBadgePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserBadge"
    objects: {
      userRecords: Prisma.$UserBadgeRecordPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      code: string
      name: string
      description: string | null
      icon: string | null
      category: string
      rarity: string
      condition: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userBadge"]>
    composites: {}
  }

  type UserBadgeGetPayload<S extends boolean | null | undefined | UserBadgeDefaultArgs> = $Result.GetResult<Prisma.$UserBadgePayload, S>

  type UserBadgeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserBadgeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserBadgeCountAggregateInputType | true
    }

  export interface UserBadgeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserBadge'], meta: { name: 'UserBadge' } }
    /**
     * Find zero or one UserBadge that matches the filter.
     * @param {UserBadgeFindUniqueArgs} args - Arguments to find a UserBadge
     * @example
     * // Get one UserBadge
     * const userBadge = await prisma.userBadge.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserBadgeFindUniqueArgs>(args: SelectSubset<T, UserBadgeFindUniqueArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserBadge that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserBadgeFindUniqueOrThrowArgs} args - Arguments to find a UserBadge
     * @example
     * // Get one UserBadge
     * const userBadge = await prisma.userBadge.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserBadgeFindUniqueOrThrowArgs>(args: SelectSubset<T, UserBadgeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserBadge that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeFindFirstArgs} args - Arguments to find a UserBadge
     * @example
     * // Get one UserBadge
     * const userBadge = await prisma.userBadge.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserBadgeFindFirstArgs>(args?: SelectSubset<T, UserBadgeFindFirstArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserBadge that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeFindFirstOrThrowArgs} args - Arguments to find a UserBadge
     * @example
     * // Get one UserBadge
     * const userBadge = await prisma.userBadge.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserBadgeFindFirstOrThrowArgs>(args?: SelectSubset<T, UserBadgeFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserBadges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserBadges
     * const userBadges = await prisma.userBadge.findMany()
     * 
     * // Get first 10 UserBadges
     * const userBadges = await prisma.userBadge.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userBadgeWithIdOnly = await prisma.userBadge.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserBadgeFindManyArgs>(args?: SelectSubset<T, UserBadgeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserBadge.
     * @param {UserBadgeCreateArgs} args - Arguments to create a UserBadge.
     * @example
     * // Create one UserBadge
     * const UserBadge = await prisma.userBadge.create({
     *   data: {
     *     // ... data to create a UserBadge
     *   }
     * })
     * 
     */
    create<T extends UserBadgeCreateArgs>(args: SelectSubset<T, UserBadgeCreateArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserBadges.
     * @param {UserBadgeCreateManyArgs} args - Arguments to create many UserBadges.
     * @example
     * // Create many UserBadges
     * const userBadge = await prisma.userBadge.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserBadgeCreateManyArgs>(args?: SelectSubset<T, UserBadgeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserBadge.
     * @param {UserBadgeDeleteArgs} args - Arguments to delete one UserBadge.
     * @example
     * // Delete one UserBadge
     * const UserBadge = await prisma.userBadge.delete({
     *   where: {
     *     // ... filter to delete one UserBadge
     *   }
     * })
     * 
     */
    delete<T extends UserBadgeDeleteArgs>(args: SelectSubset<T, UserBadgeDeleteArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserBadge.
     * @param {UserBadgeUpdateArgs} args - Arguments to update one UserBadge.
     * @example
     * // Update one UserBadge
     * const userBadge = await prisma.userBadge.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserBadgeUpdateArgs>(args: SelectSubset<T, UserBadgeUpdateArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserBadges.
     * @param {UserBadgeDeleteManyArgs} args - Arguments to filter UserBadges to delete.
     * @example
     * // Delete a few UserBadges
     * const { count } = await prisma.userBadge.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserBadgeDeleteManyArgs>(args?: SelectSubset<T, UserBadgeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserBadges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserBadges
     * const userBadge = await prisma.userBadge.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserBadgeUpdateManyArgs>(args: SelectSubset<T, UserBadgeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserBadge.
     * @param {UserBadgeUpsertArgs} args - Arguments to update or create a UserBadge.
     * @example
     * // Update or create a UserBadge
     * const userBadge = await prisma.userBadge.upsert({
     *   create: {
     *     // ... data to create a UserBadge
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserBadge we want to update
     *   }
     * })
     */
    upsert<T extends UserBadgeUpsertArgs>(args: SelectSubset<T, UserBadgeUpsertArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserBadges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeCountArgs} args - Arguments to filter UserBadges to count.
     * @example
     * // Count the number of UserBadges
     * const count = await prisma.userBadge.count({
     *   where: {
     *     // ... the filter for the UserBadges we want to count
     *   }
     * })
    **/
    count<T extends UserBadgeCountArgs>(
      args?: Subset<T, UserBadgeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserBadgeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserBadge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserBadgeAggregateArgs>(args: Subset<T, UserBadgeAggregateArgs>): Prisma.PrismaPromise<GetUserBadgeAggregateType<T>>

    /**
     * Group by UserBadge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserBadgeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserBadgeGroupByArgs['orderBy'] }
        : { orderBy?: UserBadgeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserBadgeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserBadgeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserBadge model
   */
  readonly fields: UserBadgeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserBadge.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserBadgeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userRecords<T extends UserBadge$userRecordsArgs<ExtArgs> = {}>(args?: Subset<T, UserBadge$userRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBadgeRecordPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserBadge model
   */ 
  interface UserBadgeFieldRefs {
    readonly id: FieldRef<"UserBadge", 'String'>
    readonly code: FieldRef<"UserBadge", 'String'>
    readonly name: FieldRef<"UserBadge", 'String'>
    readonly description: FieldRef<"UserBadge", 'String'>
    readonly icon: FieldRef<"UserBadge", 'String'>
    readonly category: FieldRef<"UserBadge", 'String'>
    readonly rarity: FieldRef<"UserBadge", 'String'>
    readonly condition: FieldRef<"UserBadge", 'String'>
    readonly isActive: FieldRef<"UserBadge", 'Boolean'>
    readonly createdAt: FieldRef<"UserBadge", 'DateTime'>
    readonly updatedAt: FieldRef<"UserBadge", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserBadge findUnique
   */
  export type UserBadgeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter, which UserBadge to fetch.
     */
    where: UserBadgeWhereUniqueInput
  }

  /**
   * UserBadge findUniqueOrThrow
   */
  export type UserBadgeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter, which UserBadge to fetch.
     */
    where: UserBadgeWhereUniqueInput
  }

  /**
   * UserBadge findFirst
   */
  export type UserBadgeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter, which UserBadge to fetch.
     */
    where?: UserBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBadges to fetch.
     */
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserBadges.
     */
    cursor?: UserBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBadges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserBadges.
     */
    distinct?: UserBadgeScalarFieldEnum | UserBadgeScalarFieldEnum[]
  }

  /**
   * UserBadge findFirstOrThrow
   */
  export type UserBadgeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter, which UserBadge to fetch.
     */
    where?: UserBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBadges to fetch.
     */
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserBadges.
     */
    cursor?: UserBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBadges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserBadges.
     */
    distinct?: UserBadgeScalarFieldEnum | UserBadgeScalarFieldEnum[]
  }

  /**
   * UserBadge findMany
   */
  export type UserBadgeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter, which UserBadges to fetch.
     */
    where?: UserBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBadges to fetch.
     */
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserBadges.
     */
    cursor?: UserBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBadges.
     */
    skip?: number
    distinct?: UserBadgeScalarFieldEnum | UserBadgeScalarFieldEnum[]
  }

  /**
   * UserBadge create
   */
  export type UserBadgeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * The data needed to create a UserBadge.
     */
    data: XOR<UserBadgeCreateInput, UserBadgeUncheckedCreateInput>
  }

  /**
   * UserBadge createMany
   */
  export type UserBadgeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserBadges.
     */
    data: UserBadgeCreateManyInput | UserBadgeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserBadge update
   */
  export type UserBadgeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * The data needed to update a UserBadge.
     */
    data: XOR<UserBadgeUpdateInput, UserBadgeUncheckedUpdateInput>
    /**
     * Choose, which UserBadge to update.
     */
    where: UserBadgeWhereUniqueInput
  }

  /**
   * UserBadge updateMany
   */
  export type UserBadgeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserBadges.
     */
    data: XOR<UserBadgeUpdateManyMutationInput, UserBadgeUncheckedUpdateManyInput>
    /**
     * Filter which UserBadges to update
     */
    where?: UserBadgeWhereInput
  }

  /**
   * UserBadge upsert
   */
  export type UserBadgeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * The filter to search for the UserBadge to update in case it exists.
     */
    where: UserBadgeWhereUniqueInput
    /**
     * In case the UserBadge found by the `where` argument doesn't exist, create a new UserBadge with this data.
     */
    create: XOR<UserBadgeCreateInput, UserBadgeUncheckedCreateInput>
    /**
     * In case the UserBadge was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserBadgeUpdateInput, UserBadgeUncheckedUpdateInput>
  }

  /**
   * UserBadge delete
   */
  export type UserBadgeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter which UserBadge to delete.
     */
    where: UserBadgeWhereUniqueInput
  }

  /**
   * UserBadge deleteMany
   */
  export type UserBadgeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserBadges to delete
     */
    where?: UserBadgeWhereInput
  }

  /**
   * UserBadge.userRecords
   */
  export type UserBadge$userRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadgeRecord
     */
    select?: UserBadgeRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeRecordInclude<ExtArgs> | null
    where?: UserBadgeRecordWhereInput
    orderBy?: UserBadgeRecordOrderByWithRelationInput | UserBadgeRecordOrderByWithRelationInput[]
    cursor?: UserBadgeRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserBadgeRecordScalarFieldEnum | UserBadgeRecordScalarFieldEnum[]
  }

  /**
   * UserBadge without action
   */
  export type UserBadgeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
  }


  /**
   * Model UserBadgeRecord
   */

  export type AggregateUserBadgeRecord = {
    _count: UserBadgeRecordCountAggregateOutputType | null
    _avg: UserBadgeRecordAvgAggregateOutputType | null
    _sum: UserBadgeRecordSumAggregateOutputType | null
    _min: UserBadgeRecordMinAggregateOutputType | null
    _max: UserBadgeRecordMaxAggregateOutputType | null
  }

  export type UserBadgeRecordAvgAggregateOutputType = {
    progress: number | null
  }

  export type UserBadgeRecordSumAggregateOutputType = {
    progress: number | null
  }

  export type UserBadgeRecordMinAggregateOutputType = {
    id: string | null
    progress: number | null
    awardedAt: Date | null
    metadata: string | null
    userId: string | null
    badgeId: string | null
  }

  export type UserBadgeRecordMaxAggregateOutputType = {
    id: string | null
    progress: number | null
    awardedAt: Date | null
    metadata: string | null
    userId: string | null
    badgeId: string | null
  }

  export type UserBadgeRecordCountAggregateOutputType = {
    id: number
    progress: number
    awardedAt: number
    metadata: number
    userId: number
    badgeId: number
    _all: number
  }


  export type UserBadgeRecordAvgAggregateInputType = {
    progress?: true
  }

  export type UserBadgeRecordSumAggregateInputType = {
    progress?: true
  }

  export type UserBadgeRecordMinAggregateInputType = {
    id?: true
    progress?: true
    awardedAt?: true
    metadata?: true
    userId?: true
    badgeId?: true
  }

  export type UserBadgeRecordMaxAggregateInputType = {
    id?: true
    progress?: true
    awardedAt?: true
    metadata?: true
    userId?: true
    badgeId?: true
  }

  export type UserBadgeRecordCountAggregateInputType = {
    id?: true
    progress?: true
    awardedAt?: true
    metadata?: true
    userId?: true
    badgeId?: true
    _all?: true
  }

  export type UserBadgeRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserBadgeRecord to aggregate.
     */
    where?: UserBadgeRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBadgeRecords to fetch.
     */
    orderBy?: UserBadgeRecordOrderByWithRelationInput | UserBadgeRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserBadgeRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBadgeRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBadgeRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserBadgeRecords
    **/
    _count?: true | UserBadgeRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserBadgeRecordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserBadgeRecordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserBadgeRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserBadgeRecordMaxAggregateInputType
  }

  export type GetUserBadgeRecordAggregateType<T extends UserBadgeRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateUserBadgeRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserBadgeRecord[P]>
      : GetScalarType<T[P], AggregateUserBadgeRecord[P]>
  }




  export type UserBadgeRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserBadgeRecordWhereInput
    orderBy?: UserBadgeRecordOrderByWithAggregationInput | UserBadgeRecordOrderByWithAggregationInput[]
    by: UserBadgeRecordScalarFieldEnum[] | UserBadgeRecordScalarFieldEnum
    having?: UserBadgeRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserBadgeRecordCountAggregateInputType | true
    _avg?: UserBadgeRecordAvgAggregateInputType
    _sum?: UserBadgeRecordSumAggregateInputType
    _min?: UserBadgeRecordMinAggregateInputType
    _max?: UserBadgeRecordMaxAggregateInputType
  }

  export type UserBadgeRecordGroupByOutputType = {
    id: string
    progress: number
    awardedAt: Date
    metadata: string | null
    userId: string
    badgeId: string
    _count: UserBadgeRecordCountAggregateOutputType | null
    _avg: UserBadgeRecordAvgAggregateOutputType | null
    _sum: UserBadgeRecordSumAggregateOutputType | null
    _min: UserBadgeRecordMinAggregateOutputType | null
    _max: UserBadgeRecordMaxAggregateOutputType | null
  }

  type GetUserBadgeRecordGroupByPayload<T extends UserBadgeRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserBadgeRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserBadgeRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserBadgeRecordGroupByOutputType[P]>
            : GetScalarType<T[P], UserBadgeRecordGroupByOutputType[P]>
        }
      >
    >


  export type UserBadgeRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    progress?: boolean
    awardedAt?: boolean
    metadata?: boolean
    userId?: boolean
    badgeId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    badge?: boolean | UserBadgeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userBadgeRecord"]>


  export type UserBadgeRecordSelectScalar = {
    id?: boolean
    progress?: boolean
    awardedAt?: boolean
    metadata?: boolean
    userId?: boolean
    badgeId?: boolean
  }

  export type UserBadgeRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    badge?: boolean | UserBadgeDefaultArgs<ExtArgs>
  }

  export type $UserBadgeRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserBadgeRecord"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      badge: Prisma.$UserBadgePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      progress: number
      awardedAt: Date
      metadata: string | null
      userId: string
      badgeId: string
    }, ExtArgs["result"]["userBadgeRecord"]>
    composites: {}
  }

  type UserBadgeRecordGetPayload<S extends boolean | null | undefined | UserBadgeRecordDefaultArgs> = $Result.GetResult<Prisma.$UserBadgeRecordPayload, S>

  type UserBadgeRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserBadgeRecordFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserBadgeRecordCountAggregateInputType | true
    }

  export interface UserBadgeRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserBadgeRecord'], meta: { name: 'UserBadgeRecord' } }
    /**
     * Find zero or one UserBadgeRecord that matches the filter.
     * @param {UserBadgeRecordFindUniqueArgs} args - Arguments to find a UserBadgeRecord
     * @example
     * // Get one UserBadgeRecord
     * const userBadgeRecord = await prisma.userBadgeRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserBadgeRecordFindUniqueArgs>(args: SelectSubset<T, UserBadgeRecordFindUniqueArgs<ExtArgs>>): Prisma__UserBadgeRecordClient<$Result.GetResult<Prisma.$UserBadgeRecordPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserBadgeRecord that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserBadgeRecordFindUniqueOrThrowArgs} args - Arguments to find a UserBadgeRecord
     * @example
     * // Get one UserBadgeRecord
     * const userBadgeRecord = await prisma.userBadgeRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserBadgeRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, UserBadgeRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserBadgeRecordClient<$Result.GetResult<Prisma.$UserBadgeRecordPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserBadgeRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeRecordFindFirstArgs} args - Arguments to find a UserBadgeRecord
     * @example
     * // Get one UserBadgeRecord
     * const userBadgeRecord = await prisma.userBadgeRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserBadgeRecordFindFirstArgs>(args?: SelectSubset<T, UserBadgeRecordFindFirstArgs<ExtArgs>>): Prisma__UserBadgeRecordClient<$Result.GetResult<Prisma.$UserBadgeRecordPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserBadgeRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeRecordFindFirstOrThrowArgs} args - Arguments to find a UserBadgeRecord
     * @example
     * // Get one UserBadgeRecord
     * const userBadgeRecord = await prisma.userBadgeRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserBadgeRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, UserBadgeRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserBadgeRecordClient<$Result.GetResult<Prisma.$UserBadgeRecordPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserBadgeRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserBadgeRecords
     * const userBadgeRecords = await prisma.userBadgeRecord.findMany()
     * 
     * // Get first 10 UserBadgeRecords
     * const userBadgeRecords = await prisma.userBadgeRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userBadgeRecordWithIdOnly = await prisma.userBadgeRecord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserBadgeRecordFindManyArgs>(args?: SelectSubset<T, UserBadgeRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBadgeRecordPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserBadgeRecord.
     * @param {UserBadgeRecordCreateArgs} args - Arguments to create a UserBadgeRecord.
     * @example
     * // Create one UserBadgeRecord
     * const UserBadgeRecord = await prisma.userBadgeRecord.create({
     *   data: {
     *     // ... data to create a UserBadgeRecord
     *   }
     * })
     * 
     */
    create<T extends UserBadgeRecordCreateArgs>(args: SelectSubset<T, UserBadgeRecordCreateArgs<ExtArgs>>): Prisma__UserBadgeRecordClient<$Result.GetResult<Prisma.$UserBadgeRecordPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserBadgeRecords.
     * @param {UserBadgeRecordCreateManyArgs} args - Arguments to create many UserBadgeRecords.
     * @example
     * // Create many UserBadgeRecords
     * const userBadgeRecord = await prisma.userBadgeRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserBadgeRecordCreateManyArgs>(args?: SelectSubset<T, UserBadgeRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserBadgeRecord.
     * @param {UserBadgeRecordDeleteArgs} args - Arguments to delete one UserBadgeRecord.
     * @example
     * // Delete one UserBadgeRecord
     * const UserBadgeRecord = await prisma.userBadgeRecord.delete({
     *   where: {
     *     // ... filter to delete one UserBadgeRecord
     *   }
     * })
     * 
     */
    delete<T extends UserBadgeRecordDeleteArgs>(args: SelectSubset<T, UserBadgeRecordDeleteArgs<ExtArgs>>): Prisma__UserBadgeRecordClient<$Result.GetResult<Prisma.$UserBadgeRecordPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserBadgeRecord.
     * @param {UserBadgeRecordUpdateArgs} args - Arguments to update one UserBadgeRecord.
     * @example
     * // Update one UserBadgeRecord
     * const userBadgeRecord = await prisma.userBadgeRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserBadgeRecordUpdateArgs>(args: SelectSubset<T, UserBadgeRecordUpdateArgs<ExtArgs>>): Prisma__UserBadgeRecordClient<$Result.GetResult<Prisma.$UserBadgeRecordPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserBadgeRecords.
     * @param {UserBadgeRecordDeleteManyArgs} args - Arguments to filter UserBadgeRecords to delete.
     * @example
     * // Delete a few UserBadgeRecords
     * const { count } = await prisma.userBadgeRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserBadgeRecordDeleteManyArgs>(args?: SelectSubset<T, UserBadgeRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserBadgeRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserBadgeRecords
     * const userBadgeRecord = await prisma.userBadgeRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserBadgeRecordUpdateManyArgs>(args: SelectSubset<T, UserBadgeRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserBadgeRecord.
     * @param {UserBadgeRecordUpsertArgs} args - Arguments to update or create a UserBadgeRecord.
     * @example
     * // Update or create a UserBadgeRecord
     * const userBadgeRecord = await prisma.userBadgeRecord.upsert({
     *   create: {
     *     // ... data to create a UserBadgeRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserBadgeRecord we want to update
     *   }
     * })
     */
    upsert<T extends UserBadgeRecordUpsertArgs>(args: SelectSubset<T, UserBadgeRecordUpsertArgs<ExtArgs>>): Prisma__UserBadgeRecordClient<$Result.GetResult<Prisma.$UserBadgeRecordPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserBadgeRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeRecordCountArgs} args - Arguments to filter UserBadgeRecords to count.
     * @example
     * // Count the number of UserBadgeRecords
     * const count = await prisma.userBadgeRecord.count({
     *   where: {
     *     // ... the filter for the UserBadgeRecords we want to count
     *   }
     * })
    **/
    count<T extends UserBadgeRecordCountArgs>(
      args?: Subset<T, UserBadgeRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserBadgeRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserBadgeRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserBadgeRecordAggregateArgs>(args: Subset<T, UserBadgeRecordAggregateArgs>): Prisma.PrismaPromise<GetUserBadgeRecordAggregateType<T>>

    /**
     * Group by UserBadgeRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserBadgeRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserBadgeRecordGroupByArgs['orderBy'] }
        : { orderBy?: UserBadgeRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserBadgeRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserBadgeRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserBadgeRecord model
   */
  readonly fields: UserBadgeRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserBadgeRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserBadgeRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    badge<T extends UserBadgeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserBadgeDefaultArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserBadgeRecord model
   */ 
  interface UserBadgeRecordFieldRefs {
    readonly id: FieldRef<"UserBadgeRecord", 'String'>
    readonly progress: FieldRef<"UserBadgeRecord", 'Int'>
    readonly awardedAt: FieldRef<"UserBadgeRecord", 'DateTime'>
    readonly metadata: FieldRef<"UserBadgeRecord", 'String'>
    readonly userId: FieldRef<"UserBadgeRecord", 'String'>
    readonly badgeId: FieldRef<"UserBadgeRecord", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserBadgeRecord findUnique
   */
  export type UserBadgeRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadgeRecord
     */
    select?: UserBadgeRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeRecordInclude<ExtArgs> | null
    /**
     * Filter, which UserBadgeRecord to fetch.
     */
    where: UserBadgeRecordWhereUniqueInput
  }

  /**
   * UserBadgeRecord findUniqueOrThrow
   */
  export type UserBadgeRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadgeRecord
     */
    select?: UserBadgeRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeRecordInclude<ExtArgs> | null
    /**
     * Filter, which UserBadgeRecord to fetch.
     */
    where: UserBadgeRecordWhereUniqueInput
  }

  /**
   * UserBadgeRecord findFirst
   */
  export type UserBadgeRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadgeRecord
     */
    select?: UserBadgeRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeRecordInclude<ExtArgs> | null
    /**
     * Filter, which UserBadgeRecord to fetch.
     */
    where?: UserBadgeRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBadgeRecords to fetch.
     */
    orderBy?: UserBadgeRecordOrderByWithRelationInput | UserBadgeRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserBadgeRecords.
     */
    cursor?: UserBadgeRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBadgeRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBadgeRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserBadgeRecords.
     */
    distinct?: UserBadgeRecordScalarFieldEnum | UserBadgeRecordScalarFieldEnum[]
  }

  /**
   * UserBadgeRecord findFirstOrThrow
   */
  export type UserBadgeRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadgeRecord
     */
    select?: UserBadgeRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeRecordInclude<ExtArgs> | null
    /**
     * Filter, which UserBadgeRecord to fetch.
     */
    where?: UserBadgeRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBadgeRecords to fetch.
     */
    orderBy?: UserBadgeRecordOrderByWithRelationInput | UserBadgeRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserBadgeRecords.
     */
    cursor?: UserBadgeRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBadgeRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBadgeRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserBadgeRecords.
     */
    distinct?: UserBadgeRecordScalarFieldEnum | UserBadgeRecordScalarFieldEnum[]
  }

  /**
   * UserBadgeRecord findMany
   */
  export type UserBadgeRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadgeRecord
     */
    select?: UserBadgeRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeRecordInclude<ExtArgs> | null
    /**
     * Filter, which UserBadgeRecords to fetch.
     */
    where?: UserBadgeRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBadgeRecords to fetch.
     */
    orderBy?: UserBadgeRecordOrderByWithRelationInput | UserBadgeRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserBadgeRecords.
     */
    cursor?: UserBadgeRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBadgeRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBadgeRecords.
     */
    skip?: number
    distinct?: UserBadgeRecordScalarFieldEnum | UserBadgeRecordScalarFieldEnum[]
  }

  /**
   * UserBadgeRecord create
   */
  export type UserBadgeRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadgeRecord
     */
    select?: UserBadgeRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a UserBadgeRecord.
     */
    data: XOR<UserBadgeRecordCreateInput, UserBadgeRecordUncheckedCreateInput>
  }

  /**
   * UserBadgeRecord createMany
   */
  export type UserBadgeRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserBadgeRecords.
     */
    data: UserBadgeRecordCreateManyInput | UserBadgeRecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserBadgeRecord update
   */
  export type UserBadgeRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadgeRecord
     */
    select?: UserBadgeRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a UserBadgeRecord.
     */
    data: XOR<UserBadgeRecordUpdateInput, UserBadgeRecordUncheckedUpdateInput>
    /**
     * Choose, which UserBadgeRecord to update.
     */
    where: UserBadgeRecordWhereUniqueInput
  }

  /**
   * UserBadgeRecord updateMany
   */
  export type UserBadgeRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserBadgeRecords.
     */
    data: XOR<UserBadgeRecordUpdateManyMutationInput, UserBadgeRecordUncheckedUpdateManyInput>
    /**
     * Filter which UserBadgeRecords to update
     */
    where?: UserBadgeRecordWhereInput
  }

  /**
   * UserBadgeRecord upsert
   */
  export type UserBadgeRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadgeRecord
     */
    select?: UserBadgeRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the UserBadgeRecord to update in case it exists.
     */
    where: UserBadgeRecordWhereUniqueInput
    /**
     * In case the UserBadgeRecord found by the `where` argument doesn't exist, create a new UserBadgeRecord with this data.
     */
    create: XOR<UserBadgeRecordCreateInput, UserBadgeRecordUncheckedCreateInput>
    /**
     * In case the UserBadgeRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserBadgeRecordUpdateInput, UserBadgeRecordUncheckedUpdateInput>
  }

  /**
   * UserBadgeRecord delete
   */
  export type UserBadgeRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadgeRecord
     */
    select?: UserBadgeRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeRecordInclude<ExtArgs> | null
    /**
     * Filter which UserBadgeRecord to delete.
     */
    where: UserBadgeRecordWhereUniqueInput
  }

  /**
   * UserBadgeRecord deleteMany
   */
  export type UserBadgeRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserBadgeRecords to delete
     */
    where?: UserBadgeRecordWhereInput
  }

  /**
   * UserBadgeRecord without action
   */
  export type UserBadgeRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadgeRecord
     */
    select?: UserBadgeRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeRecordInclude<ExtArgs> | null
  }


  /**
   * Model DailyCheckIn
   */

  export type AggregateDailyCheckIn = {
    _count: DailyCheckInCountAggregateOutputType | null
    _avg: DailyCheckInAvgAggregateOutputType | null
    _sum: DailyCheckInSumAggregateOutputType | null
    _min: DailyCheckInMinAggregateOutputType | null
    _max: DailyCheckInMaxAggregateOutputType | null
  }

  export type DailyCheckInAvgAggregateOutputType = {
    credits: number | null
    consecutiveDays: number | null
  }

  export type DailyCheckInSumAggregateOutputType = {
    credits: number | null
    consecutiveDays: number | null
  }

  export type DailyCheckInMinAggregateOutputType = {
    id: string | null
    checkInDate: Date | null
    credits: number | null
    consecutiveDays: number | null
    createdAt: Date | null
    userId: string | null
  }

  export type DailyCheckInMaxAggregateOutputType = {
    id: string | null
    checkInDate: Date | null
    credits: number | null
    consecutiveDays: number | null
    createdAt: Date | null
    userId: string | null
  }

  export type DailyCheckInCountAggregateOutputType = {
    id: number
    checkInDate: number
    credits: number
    consecutiveDays: number
    createdAt: number
    userId: number
    _all: number
  }


  export type DailyCheckInAvgAggregateInputType = {
    credits?: true
    consecutiveDays?: true
  }

  export type DailyCheckInSumAggregateInputType = {
    credits?: true
    consecutiveDays?: true
  }

  export type DailyCheckInMinAggregateInputType = {
    id?: true
    checkInDate?: true
    credits?: true
    consecutiveDays?: true
    createdAt?: true
    userId?: true
  }

  export type DailyCheckInMaxAggregateInputType = {
    id?: true
    checkInDate?: true
    credits?: true
    consecutiveDays?: true
    createdAt?: true
    userId?: true
  }

  export type DailyCheckInCountAggregateInputType = {
    id?: true
    checkInDate?: true
    credits?: true
    consecutiveDays?: true
    createdAt?: true
    userId?: true
    _all?: true
  }

  export type DailyCheckInAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DailyCheckIn to aggregate.
     */
    where?: DailyCheckInWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyCheckIns to fetch.
     */
    orderBy?: DailyCheckInOrderByWithRelationInput | DailyCheckInOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DailyCheckInWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyCheckIns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyCheckIns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DailyCheckIns
    **/
    _count?: true | DailyCheckInCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DailyCheckInAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DailyCheckInSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DailyCheckInMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DailyCheckInMaxAggregateInputType
  }

  export type GetDailyCheckInAggregateType<T extends DailyCheckInAggregateArgs> = {
        [P in keyof T & keyof AggregateDailyCheckIn]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDailyCheckIn[P]>
      : GetScalarType<T[P], AggregateDailyCheckIn[P]>
  }




  export type DailyCheckInGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DailyCheckInWhereInput
    orderBy?: DailyCheckInOrderByWithAggregationInput | DailyCheckInOrderByWithAggregationInput[]
    by: DailyCheckInScalarFieldEnum[] | DailyCheckInScalarFieldEnum
    having?: DailyCheckInScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DailyCheckInCountAggregateInputType | true
    _avg?: DailyCheckInAvgAggregateInputType
    _sum?: DailyCheckInSumAggregateInputType
    _min?: DailyCheckInMinAggregateInputType
    _max?: DailyCheckInMaxAggregateInputType
  }

  export type DailyCheckInGroupByOutputType = {
    id: string
    checkInDate: Date
    credits: number
    consecutiveDays: number
    createdAt: Date
    userId: string
    _count: DailyCheckInCountAggregateOutputType | null
    _avg: DailyCheckInAvgAggregateOutputType | null
    _sum: DailyCheckInSumAggregateOutputType | null
    _min: DailyCheckInMinAggregateOutputType | null
    _max: DailyCheckInMaxAggregateOutputType | null
  }

  type GetDailyCheckInGroupByPayload<T extends DailyCheckInGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DailyCheckInGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DailyCheckInGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DailyCheckInGroupByOutputType[P]>
            : GetScalarType<T[P], DailyCheckInGroupByOutputType[P]>
        }
      >
    >


  export type DailyCheckInSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    checkInDate?: boolean
    credits?: boolean
    consecutiveDays?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dailyCheckIn"]>


  export type DailyCheckInSelectScalar = {
    id?: boolean
    checkInDate?: boolean
    credits?: boolean
    consecutiveDays?: boolean
    createdAt?: boolean
    userId?: boolean
  }

  export type DailyCheckInInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DailyCheckInPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DailyCheckIn"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      checkInDate: Date
      credits: number
      consecutiveDays: number
      createdAt: Date
      userId: string
    }, ExtArgs["result"]["dailyCheckIn"]>
    composites: {}
  }

  type DailyCheckInGetPayload<S extends boolean | null | undefined | DailyCheckInDefaultArgs> = $Result.GetResult<Prisma.$DailyCheckInPayload, S>

  type DailyCheckInCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DailyCheckInFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DailyCheckInCountAggregateInputType | true
    }

  export interface DailyCheckInDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DailyCheckIn'], meta: { name: 'DailyCheckIn' } }
    /**
     * Find zero or one DailyCheckIn that matches the filter.
     * @param {DailyCheckInFindUniqueArgs} args - Arguments to find a DailyCheckIn
     * @example
     * // Get one DailyCheckIn
     * const dailyCheckIn = await prisma.dailyCheckIn.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DailyCheckInFindUniqueArgs>(args: SelectSubset<T, DailyCheckInFindUniqueArgs<ExtArgs>>): Prisma__DailyCheckInClient<$Result.GetResult<Prisma.$DailyCheckInPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DailyCheckIn that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DailyCheckInFindUniqueOrThrowArgs} args - Arguments to find a DailyCheckIn
     * @example
     * // Get one DailyCheckIn
     * const dailyCheckIn = await prisma.dailyCheckIn.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DailyCheckInFindUniqueOrThrowArgs>(args: SelectSubset<T, DailyCheckInFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DailyCheckInClient<$Result.GetResult<Prisma.$DailyCheckInPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DailyCheckIn that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyCheckInFindFirstArgs} args - Arguments to find a DailyCheckIn
     * @example
     * // Get one DailyCheckIn
     * const dailyCheckIn = await prisma.dailyCheckIn.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DailyCheckInFindFirstArgs>(args?: SelectSubset<T, DailyCheckInFindFirstArgs<ExtArgs>>): Prisma__DailyCheckInClient<$Result.GetResult<Prisma.$DailyCheckInPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DailyCheckIn that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyCheckInFindFirstOrThrowArgs} args - Arguments to find a DailyCheckIn
     * @example
     * // Get one DailyCheckIn
     * const dailyCheckIn = await prisma.dailyCheckIn.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DailyCheckInFindFirstOrThrowArgs>(args?: SelectSubset<T, DailyCheckInFindFirstOrThrowArgs<ExtArgs>>): Prisma__DailyCheckInClient<$Result.GetResult<Prisma.$DailyCheckInPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DailyCheckIns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyCheckInFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DailyCheckIns
     * const dailyCheckIns = await prisma.dailyCheckIn.findMany()
     * 
     * // Get first 10 DailyCheckIns
     * const dailyCheckIns = await prisma.dailyCheckIn.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dailyCheckInWithIdOnly = await prisma.dailyCheckIn.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DailyCheckInFindManyArgs>(args?: SelectSubset<T, DailyCheckInFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyCheckInPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DailyCheckIn.
     * @param {DailyCheckInCreateArgs} args - Arguments to create a DailyCheckIn.
     * @example
     * // Create one DailyCheckIn
     * const DailyCheckIn = await prisma.dailyCheckIn.create({
     *   data: {
     *     // ... data to create a DailyCheckIn
     *   }
     * })
     * 
     */
    create<T extends DailyCheckInCreateArgs>(args: SelectSubset<T, DailyCheckInCreateArgs<ExtArgs>>): Prisma__DailyCheckInClient<$Result.GetResult<Prisma.$DailyCheckInPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DailyCheckIns.
     * @param {DailyCheckInCreateManyArgs} args - Arguments to create many DailyCheckIns.
     * @example
     * // Create many DailyCheckIns
     * const dailyCheckIn = await prisma.dailyCheckIn.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DailyCheckInCreateManyArgs>(args?: SelectSubset<T, DailyCheckInCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DailyCheckIn.
     * @param {DailyCheckInDeleteArgs} args - Arguments to delete one DailyCheckIn.
     * @example
     * // Delete one DailyCheckIn
     * const DailyCheckIn = await prisma.dailyCheckIn.delete({
     *   where: {
     *     // ... filter to delete one DailyCheckIn
     *   }
     * })
     * 
     */
    delete<T extends DailyCheckInDeleteArgs>(args: SelectSubset<T, DailyCheckInDeleteArgs<ExtArgs>>): Prisma__DailyCheckInClient<$Result.GetResult<Prisma.$DailyCheckInPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DailyCheckIn.
     * @param {DailyCheckInUpdateArgs} args - Arguments to update one DailyCheckIn.
     * @example
     * // Update one DailyCheckIn
     * const dailyCheckIn = await prisma.dailyCheckIn.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DailyCheckInUpdateArgs>(args: SelectSubset<T, DailyCheckInUpdateArgs<ExtArgs>>): Prisma__DailyCheckInClient<$Result.GetResult<Prisma.$DailyCheckInPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DailyCheckIns.
     * @param {DailyCheckInDeleteManyArgs} args - Arguments to filter DailyCheckIns to delete.
     * @example
     * // Delete a few DailyCheckIns
     * const { count } = await prisma.dailyCheckIn.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DailyCheckInDeleteManyArgs>(args?: SelectSubset<T, DailyCheckInDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DailyCheckIns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyCheckInUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DailyCheckIns
     * const dailyCheckIn = await prisma.dailyCheckIn.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DailyCheckInUpdateManyArgs>(args: SelectSubset<T, DailyCheckInUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DailyCheckIn.
     * @param {DailyCheckInUpsertArgs} args - Arguments to update or create a DailyCheckIn.
     * @example
     * // Update or create a DailyCheckIn
     * const dailyCheckIn = await prisma.dailyCheckIn.upsert({
     *   create: {
     *     // ... data to create a DailyCheckIn
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DailyCheckIn we want to update
     *   }
     * })
     */
    upsert<T extends DailyCheckInUpsertArgs>(args: SelectSubset<T, DailyCheckInUpsertArgs<ExtArgs>>): Prisma__DailyCheckInClient<$Result.GetResult<Prisma.$DailyCheckInPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DailyCheckIns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyCheckInCountArgs} args - Arguments to filter DailyCheckIns to count.
     * @example
     * // Count the number of DailyCheckIns
     * const count = await prisma.dailyCheckIn.count({
     *   where: {
     *     // ... the filter for the DailyCheckIns we want to count
     *   }
     * })
    **/
    count<T extends DailyCheckInCountArgs>(
      args?: Subset<T, DailyCheckInCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DailyCheckInCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DailyCheckIn.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyCheckInAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DailyCheckInAggregateArgs>(args: Subset<T, DailyCheckInAggregateArgs>): Prisma.PrismaPromise<GetDailyCheckInAggregateType<T>>

    /**
     * Group by DailyCheckIn.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyCheckInGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DailyCheckInGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DailyCheckInGroupByArgs['orderBy'] }
        : { orderBy?: DailyCheckInGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DailyCheckInGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDailyCheckInGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DailyCheckIn model
   */
  readonly fields: DailyCheckInFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DailyCheckIn.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DailyCheckInClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DailyCheckIn model
   */ 
  interface DailyCheckInFieldRefs {
    readonly id: FieldRef<"DailyCheckIn", 'String'>
    readonly checkInDate: FieldRef<"DailyCheckIn", 'DateTime'>
    readonly credits: FieldRef<"DailyCheckIn", 'Int'>
    readonly consecutiveDays: FieldRef<"DailyCheckIn", 'Int'>
    readonly createdAt: FieldRef<"DailyCheckIn", 'DateTime'>
    readonly userId: FieldRef<"DailyCheckIn", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DailyCheckIn findUnique
   */
  export type DailyCheckInFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyCheckIn
     */
    select?: DailyCheckInSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyCheckInInclude<ExtArgs> | null
    /**
     * Filter, which DailyCheckIn to fetch.
     */
    where: DailyCheckInWhereUniqueInput
  }

  /**
   * DailyCheckIn findUniqueOrThrow
   */
  export type DailyCheckInFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyCheckIn
     */
    select?: DailyCheckInSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyCheckInInclude<ExtArgs> | null
    /**
     * Filter, which DailyCheckIn to fetch.
     */
    where: DailyCheckInWhereUniqueInput
  }

  /**
   * DailyCheckIn findFirst
   */
  export type DailyCheckInFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyCheckIn
     */
    select?: DailyCheckInSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyCheckInInclude<ExtArgs> | null
    /**
     * Filter, which DailyCheckIn to fetch.
     */
    where?: DailyCheckInWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyCheckIns to fetch.
     */
    orderBy?: DailyCheckInOrderByWithRelationInput | DailyCheckInOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DailyCheckIns.
     */
    cursor?: DailyCheckInWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyCheckIns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyCheckIns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DailyCheckIns.
     */
    distinct?: DailyCheckInScalarFieldEnum | DailyCheckInScalarFieldEnum[]
  }

  /**
   * DailyCheckIn findFirstOrThrow
   */
  export type DailyCheckInFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyCheckIn
     */
    select?: DailyCheckInSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyCheckInInclude<ExtArgs> | null
    /**
     * Filter, which DailyCheckIn to fetch.
     */
    where?: DailyCheckInWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyCheckIns to fetch.
     */
    orderBy?: DailyCheckInOrderByWithRelationInput | DailyCheckInOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DailyCheckIns.
     */
    cursor?: DailyCheckInWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyCheckIns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyCheckIns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DailyCheckIns.
     */
    distinct?: DailyCheckInScalarFieldEnum | DailyCheckInScalarFieldEnum[]
  }

  /**
   * DailyCheckIn findMany
   */
  export type DailyCheckInFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyCheckIn
     */
    select?: DailyCheckInSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyCheckInInclude<ExtArgs> | null
    /**
     * Filter, which DailyCheckIns to fetch.
     */
    where?: DailyCheckInWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyCheckIns to fetch.
     */
    orderBy?: DailyCheckInOrderByWithRelationInput | DailyCheckInOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DailyCheckIns.
     */
    cursor?: DailyCheckInWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyCheckIns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyCheckIns.
     */
    skip?: number
    distinct?: DailyCheckInScalarFieldEnum | DailyCheckInScalarFieldEnum[]
  }

  /**
   * DailyCheckIn create
   */
  export type DailyCheckInCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyCheckIn
     */
    select?: DailyCheckInSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyCheckInInclude<ExtArgs> | null
    /**
     * The data needed to create a DailyCheckIn.
     */
    data: XOR<DailyCheckInCreateInput, DailyCheckInUncheckedCreateInput>
  }

  /**
   * DailyCheckIn createMany
   */
  export type DailyCheckInCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DailyCheckIns.
     */
    data: DailyCheckInCreateManyInput | DailyCheckInCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DailyCheckIn update
   */
  export type DailyCheckInUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyCheckIn
     */
    select?: DailyCheckInSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyCheckInInclude<ExtArgs> | null
    /**
     * The data needed to update a DailyCheckIn.
     */
    data: XOR<DailyCheckInUpdateInput, DailyCheckInUncheckedUpdateInput>
    /**
     * Choose, which DailyCheckIn to update.
     */
    where: DailyCheckInWhereUniqueInput
  }

  /**
   * DailyCheckIn updateMany
   */
  export type DailyCheckInUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DailyCheckIns.
     */
    data: XOR<DailyCheckInUpdateManyMutationInput, DailyCheckInUncheckedUpdateManyInput>
    /**
     * Filter which DailyCheckIns to update
     */
    where?: DailyCheckInWhereInput
  }

  /**
   * DailyCheckIn upsert
   */
  export type DailyCheckInUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyCheckIn
     */
    select?: DailyCheckInSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyCheckInInclude<ExtArgs> | null
    /**
     * The filter to search for the DailyCheckIn to update in case it exists.
     */
    where: DailyCheckInWhereUniqueInput
    /**
     * In case the DailyCheckIn found by the `where` argument doesn't exist, create a new DailyCheckIn with this data.
     */
    create: XOR<DailyCheckInCreateInput, DailyCheckInUncheckedCreateInput>
    /**
     * In case the DailyCheckIn was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DailyCheckInUpdateInput, DailyCheckInUncheckedUpdateInput>
  }

  /**
   * DailyCheckIn delete
   */
  export type DailyCheckInDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyCheckIn
     */
    select?: DailyCheckInSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyCheckInInclude<ExtArgs> | null
    /**
     * Filter which DailyCheckIn to delete.
     */
    where: DailyCheckInWhereUniqueInput
  }

  /**
   * DailyCheckIn deleteMany
   */
  export type DailyCheckInDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DailyCheckIns to delete
     */
    where?: DailyCheckInWhereInput
  }

  /**
   * DailyCheckIn without action
   */
  export type DailyCheckInDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyCheckIn
     */
    select?: DailyCheckInSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyCheckInInclude<ExtArgs> | null
  }


  /**
   * Model Role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleAvgAggregateOutputType = {
    level: number | null
  }

  export type RoleSumAggregateOutputType = {
    level: number | null
  }

  export type RoleMinAggregateOutputType = {
    id: string | null
    name: string | null
    displayName: string | null
    description: string | null
    level: number | null
    type: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoleMaxAggregateOutputType = {
    id: string | null
    name: string | null
    displayName: string | null
    description: string | null
    level: number | null
    type: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoleCountAggregateOutputType = {
    id: number
    name: number
    displayName: number
    description: number
    level: number
    type: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RoleAvgAggregateInputType = {
    level?: true
  }

  export type RoleSumAggregateInputType = {
    level?: true
  }

  export type RoleMinAggregateInputType = {
    id?: true
    name?: true
    displayName?: true
    description?: true
    level?: true
    type?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoleMaxAggregateInputType = {
    id?: true
    name?: true
    displayName?: true
    description?: true
    level?: true
    type?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoleCountAggregateInputType = {
    id?: true
    name?: true
    displayName?: true
    description?: true
    level?: true
    type?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Role to aggregate.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithAggregationInput | RoleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _avg?: RoleAvgAggregateInputType
    _sum?: RoleSumAggregateInputType
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    id: string
    name: string
    displayName: string
    description: string | null
    level: number
    type: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    displayName?: boolean
    description?: boolean
    level?: boolean
    type?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userRoles?: boolean | Role$userRolesArgs<ExtArgs>
    permissions?: boolean | Role$permissionsArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>


  export type RoleSelectScalar = {
    id?: boolean
    name?: boolean
    displayName?: boolean
    description?: boolean
    level?: boolean
    type?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userRoles?: boolean | Role$userRolesArgs<ExtArgs>
    permissions?: boolean | Role$permissionsArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $RolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Role"
    objects: {
      userRoles: Prisma.$UserRolePayload<ExtArgs>[]
      permissions: Prisma.$RolePermissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      displayName: string
      description: string | null
      level: number
      type: string
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["role"]>
    composites: {}
  }

  type RoleGetPayload<S extends boolean | null | undefined | RoleDefaultArgs> = $Result.GetResult<Prisma.$RolePayload, S>

  type RoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RoleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface RoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Role'], meta: { name: 'Role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoleFindUniqueArgs>(args: SelectSubset<T, RoleFindUniqueArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Role that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs>(args: SelectSubset<T, RoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoleFindFirstArgs>(args?: SelectSubset<T, RoleFindFirstArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoleFindFirstOrThrowArgs>(args?: SelectSubset<T, RoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoleFindManyArgs>(args?: SelectSubset<T, RoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
     */
    create<T extends RoleCreateArgs>(args: SelectSubset<T, RoleCreateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Roles.
     * @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoleCreateManyArgs>(args?: SelectSubset<T, RoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
     */
    delete<T extends RoleDeleteArgs>(args: SelectSubset<T, RoleDeleteArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoleUpdateArgs>(args: SelectSubset<T, RoleUpdateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoleDeleteManyArgs>(args?: SelectSubset<T, RoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoleUpdateManyArgs>(args: SelectSubset<T, RoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
     */
    upsert<T extends RoleUpsertArgs>(args: SelectSubset<T, RoleUpsertArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Role model
   */
  readonly fields: RoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userRoles<T extends Role$userRolesArgs<ExtArgs> = {}>(args?: Subset<T, Role$userRolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findMany"> | Null>
    permissions<T extends Role$permissionsArgs<ExtArgs> = {}>(args?: Subset<T, Role$permissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Role model
   */ 
  interface RoleFieldRefs {
    readonly id: FieldRef<"Role", 'String'>
    readonly name: FieldRef<"Role", 'String'>
    readonly displayName: FieldRef<"Role", 'String'>
    readonly description: FieldRef<"Role", 'String'>
    readonly level: FieldRef<"Role", 'Int'>
    readonly type: FieldRef<"Role", 'String'>
    readonly isActive: FieldRef<"Role", 'Boolean'>
    readonly createdAt: FieldRef<"Role", 'DateTime'>
    readonly updatedAt: FieldRef<"Role", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Role findUnique
   */
  export type RoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findUniqueOrThrow
   */
  export type RoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findFirst
   */
  export type RoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findFirstOrThrow
   */
  export type RoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findMany
   */
  export type RoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role create
   */
  export type RoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to create a Role.
     */
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }

  /**
   * Role createMany
   */
  export type RoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role update
   */
  export type RoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to update a Role.
     */
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
  }

  /**
   * Role upsert
   */
  export type RoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The filter to search for the Role to update in case it exists.
     */
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     */
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }

  /**
   * Role delete
   */
  export type RoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter which Role to delete.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RoleWhereInput
  }

  /**
   * Role.userRoles
   */
  export type Role$userRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    where?: UserRoleWhereInput
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    cursor?: UserRoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * Role.permissions
   */
  export type Role$permissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    where?: RolePermissionWhereInput
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    cursor?: RolePermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * Role without action
   */
  export type RoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
  }


  /**
   * Model Permission
   */

  export type AggregatePermission = {
    _count: PermissionCountAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  export type PermissionMinAggregateOutputType = {
    id: string | null
    name: string | null
    displayName: string | null
    description: string | null
    module: string | null
    action: string | null
    resource: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PermissionMaxAggregateOutputType = {
    id: string | null
    name: string | null
    displayName: string | null
    description: string | null
    module: string | null
    action: string | null
    resource: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PermissionCountAggregateOutputType = {
    id: number
    name: number
    displayName: number
    description: number
    module: number
    action: number
    resource: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PermissionMinAggregateInputType = {
    id?: true
    name?: true
    displayName?: true
    description?: true
    module?: true
    action?: true
    resource?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PermissionMaxAggregateInputType = {
    id?: true
    name?: true
    displayName?: true
    description?: true
    module?: true
    action?: true
    resource?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PermissionCountAggregateInputType = {
    id?: true
    name?: true
    displayName?: true
    description?: true
    module?: true
    action?: true
    resource?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Permission to aggregate.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Permissions
    **/
    _count?: true | PermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PermissionMaxAggregateInputType
  }

  export type GetPermissionAggregateType<T extends PermissionAggregateArgs> = {
        [P in keyof T & keyof AggregatePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePermission[P]>
      : GetScalarType<T[P], AggregatePermission[P]>
  }




  export type PermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PermissionWhereInput
    orderBy?: PermissionOrderByWithAggregationInput | PermissionOrderByWithAggregationInput[]
    by: PermissionScalarFieldEnum[] | PermissionScalarFieldEnum
    having?: PermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PermissionCountAggregateInputType | true
    _min?: PermissionMinAggregateInputType
    _max?: PermissionMaxAggregateInputType
  }

  export type PermissionGroupByOutputType = {
    id: string
    name: string
    displayName: string
    description: string | null
    module: string
    action: string
    resource: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: PermissionCountAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  type GetPermissionGroupByPayload<T extends PermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PermissionGroupByOutputType[P]>
            : GetScalarType<T[P], PermissionGroupByOutputType[P]>
        }
      >
    >


  export type PermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    displayName?: boolean
    description?: boolean
    module?: boolean
    action?: boolean
    resource?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    roles?: boolean | Permission$rolesArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["permission"]>


  export type PermissionSelectScalar = {
    id?: boolean
    name?: boolean
    displayName?: boolean
    description?: boolean
    module?: boolean
    action?: boolean
    resource?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roles?: boolean | Permission$rolesArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $PermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Permission"
    objects: {
      roles: Prisma.$RolePermissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      displayName: string
      description: string | null
      module: string
      action: string
      resource: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["permission"]>
    composites: {}
  }

  type PermissionGetPayload<S extends boolean | null | undefined | PermissionDefaultArgs> = $Result.GetResult<Prisma.$PermissionPayload, S>

  type PermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PermissionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PermissionCountAggregateInputType | true
    }

  export interface PermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Permission'], meta: { name: 'Permission' } }
    /**
     * Find zero or one Permission that matches the filter.
     * @param {PermissionFindUniqueArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PermissionFindUniqueArgs>(args: SelectSubset<T, PermissionFindUniqueArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Permission that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PermissionFindUniqueOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, PermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Permission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindFirstArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PermissionFindFirstArgs>(args?: SelectSubset<T, PermissionFindFirstArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Permission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindFirstOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, PermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Permissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Permissions
     * const permissions = await prisma.permission.findMany()
     * 
     * // Get first 10 Permissions
     * const permissions = await prisma.permission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const permissionWithIdOnly = await prisma.permission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PermissionFindManyArgs>(args?: SelectSubset<T, PermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Permission.
     * @param {PermissionCreateArgs} args - Arguments to create a Permission.
     * @example
     * // Create one Permission
     * const Permission = await prisma.permission.create({
     *   data: {
     *     // ... data to create a Permission
     *   }
     * })
     * 
     */
    create<T extends PermissionCreateArgs>(args: SelectSubset<T, PermissionCreateArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Permissions.
     * @param {PermissionCreateManyArgs} args - Arguments to create many Permissions.
     * @example
     * // Create many Permissions
     * const permission = await prisma.permission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PermissionCreateManyArgs>(args?: SelectSubset<T, PermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Permission.
     * @param {PermissionDeleteArgs} args - Arguments to delete one Permission.
     * @example
     * // Delete one Permission
     * const Permission = await prisma.permission.delete({
     *   where: {
     *     // ... filter to delete one Permission
     *   }
     * })
     * 
     */
    delete<T extends PermissionDeleteArgs>(args: SelectSubset<T, PermissionDeleteArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Permission.
     * @param {PermissionUpdateArgs} args - Arguments to update one Permission.
     * @example
     * // Update one Permission
     * const permission = await prisma.permission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PermissionUpdateArgs>(args: SelectSubset<T, PermissionUpdateArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Permissions.
     * @param {PermissionDeleteManyArgs} args - Arguments to filter Permissions to delete.
     * @example
     * // Delete a few Permissions
     * const { count } = await prisma.permission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PermissionDeleteManyArgs>(args?: SelectSubset<T, PermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Permissions
     * const permission = await prisma.permission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PermissionUpdateManyArgs>(args: SelectSubset<T, PermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Permission.
     * @param {PermissionUpsertArgs} args - Arguments to update or create a Permission.
     * @example
     * // Update or create a Permission
     * const permission = await prisma.permission.upsert({
     *   create: {
     *     // ... data to create a Permission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Permission we want to update
     *   }
     * })
     */
    upsert<T extends PermissionUpsertArgs>(args: SelectSubset<T, PermissionUpsertArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionCountArgs} args - Arguments to filter Permissions to count.
     * @example
     * // Count the number of Permissions
     * const count = await prisma.permission.count({
     *   where: {
     *     // ... the filter for the Permissions we want to count
     *   }
     * })
    **/
    count<T extends PermissionCountArgs>(
      args?: Subset<T, PermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PermissionAggregateArgs>(args: Subset<T, PermissionAggregateArgs>): Prisma.PrismaPromise<GetPermissionAggregateType<T>>

    /**
     * Group by Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PermissionGroupByArgs['orderBy'] }
        : { orderBy?: PermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Permission model
   */
  readonly fields: PermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Permission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    roles<T extends Permission$rolesArgs<ExtArgs> = {}>(args?: Subset<T, Permission$rolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Permission model
   */ 
  interface PermissionFieldRefs {
    readonly id: FieldRef<"Permission", 'String'>
    readonly name: FieldRef<"Permission", 'String'>
    readonly displayName: FieldRef<"Permission", 'String'>
    readonly description: FieldRef<"Permission", 'String'>
    readonly module: FieldRef<"Permission", 'String'>
    readonly action: FieldRef<"Permission", 'String'>
    readonly resource: FieldRef<"Permission", 'String'>
    readonly isActive: FieldRef<"Permission", 'Boolean'>
    readonly createdAt: FieldRef<"Permission", 'DateTime'>
    readonly updatedAt: FieldRef<"Permission", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Permission findUnique
   */
  export type PermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission findUniqueOrThrow
   */
  export type PermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission findFirst
   */
  export type PermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Permissions.
     */
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission findFirstOrThrow
   */
  export type PermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Permissions.
     */
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission findMany
   */
  export type PermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permissions to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission create
   */
  export type PermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a Permission.
     */
    data: XOR<PermissionCreateInput, PermissionUncheckedCreateInput>
  }

  /**
   * Permission createMany
   */
  export type PermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Permissions.
     */
    data: PermissionCreateManyInput | PermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Permission update
   */
  export type PermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a Permission.
     */
    data: XOR<PermissionUpdateInput, PermissionUncheckedUpdateInput>
    /**
     * Choose, which Permission to update.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission updateMany
   */
  export type PermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Permissions.
     */
    data: XOR<PermissionUpdateManyMutationInput, PermissionUncheckedUpdateManyInput>
    /**
     * Filter which Permissions to update
     */
    where?: PermissionWhereInput
  }

  /**
   * Permission upsert
   */
  export type PermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the Permission to update in case it exists.
     */
    where: PermissionWhereUniqueInput
    /**
     * In case the Permission found by the `where` argument doesn't exist, create a new Permission with this data.
     */
    create: XOR<PermissionCreateInput, PermissionUncheckedCreateInput>
    /**
     * In case the Permission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PermissionUpdateInput, PermissionUncheckedUpdateInput>
  }

  /**
   * Permission delete
   */
  export type PermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter which Permission to delete.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission deleteMany
   */
  export type PermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Permissions to delete
     */
    where?: PermissionWhereInput
  }

  /**
   * Permission.roles
   */
  export type Permission$rolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    where?: RolePermissionWhereInput
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    cursor?: RolePermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * Permission without action
   */
  export type PermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
  }


  /**
   * Model RolePermission
   */

  export type AggregateRolePermission = {
    _count: RolePermissionCountAggregateOutputType | null
    _min: RolePermissionMinAggregateOutputType | null
    _max: RolePermissionMaxAggregateOutputType | null
  }

  export type RolePermissionMinAggregateOutputType = {
    id: string | null
    roleId: string | null
    permissionId: string | null
    createdAt: Date | null
  }

  export type RolePermissionMaxAggregateOutputType = {
    id: string | null
    roleId: string | null
    permissionId: string | null
    createdAt: Date | null
  }

  export type RolePermissionCountAggregateOutputType = {
    id: number
    roleId: number
    permissionId: number
    createdAt: number
    _all: number
  }


  export type RolePermissionMinAggregateInputType = {
    id?: true
    roleId?: true
    permissionId?: true
    createdAt?: true
  }

  export type RolePermissionMaxAggregateInputType = {
    id?: true
    roleId?: true
    permissionId?: true
    createdAt?: true
  }

  export type RolePermissionCountAggregateInputType = {
    id?: true
    roleId?: true
    permissionId?: true
    createdAt?: true
    _all?: true
  }

  export type RolePermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RolePermission to aggregate.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RolePermissions
    **/
    _count?: true | RolePermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RolePermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RolePermissionMaxAggregateInputType
  }

  export type GetRolePermissionAggregateType<T extends RolePermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateRolePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRolePermission[P]>
      : GetScalarType<T[P], AggregateRolePermission[P]>
  }




  export type RolePermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RolePermissionWhereInput
    orderBy?: RolePermissionOrderByWithAggregationInput | RolePermissionOrderByWithAggregationInput[]
    by: RolePermissionScalarFieldEnum[] | RolePermissionScalarFieldEnum
    having?: RolePermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RolePermissionCountAggregateInputType | true
    _min?: RolePermissionMinAggregateInputType
    _max?: RolePermissionMaxAggregateInputType
  }

  export type RolePermissionGroupByOutputType = {
    id: string
    roleId: string
    permissionId: string
    createdAt: Date
    _count: RolePermissionCountAggregateOutputType | null
    _min: RolePermissionMinAggregateOutputType | null
    _max: RolePermissionMaxAggregateOutputType | null
  }

  type GetRolePermissionGroupByPayload<T extends RolePermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RolePermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RolePermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RolePermissionGroupByOutputType[P]>
            : GetScalarType<T[P], RolePermissionGroupByOutputType[P]>
        }
      >
    >


  export type RolePermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roleId?: boolean
    permissionId?: boolean
    createdAt?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rolePermission"]>


  export type RolePermissionSelectScalar = {
    id?: boolean
    roleId?: boolean
    permissionId?: boolean
    createdAt?: boolean
  }

  export type RolePermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }

  export type $RolePermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RolePermission"
    objects: {
      role: Prisma.$RolePayload<ExtArgs>
      permission: Prisma.$PermissionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      roleId: string
      permissionId: string
      createdAt: Date
    }, ExtArgs["result"]["rolePermission"]>
    composites: {}
  }

  type RolePermissionGetPayload<S extends boolean | null | undefined | RolePermissionDefaultArgs> = $Result.GetResult<Prisma.$RolePermissionPayload, S>

  type RolePermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RolePermissionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RolePermissionCountAggregateInputType | true
    }

  export interface RolePermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RolePermission'], meta: { name: 'RolePermission' } }
    /**
     * Find zero or one RolePermission that matches the filter.
     * @param {RolePermissionFindUniqueArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RolePermissionFindUniqueArgs>(args: SelectSubset<T, RolePermissionFindUniqueArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RolePermission that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RolePermissionFindUniqueOrThrowArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RolePermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, RolePermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RolePermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionFindFirstArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RolePermissionFindFirstArgs>(args?: SelectSubset<T, RolePermissionFindFirstArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RolePermission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionFindFirstOrThrowArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RolePermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, RolePermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RolePermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RolePermissions
     * const rolePermissions = await prisma.rolePermission.findMany()
     * 
     * // Get first 10 RolePermissions
     * const rolePermissions = await prisma.rolePermission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rolePermissionWithIdOnly = await prisma.rolePermission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RolePermissionFindManyArgs>(args?: SelectSubset<T, RolePermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RolePermission.
     * @param {RolePermissionCreateArgs} args - Arguments to create a RolePermission.
     * @example
     * // Create one RolePermission
     * const RolePermission = await prisma.rolePermission.create({
     *   data: {
     *     // ... data to create a RolePermission
     *   }
     * })
     * 
     */
    create<T extends RolePermissionCreateArgs>(args: SelectSubset<T, RolePermissionCreateArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RolePermissions.
     * @param {RolePermissionCreateManyArgs} args - Arguments to create many RolePermissions.
     * @example
     * // Create many RolePermissions
     * const rolePermission = await prisma.rolePermission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RolePermissionCreateManyArgs>(args?: SelectSubset<T, RolePermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a RolePermission.
     * @param {RolePermissionDeleteArgs} args - Arguments to delete one RolePermission.
     * @example
     * // Delete one RolePermission
     * const RolePermission = await prisma.rolePermission.delete({
     *   where: {
     *     // ... filter to delete one RolePermission
     *   }
     * })
     * 
     */
    delete<T extends RolePermissionDeleteArgs>(args: SelectSubset<T, RolePermissionDeleteArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RolePermission.
     * @param {RolePermissionUpdateArgs} args - Arguments to update one RolePermission.
     * @example
     * // Update one RolePermission
     * const rolePermission = await prisma.rolePermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RolePermissionUpdateArgs>(args: SelectSubset<T, RolePermissionUpdateArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RolePermissions.
     * @param {RolePermissionDeleteManyArgs} args - Arguments to filter RolePermissions to delete.
     * @example
     * // Delete a few RolePermissions
     * const { count } = await prisma.rolePermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RolePermissionDeleteManyArgs>(args?: SelectSubset<T, RolePermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RolePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RolePermissions
     * const rolePermission = await prisma.rolePermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RolePermissionUpdateManyArgs>(args: SelectSubset<T, RolePermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RolePermission.
     * @param {RolePermissionUpsertArgs} args - Arguments to update or create a RolePermission.
     * @example
     * // Update or create a RolePermission
     * const rolePermission = await prisma.rolePermission.upsert({
     *   create: {
     *     // ... data to create a RolePermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RolePermission we want to update
     *   }
     * })
     */
    upsert<T extends RolePermissionUpsertArgs>(args: SelectSubset<T, RolePermissionUpsertArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RolePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionCountArgs} args - Arguments to filter RolePermissions to count.
     * @example
     * // Count the number of RolePermissions
     * const count = await prisma.rolePermission.count({
     *   where: {
     *     // ... the filter for the RolePermissions we want to count
     *   }
     * })
    **/
    count<T extends RolePermissionCountArgs>(
      args?: Subset<T, RolePermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RolePermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RolePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RolePermissionAggregateArgs>(args: Subset<T, RolePermissionAggregateArgs>): Prisma.PrismaPromise<GetRolePermissionAggregateType<T>>

    /**
     * Group by RolePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RolePermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RolePermissionGroupByArgs['orderBy'] }
        : { orderBy?: RolePermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RolePermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRolePermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RolePermission model
   */
  readonly fields: RolePermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RolePermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RolePermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    role<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    permission<T extends PermissionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PermissionDefaultArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RolePermission model
   */ 
  interface RolePermissionFieldRefs {
    readonly id: FieldRef<"RolePermission", 'String'>
    readonly roleId: FieldRef<"RolePermission", 'String'>
    readonly permissionId: FieldRef<"RolePermission", 'String'>
    readonly createdAt: FieldRef<"RolePermission", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RolePermission findUnique
   */
  export type RolePermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where: RolePermissionWhereUniqueInput
  }

  /**
   * RolePermission findUniqueOrThrow
   */
  export type RolePermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where: RolePermissionWhereUniqueInput
  }

  /**
   * RolePermission findFirst
   */
  export type RolePermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RolePermissions.
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RolePermissions.
     */
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * RolePermission findFirstOrThrow
   */
  export type RolePermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RolePermissions.
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RolePermissions.
     */
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * RolePermission findMany
   */
  export type RolePermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermissions to fetch.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RolePermissions.
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * RolePermission create
   */
  export type RolePermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a RolePermission.
     */
    data: XOR<RolePermissionCreateInput, RolePermissionUncheckedCreateInput>
  }

  /**
   * RolePermission createMany
   */
  export type RolePermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RolePermissions.
     */
    data: RolePermissionCreateManyInput | RolePermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RolePermission update
   */
  export type RolePermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a RolePermission.
     */
    data: XOR<RolePermissionUpdateInput, RolePermissionUncheckedUpdateInput>
    /**
     * Choose, which RolePermission to update.
     */
    where: RolePermissionWhereUniqueInput
  }

  /**
   * RolePermission updateMany
   */
  export type RolePermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RolePermissions.
     */
    data: XOR<RolePermissionUpdateManyMutationInput, RolePermissionUncheckedUpdateManyInput>
    /**
     * Filter which RolePermissions to update
     */
    where?: RolePermissionWhereInput
  }

  /**
   * RolePermission upsert
   */
  export type RolePermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the RolePermission to update in case it exists.
     */
    where: RolePermissionWhereUniqueInput
    /**
     * In case the RolePermission found by the `where` argument doesn't exist, create a new RolePermission with this data.
     */
    create: XOR<RolePermissionCreateInput, RolePermissionUncheckedCreateInput>
    /**
     * In case the RolePermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RolePermissionUpdateInput, RolePermissionUncheckedUpdateInput>
  }

  /**
   * RolePermission delete
   */
  export type RolePermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter which RolePermission to delete.
     */
    where: RolePermissionWhereUniqueInput
  }

  /**
   * RolePermission deleteMany
   */
  export type RolePermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RolePermissions to delete
     */
    where?: RolePermissionWhereInput
  }

  /**
   * RolePermission without action
   */
  export type RolePermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
  }


  /**
   * Model UserRole
   */

  export type AggregateUserRole = {
    _count: UserRoleCountAggregateOutputType | null
    _min: UserRoleMinAggregateOutputType | null
    _max: UserRoleMaxAggregateOutputType | null
  }

  export type UserRoleMinAggregateOutputType = {
    id: string | null
    userId: string | null
    roleId: string | null
    assignedBy: string | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type UserRoleMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    roleId: string | null
    assignedBy: string | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type UserRoleCountAggregateOutputType = {
    id: number
    userId: number
    roleId: number
    assignedBy: number
    expiresAt: number
    createdAt: number
    _all: number
  }


  export type UserRoleMinAggregateInputType = {
    id?: true
    userId?: true
    roleId?: true
    assignedBy?: true
    expiresAt?: true
    createdAt?: true
  }

  export type UserRoleMaxAggregateInputType = {
    id?: true
    userId?: true
    roleId?: true
    assignedBy?: true
    expiresAt?: true
    createdAt?: true
  }

  export type UserRoleCountAggregateInputType = {
    id?: true
    userId?: true
    roleId?: true
    assignedBy?: true
    expiresAt?: true
    createdAt?: true
    _all?: true
  }

  export type UserRoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRole to aggregate.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserRoles
    **/
    _count?: true | UserRoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserRoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserRoleMaxAggregateInputType
  }

  export type GetUserRoleAggregateType<T extends UserRoleAggregateArgs> = {
        [P in keyof T & keyof AggregateUserRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserRole[P]>
      : GetScalarType<T[P], AggregateUserRole[P]>
  }




  export type UserRoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRoleWhereInput
    orderBy?: UserRoleOrderByWithAggregationInput | UserRoleOrderByWithAggregationInput[]
    by: UserRoleScalarFieldEnum[] | UserRoleScalarFieldEnum
    having?: UserRoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserRoleCountAggregateInputType | true
    _min?: UserRoleMinAggregateInputType
    _max?: UserRoleMaxAggregateInputType
  }

  export type UserRoleGroupByOutputType = {
    id: string
    userId: string
    roleId: string
    assignedBy: string | null
    expiresAt: Date | null
    createdAt: Date
    _count: UserRoleCountAggregateOutputType | null
    _min: UserRoleMinAggregateOutputType | null
    _max: UserRoleMaxAggregateOutputType | null
  }

  type GetUserRoleGroupByPayload<T extends UserRoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserRoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserRoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserRoleGroupByOutputType[P]>
            : GetScalarType<T[P], UserRoleGroupByOutputType[P]>
        }
      >
    >


  export type UserRoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    roleId?: boolean
    assignedBy?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userRole"]>


  export type UserRoleSelectScalar = {
    id?: boolean
    userId?: boolean
    roleId?: boolean
    assignedBy?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }

  export type UserRoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }

  export type $UserRolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserRole"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      role: Prisma.$RolePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      roleId: string
      assignedBy: string | null
      expiresAt: Date | null
      createdAt: Date
    }, ExtArgs["result"]["userRole"]>
    composites: {}
  }

  type UserRoleGetPayload<S extends boolean | null | undefined | UserRoleDefaultArgs> = $Result.GetResult<Prisma.$UserRolePayload, S>

  type UserRoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserRoleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserRoleCountAggregateInputType | true
    }

  export interface UserRoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserRole'], meta: { name: 'UserRole' } }
    /**
     * Find zero or one UserRole that matches the filter.
     * @param {UserRoleFindUniqueArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserRoleFindUniqueArgs>(args: SelectSubset<T, UserRoleFindUniqueArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserRole that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserRoleFindUniqueOrThrowArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserRoleFindUniqueOrThrowArgs>(args: SelectSubset<T, UserRoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserRole that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindFirstArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserRoleFindFirstArgs>(args?: SelectSubset<T, UserRoleFindFirstArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserRole that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindFirstOrThrowArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserRoleFindFirstOrThrowArgs>(args?: SelectSubset<T, UserRoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserRoles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserRoles
     * const userRoles = await prisma.userRole.findMany()
     * 
     * // Get first 10 UserRoles
     * const userRoles = await prisma.userRole.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userRoleWithIdOnly = await prisma.userRole.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserRoleFindManyArgs>(args?: SelectSubset<T, UserRoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserRole.
     * @param {UserRoleCreateArgs} args - Arguments to create a UserRole.
     * @example
     * // Create one UserRole
     * const UserRole = await prisma.userRole.create({
     *   data: {
     *     // ... data to create a UserRole
     *   }
     * })
     * 
     */
    create<T extends UserRoleCreateArgs>(args: SelectSubset<T, UserRoleCreateArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserRoles.
     * @param {UserRoleCreateManyArgs} args - Arguments to create many UserRoles.
     * @example
     * // Create many UserRoles
     * const userRole = await prisma.userRole.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserRoleCreateManyArgs>(args?: SelectSubset<T, UserRoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserRole.
     * @param {UserRoleDeleteArgs} args - Arguments to delete one UserRole.
     * @example
     * // Delete one UserRole
     * const UserRole = await prisma.userRole.delete({
     *   where: {
     *     // ... filter to delete one UserRole
     *   }
     * })
     * 
     */
    delete<T extends UserRoleDeleteArgs>(args: SelectSubset<T, UserRoleDeleteArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserRole.
     * @param {UserRoleUpdateArgs} args - Arguments to update one UserRole.
     * @example
     * // Update one UserRole
     * const userRole = await prisma.userRole.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserRoleUpdateArgs>(args: SelectSubset<T, UserRoleUpdateArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserRoles.
     * @param {UserRoleDeleteManyArgs} args - Arguments to filter UserRoles to delete.
     * @example
     * // Delete a few UserRoles
     * const { count } = await prisma.userRole.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserRoleDeleteManyArgs>(args?: SelectSubset<T, UserRoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserRoles
     * const userRole = await prisma.userRole.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserRoleUpdateManyArgs>(args: SelectSubset<T, UserRoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserRole.
     * @param {UserRoleUpsertArgs} args - Arguments to update or create a UserRole.
     * @example
     * // Update or create a UserRole
     * const userRole = await prisma.userRole.upsert({
     *   create: {
     *     // ... data to create a UserRole
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserRole we want to update
     *   }
     * })
     */
    upsert<T extends UserRoleUpsertArgs>(args: SelectSubset<T, UserRoleUpsertArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleCountArgs} args - Arguments to filter UserRoles to count.
     * @example
     * // Count the number of UserRoles
     * const count = await prisma.userRole.count({
     *   where: {
     *     // ... the filter for the UserRoles we want to count
     *   }
     * })
    **/
    count<T extends UserRoleCountArgs>(
      args?: Subset<T, UserRoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserRoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserRoleAggregateArgs>(args: Subset<T, UserRoleAggregateArgs>): Prisma.PrismaPromise<GetUserRoleAggregateType<T>>

    /**
     * Group by UserRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserRoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserRoleGroupByArgs['orderBy'] }
        : { orderBy?: UserRoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserRoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserRole model
   */
  readonly fields: UserRoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserRole.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserRoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    role<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserRole model
   */ 
  interface UserRoleFieldRefs {
    readonly id: FieldRef<"UserRole", 'String'>
    readonly userId: FieldRef<"UserRole", 'String'>
    readonly roleId: FieldRef<"UserRole", 'String'>
    readonly assignedBy: FieldRef<"UserRole", 'String'>
    readonly expiresAt: FieldRef<"UserRole", 'DateTime'>
    readonly createdAt: FieldRef<"UserRole", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserRole findUnique
   */
  export type UserRoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole findUniqueOrThrow
   */
  export type UserRoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole findFirst
   */
  export type UserRoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRoles.
     */
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole findFirstOrThrow
   */
  export type UserRoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRoles.
     */
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole findMany
   */
  export type UserRoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRoles to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole create
   */
  export type UserRoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The data needed to create a UserRole.
     */
    data: XOR<UserRoleCreateInput, UserRoleUncheckedCreateInput>
  }

  /**
   * UserRole createMany
   */
  export type UserRoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserRoles.
     */
    data: UserRoleCreateManyInput | UserRoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserRole update
   */
  export type UserRoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The data needed to update a UserRole.
     */
    data: XOR<UserRoleUpdateInput, UserRoleUncheckedUpdateInput>
    /**
     * Choose, which UserRole to update.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole updateMany
   */
  export type UserRoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserRoles.
     */
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyInput>
    /**
     * Filter which UserRoles to update
     */
    where?: UserRoleWhereInput
  }

  /**
   * UserRole upsert
   */
  export type UserRoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The filter to search for the UserRole to update in case it exists.
     */
    where: UserRoleWhereUniqueInput
    /**
     * In case the UserRole found by the `where` argument doesn't exist, create a new UserRole with this data.
     */
    create: XOR<UserRoleCreateInput, UserRoleUncheckedCreateInput>
    /**
     * In case the UserRole was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserRoleUpdateInput, UserRoleUncheckedUpdateInput>
  }

  /**
   * UserRole delete
   */
  export type UserRoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter which UserRole to delete.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole deleteMany
   */
  export type UserRoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRoles to delete
     */
    where?: UserRoleWhereInput
  }

  /**
   * UserRole without action
   */
  export type UserRoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
  }


  /**
   * Model OperationLog
   */

  export type AggregateOperationLog = {
    _count: OperationLogCountAggregateOutputType | null
    _avg: OperationLogAvgAggregateOutputType | null
    _sum: OperationLogSumAggregateOutputType | null
    _min: OperationLogMinAggregateOutputType | null
    _max: OperationLogMaxAggregateOutputType | null
  }

  export type OperationLogAvgAggregateOutputType = {
    duration: number | null
  }

  export type OperationLogSumAggregateOutputType = {
    duration: number | null
  }

  export type OperationLogMinAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    module: string | null
    description: string | null
    method: string | null
    path: string | null
    ip: string | null
    userAgent: string | null
    status: string | null
    errorMsg: string | null
    requestData: string | null
    responseData: string | null
    duration: number | null
    createdAt: Date | null
  }

  export type OperationLogMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    module: string | null
    description: string | null
    method: string | null
    path: string | null
    ip: string | null
    userAgent: string | null
    status: string | null
    errorMsg: string | null
    requestData: string | null
    responseData: string | null
    duration: number | null
    createdAt: Date | null
  }

  export type OperationLogCountAggregateOutputType = {
    id: number
    userId: number
    action: number
    module: number
    description: number
    method: number
    path: number
    ip: number
    userAgent: number
    status: number
    errorMsg: number
    requestData: number
    responseData: number
    duration: number
    createdAt: number
    _all: number
  }


  export type OperationLogAvgAggregateInputType = {
    duration?: true
  }

  export type OperationLogSumAggregateInputType = {
    duration?: true
  }

  export type OperationLogMinAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    module?: true
    description?: true
    method?: true
    path?: true
    ip?: true
    userAgent?: true
    status?: true
    errorMsg?: true
    requestData?: true
    responseData?: true
    duration?: true
    createdAt?: true
  }

  export type OperationLogMaxAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    module?: true
    description?: true
    method?: true
    path?: true
    ip?: true
    userAgent?: true
    status?: true
    errorMsg?: true
    requestData?: true
    responseData?: true
    duration?: true
    createdAt?: true
  }

  export type OperationLogCountAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    module?: true
    description?: true
    method?: true
    path?: true
    ip?: true
    userAgent?: true
    status?: true
    errorMsg?: true
    requestData?: true
    responseData?: true
    duration?: true
    createdAt?: true
    _all?: true
  }

  export type OperationLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OperationLog to aggregate.
     */
    where?: OperationLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OperationLogs to fetch.
     */
    orderBy?: OperationLogOrderByWithRelationInput | OperationLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OperationLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OperationLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OperationLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OperationLogs
    **/
    _count?: true | OperationLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OperationLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OperationLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OperationLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OperationLogMaxAggregateInputType
  }

  export type GetOperationLogAggregateType<T extends OperationLogAggregateArgs> = {
        [P in keyof T & keyof AggregateOperationLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOperationLog[P]>
      : GetScalarType<T[P], AggregateOperationLog[P]>
  }




  export type OperationLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OperationLogWhereInput
    orderBy?: OperationLogOrderByWithAggregationInput | OperationLogOrderByWithAggregationInput[]
    by: OperationLogScalarFieldEnum[] | OperationLogScalarFieldEnum
    having?: OperationLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OperationLogCountAggregateInputType | true
    _avg?: OperationLogAvgAggregateInputType
    _sum?: OperationLogSumAggregateInputType
    _min?: OperationLogMinAggregateInputType
    _max?: OperationLogMaxAggregateInputType
  }

  export type OperationLogGroupByOutputType = {
    id: string
    userId: string
    action: string
    module: string
    description: string | null
    method: string
    path: string
    ip: string | null
    userAgent: string | null
    status: string
    errorMsg: string | null
    requestData: string | null
    responseData: string | null
    duration: number | null
    createdAt: Date
    _count: OperationLogCountAggregateOutputType | null
    _avg: OperationLogAvgAggregateOutputType | null
    _sum: OperationLogSumAggregateOutputType | null
    _min: OperationLogMinAggregateOutputType | null
    _max: OperationLogMaxAggregateOutputType | null
  }

  type GetOperationLogGroupByPayload<T extends OperationLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OperationLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OperationLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OperationLogGroupByOutputType[P]>
            : GetScalarType<T[P], OperationLogGroupByOutputType[P]>
        }
      >
    >


  export type OperationLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    module?: boolean
    description?: boolean
    method?: boolean
    path?: boolean
    ip?: boolean
    userAgent?: boolean
    status?: boolean
    errorMsg?: boolean
    requestData?: boolean
    responseData?: boolean
    duration?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["operationLog"]>


  export type OperationLogSelectScalar = {
    id?: boolean
    userId?: boolean
    action?: boolean
    module?: boolean
    description?: boolean
    method?: boolean
    path?: boolean
    ip?: boolean
    userAgent?: boolean
    status?: boolean
    errorMsg?: boolean
    requestData?: boolean
    responseData?: boolean
    duration?: boolean
    createdAt?: boolean
  }

  export type OperationLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $OperationLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OperationLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      action: string
      module: string
      description: string | null
      method: string
      path: string
      ip: string | null
      userAgent: string | null
      status: string
      errorMsg: string | null
      requestData: string | null
      responseData: string | null
      duration: number | null
      createdAt: Date
    }, ExtArgs["result"]["operationLog"]>
    composites: {}
  }

  type OperationLogGetPayload<S extends boolean | null | undefined | OperationLogDefaultArgs> = $Result.GetResult<Prisma.$OperationLogPayload, S>

  type OperationLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OperationLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OperationLogCountAggregateInputType | true
    }

  export interface OperationLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OperationLog'], meta: { name: 'OperationLog' } }
    /**
     * Find zero or one OperationLog that matches the filter.
     * @param {OperationLogFindUniqueArgs} args - Arguments to find a OperationLog
     * @example
     * // Get one OperationLog
     * const operationLog = await prisma.operationLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OperationLogFindUniqueArgs>(args: SelectSubset<T, OperationLogFindUniqueArgs<ExtArgs>>): Prisma__OperationLogClient<$Result.GetResult<Prisma.$OperationLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one OperationLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OperationLogFindUniqueOrThrowArgs} args - Arguments to find a OperationLog
     * @example
     * // Get one OperationLog
     * const operationLog = await prisma.operationLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OperationLogFindUniqueOrThrowArgs>(args: SelectSubset<T, OperationLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OperationLogClient<$Result.GetResult<Prisma.$OperationLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first OperationLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperationLogFindFirstArgs} args - Arguments to find a OperationLog
     * @example
     * // Get one OperationLog
     * const operationLog = await prisma.operationLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OperationLogFindFirstArgs>(args?: SelectSubset<T, OperationLogFindFirstArgs<ExtArgs>>): Prisma__OperationLogClient<$Result.GetResult<Prisma.$OperationLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first OperationLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperationLogFindFirstOrThrowArgs} args - Arguments to find a OperationLog
     * @example
     * // Get one OperationLog
     * const operationLog = await prisma.operationLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OperationLogFindFirstOrThrowArgs>(args?: SelectSubset<T, OperationLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__OperationLogClient<$Result.GetResult<Prisma.$OperationLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more OperationLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperationLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OperationLogs
     * const operationLogs = await prisma.operationLog.findMany()
     * 
     * // Get first 10 OperationLogs
     * const operationLogs = await prisma.operationLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const operationLogWithIdOnly = await prisma.operationLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OperationLogFindManyArgs>(args?: SelectSubset<T, OperationLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperationLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a OperationLog.
     * @param {OperationLogCreateArgs} args - Arguments to create a OperationLog.
     * @example
     * // Create one OperationLog
     * const OperationLog = await prisma.operationLog.create({
     *   data: {
     *     // ... data to create a OperationLog
     *   }
     * })
     * 
     */
    create<T extends OperationLogCreateArgs>(args: SelectSubset<T, OperationLogCreateArgs<ExtArgs>>): Prisma__OperationLogClient<$Result.GetResult<Prisma.$OperationLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many OperationLogs.
     * @param {OperationLogCreateManyArgs} args - Arguments to create many OperationLogs.
     * @example
     * // Create many OperationLogs
     * const operationLog = await prisma.operationLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OperationLogCreateManyArgs>(args?: SelectSubset<T, OperationLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a OperationLog.
     * @param {OperationLogDeleteArgs} args - Arguments to delete one OperationLog.
     * @example
     * // Delete one OperationLog
     * const OperationLog = await prisma.operationLog.delete({
     *   where: {
     *     // ... filter to delete one OperationLog
     *   }
     * })
     * 
     */
    delete<T extends OperationLogDeleteArgs>(args: SelectSubset<T, OperationLogDeleteArgs<ExtArgs>>): Prisma__OperationLogClient<$Result.GetResult<Prisma.$OperationLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one OperationLog.
     * @param {OperationLogUpdateArgs} args - Arguments to update one OperationLog.
     * @example
     * // Update one OperationLog
     * const operationLog = await prisma.operationLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OperationLogUpdateArgs>(args: SelectSubset<T, OperationLogUpdateArgs<ExtArgs>>): Prisma__OperationLogClient<$Result.GetResult<Prisma.$OperationLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more OperationLogs.
     * @param {OperationLogDeleteManyArgs} args - Arguments to filter OperationLogs to delete.
     * @example
     * // Delete a few OperationLogs
     * const { count } = await prisma.operationLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OperationLogDeleteManyArgs>(args?: SelectSubset<T, OperationLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OperationLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperationLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OperationLogs
     * const operationLog = await prisma.operationLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OperationLogUpdateManyArgs>(args: SelectSubset<T, OperationLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OperationLog.
     * @param {OperationLogUpsertArgs} args - Arguments to update or create a OperationLog.
     * @example
     * // Update or create a OperationLog
     * const operationLog = await prisma.operationLog.upsert({
     *   create: {
     *     // ... data to create a OperationLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OperationLog we want to update
     *   }
     * })
     */
    upsert<T extends OperationLogUpsertArgs>(args: SelectSubset<T, OperationLogUpsertArgs<ExtArgs>>): Prisma__OperationLogClient<$Result.GetResult<Prisma.$OperationLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of OperationLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperationLogCountArgs} args - Arguments to filter OperationLogs to count.
     * @example
     * // Count the number of OperationLogs
     * const count = await prisma.operationLog.count({
     *   where: {
     *     // ... the filter for the OperationLogs we want to count
     *   }
     * })
    **/
    count<T extends OperationLogCountArgs>(
      args?: Subset<T, OperationLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OperationLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OperationLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperationLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OperationLogAggregateArgs>(args: Subset<T, OperationLogAggregateArgs>): Prisma.PrismaPromise<GetOperationLogAggregateType<T>>

    /**
     * Group by OperationLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperationLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OperationLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OperationLogGroupByArgs['orderBy'] }
        : { orderBy?: OperationLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OperationLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOperationLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OperationLog model
   */
  readonly fields: OperationLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OperationLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OperationLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OperationLog model
   */ 
  interface OperationLogFieldRefs {
    readonly id: FieldRef<"OperationLog", 'String'>
    readonly userId: FieldRef<"OperationLog", 'String'>
    readonly action: FieldRef<"OperationLog", 'String'>
    readonly module: FieldRef<"OperationLog", 'String'>
    readonly description: FieldRef<"OperationLog", 'String'>
    readonly method: FieldRef<"OperationLog", 'String'>
    readonly path: FieldRef<"OperationLog", 'String'>
    readonly ip: FieldRef<"OperationLog", 'String'>
    readonly userAgent: FieldRef<"OperationLog", 'String'>
    readonly status: FieldRef<"OperationLog", 'String'>
    readonly errorMsg: FieldRef<"OperationLog", 'String'>
    readonly requestData: FieldRef<"OperationLog", 'String'>
    readonly responseData: FieldRef<"OperationLog", 'String'>
    readonly duration: FieldRef<"OperationLog", 'Int'>
    readonly createdAt: FieldRef<"OperationLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OperationLog findUnique
   */
  export type OperationLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperationLog
     */
    select?: OperationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationLogInclude<ExtArgs> | null
    /**
     * Filter, which OperationLog to fetch.
     */
    where: OperationLogWhereUniqueInput
  }

  /**
   * OperationLog findUniqueOrThrow
   */
  export type OperationLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperationLog
     */
    select?: OperationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationLogInclude<ExtArgs> | null
    /**
     * Filter, which OperationLog to fetch.
     */
    where: OperationLogWhereUniqueInput
  }

  /**
   * OperationLog findFirst
   */
  export type OperationLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperationLog
     */
    select?: OperationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationLogInclude<ExtArgs> | null
    /**
     * Filter, which OperationLog to fetch.
     */
    where?: OperationLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OperationLogs to fetch.
     */
    orderBy?: OperationLogOrderByWithRelationInput | OperationLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OperationLogs.
     */
    cursor?: OperationLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OperationLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OperationLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OperationLogs.
     */
    distinct?: OperationLogScalarFieldEnum | OperationLogScalarFieldEnum[]
  }

  /**
   * OperationLog findFirstOrThrow
   */
  export type OperationLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperationLog
     */
    select?: OperationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationLogInclude<ExtArgs> | null
    /**
     * Filter, which OperationLog to fetch.
     */
    where?: OperationLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OperationLogs to fetch.
     */
    orderBy?: OperationLogOrderByWithRelationInput | OperationLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OperationLogs.
     */
    cursor?: OperationLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OperationLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OperationLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OperationLogs.
     */
    distinct?: OperationLogScalarFieldEnum | OperationLogScalarFieldEnum[]
  }

  /**
   * OperationLog findMany
   */
  export type OperationLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperationLog
     */
    select?: OperationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationLogInclude<ExtArgs> | null
    /**
     * Filter, which OperationLogs to fetch.
     */
    where?: OperationLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OperationLogs to fetch.
     */
    orderBy?: OperationLogOrderByWithRelationInput | OperationLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OperationLogs.
     */
    cursor?: OperationLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OperationLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OperationLogs.
     */
    skip?: number
    distinct?: OperationLogScalarFieldEnum | OperationLogScalarFieldEnum[]
  }

  /**
   * OperationLog create
   */
  export type OperationLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperationLog
     */
    select?: OperationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationLogInclude<ExtArgs> | null
    /**
     * The data needed to create a OperationLog.
     */
    data: XOR<OperationLogCreateInput, OperationLogUncheckedCreateInput>
  }

  /**
   * OperationLog createMany
   */
  export type OperationLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OperationLogs.
     */
    data: OperationLogCreateManyInput | OperationLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OperationLog update
   */
  export type OperationLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperationLog
     */
    select?: OperationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationLogInclude<ExtArgs> | null
    /**
     * The data needed to update a OperationLog.
     */
    data: XOR<OperationLogUpdateInput, OperationLogUncheckedUpdateInput>
    /**
     * Choose, which OperationLog to update.
     */
    where: OperationLogWhereUniqueInput
  }

  /**
   * OperationLog updateMany
   */
  export type OperationLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OperationLogs.
     */
    data: XOR<OperationLogUpdateManyMutationInput, OperationLogUncheckedUpdateManyInput>
    /**
     * Filter which OperationLogs to update
     */
    where?: OperationLogWhereInput
  }

  /**
   * OperationLog upsert
   */
  export type OperationLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperationLog
     */
    select?: OperationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationLogInclude<ExtArgs> | null
    /**
     * The filter to search for the OperationLog to update in case it exists.
     */
    where: OperationLogWhereUniqueInput
    /**
     * In case the OperationLog found by the `where` argument doesn't exist, create a new OperationLog with this data.
     */
    create: XOR<OperationLogCreateInput, OperationLogUncheckedCreateInput>
    /**
     * In case the OperationLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OperationLogUpdateInput, OperationLogUncheckedUpdateInput>
  }

  /**
   * OperationLog delete
   */
  export type OperationLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperationLog
     */
    select?: OperationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationLogInclude<ExtArgs> | null
    /**
     * Filter which OperationLog to delete.
     */
    where: OperationLogWhereUniqueInput
  }

  /**
   * OperationLog deleteMany
   */
  export type OperationLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OperationLogs to delete
     */
    where?: OperationLogWhereInput
  }

  /**
   * OperationLog without action
   */
  export type OperationLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperationLog
     */
    select?: OperationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationLogInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    openid: 'openid',
    unionid: 'unionid',
    sessionKey: 'sessionKey',
    nickname: 'nickname',
    avatar: 'avatar',
    gender: 'gender',
    phone: 'phone',
    bio: 'bio',
    school: 'school',
    major: 'major',
    grade: 'grade',
    verified: 'verified',
    skills: 'skills',
    interests: 'interests',
    credits: 'credits',
    level: 'level',
    exp: 'exp',
    topicsCount: 'topicsCount',
    commentsCount: 'commentsCount',
    likesCount: 'likesCount',
    fansCount: 'fansCount',
    followsCount: 'followsCount',
    status: 'status',
    isCertified: 'isCertified',
    isVip: 'isVip',
    lastLoginAt: 'lastLoginAt',
    lastActiveAt: 'lastActiveAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const TopicScalarFieldEnum: {
    id: 'id',
    title: 'title',
    content: 'content',
    contentType: 'contentType',
    summary: 'summary',
    category: 'category',
    tags: 'tags',
    topicType: 'topicType',
    demandType: 'demandType',
    skillsNeeded: 'skillsNeeded',
    skillsProvided: 'skillsProvided',
    threshold: 'threshold',
    wantToHearCount: 'wantToHearCount',
    canTellCount: 'canTellCount',
    status: 'status',
    teamSize: 'teamSize',
    lookingForRoles: 'lookingForRoles',
    projectStage: 'projectStage',
    website: 'website',
    github: 'github',
    interestedCount: 'interestedCount',
    duration: 'duration',
    targetAudience: 'targetAudience',
    scheduledTime: 'scheduledTime',
    deadline: 'deadline',
    budget: 'budget',
    contactInfo: 'contactInfo',
    images: 'images',
    documents: 'documents',
    videos: 'videos',
    links: 'links',
    quickActions: 'quickActions',
    visibility: 'visibility',
    viewsCount: 'viewsCount',
    likesCount: 'likesCount',
    commentsCount: 'commentsCount',
    bookmarksCount: 'bookmarksCount',
    hotScore: 'hotScore',
    trendingScore: 'trendingScore',
    isHot: 'isHot',
    publishedAt: 'publishedAt',
    lastActiveAt: 'lastActiveAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    authorId: 'authorId'
  };

  export type TopicScalarFieldEnum = (typeof TopicScalarFieldEnum)[keyof typeof TopicScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    content: 'content',
    images: 'images',
    parentId: 'parentId',
    rootId: 'rootId',
    repliesCount: 'repliesCount',
    likesCount: 'likesCount',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    topicId: 'topicId',
    projectId: 'projectId',
    authorId: 'authorId'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const LikeScalarFieldEnum: {
    id: 'id',
    targetType: 'targetType',
    targetId: 'targetId',
    createdAt: 'createdAt',
    userId: 'userId'
  };

  export type LikeScalarFieldEnum = (typeof LikeScalarFieldEnum)[keyof typeof LikeScalarFieldEnum]


  export const BookmarkScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    userId: 'userId',
    topicId: 'topicId'
  };

  export type BookmarkScalarFieldEnum = (typeof BookmarkScalarFieldEnum)[keyof typeof BookmarkScalarFieldEnum]


  export const FollowScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    followerId: 'followerId',
    followingId: 'followingId'
  };

  export type FollowScalarFieldEnum = (typeof FollowScalarFieldEnum)[keyof typeof FollowScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    type: 'type',
    title: 'title',
    content: 'content',
    isRead: 'isRead',
    readAt: 'readAt',
    link: 'link',
    createdAt: 'createdAt',
    userId: 'userId',
    actorId: 'actorId',
    targetType: 'targetType',
    targetId: 'targetId'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const UserActionScalarFieldEnum: {
    id: 'id',
    actionType: 'actionType',
    targetType: 'targetType',
    targetId: 'targetId',
    metadata: 'metadata',
    createdAt: 'createdAt',
    userId: 'userId'
  };

  export type UserActionScalarFieldEnum = (typeof UserActionScalarFieldEnum)[keyof typeof UserActionScalarFieldEnum]


  export const TopicQuickActionScalarFieldEnum: {
    id: 'id',
    actionType: 'actionType',
    createdAt: 'createdAt',
    topicId: 'topicId',
    userId: 'userId'
  };

  export type TopicQuickActionScalarFieldEnum = (typeof TopicQuickActionScalarFieldEnum)[keyof typeof TopicQuickActionScalarFieldEnum]


  export const TopicActionScalarFieldEnum: {
    id: 'id',
    type: 'type',
    userId: 'userId',
    topicId: 'topicId',
    createdAt: 'createdAt'
  };

  export type TopicActionScalarFieldEnum = (typeof TopicActionScalarFieldEnum)[keyof typeof TopicActionScalarFieldEnum]


  export const ProjectActionScalarFieldEnum: {
    id: 'id',
    type: 'type',
    userId: 'userId',
    projectId: 'projectId',
    createdAt: 'createdAt'
  };

  export type ProjectActionScalarFieldEnum = (typeof ProjectActionScalarFieldEnum)[keyof typeof ProjectActionScalarFieldEnum]


  export const ProjectScalarFieldEnum: {
    id: 'id',
    category: 'category',
    title: 'title',
    description: 'description',
    tags: 'tags',
    teamSize: 'teamSize',
    lookingForRoles: 'lookingForRoles',
    projectStage: 'projectStage',
    website: 'website',
    github: 'github',
    viewCount: 'viewCount',
    likeCount: 'likeCount',
    commentCount: 'commentCount',
    interestedCount: 'interestedCount',
    images: 'images',
    authorId: 'authorId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const ActivityScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    location: 'location',
    startTime: 'startTime',
    endTime: 'endTime',
    maxParticipants: 'maxParticipants',
    category: 'category',
    tags: 'tags',
    cover: 'cover',
    images: 'images',
    participantsCount: 'participantsCount',
    likesCount: 'likesCount',
    commentsCount: 'commentsCount',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    authorId: 'authorId'
  };

  export type ActivityScalarFieldEnum = (typeof ActivityScalarFieldEnum)[keyof typeof ActivityScalarFieldEnum]


  export const ActivityParticipantScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    userId: 'userId',
    activityId: 'activityId'
  };

  export type ActivityParticipantScalarFieldEnum = (typeof ActivityParticipantScalarFieldEnum)[keyof typeof ActivityParticipantScalarFieldEnum]


  export const ActivityLikeScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    userId: 'userId',
    activityId: 'activityId'
  };

  export type ActivityLikeScalarFieldEnum = (typeof ActivityLikeScalarFieldEnum)[keyof typeof ActivityLikeScalarFieldEnum]


  export const ActivityCommentScalarFieldEnum: {
    id: 'id',
    content: 'content',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    authorId: 'authorId',
    activityId: 'activityId'
  };

  export type ActivityCommentScalarFieldEnum = (typeof ActivityCommentScalarFieldEnum)[keyof typeof ActivityCommentScalarFieldEnum]


  export const UserBindingScalarFieldEnum: {
    id: 'id',
    type: 'type',
    bindValue: 'bindValue',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId'
  };

  export type UserBindingScalarFieldEnum = (typeof UserBindingScalarFieldEnum)[keyof typeof UserBindingScalarFieldEnum]


  export const VerificationCodeScalarFieldEnum: {
    id: 'id',
    email: 'email',
    code: 'code',
    type: 'type',
    used: 'used',
    usedAt: 'usedAt',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt'
  };

  export type VerificationCodeScalarFieldEnum = (typeof VerificationCodeScalarFieldEnum)[keyof typeof VerificationCodeScalarFieldEnum]


  export const LoginLogScalarFieldEnum: {
    id: 'id',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    loginMethod: 'loginMethod',
    status: 'status',
    failReason: 'failReason',
    loginTime: 'loginTime',
    userId: 'userId'
  };

  export type LoginLogScalarFieldEnum = (typeof LoginLogScalarFieldEnum)[keyof typeof LoginLogScalarFieldEnum]


  export const FeedbackScalarFieldEnum: {
    id: 'id',
    type: 'type',
    title: 'title',
    content: 'content',
    contact: 'contact',
    images: 'images',
    platform: 'platform',
    version: 'version',
    deviceInfo: 'deviceInfo',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    status: 'status',
    processedAt: 'processedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId'
  };

  export type FeedbackScalarFieldEnum = (typeof FeedbackScalarFieldEnum)[keyof typeof FeedbackScalarFieldEnum]


  export const FeedbackReplyScalarFieldEnum: {
    id: 'id',
    content: 'content',
    createdAt: 'createdAt',
    feedbackId: 'feedbackId',
    adminId: 'adminId'
  };

  export type FeedbackReplyScalarFieldEnum = (typeof FeedbackReplyScalarFieldEnum)[keyof typeof FeedbackReplyScalarFieldEnum]


  export const CreditLogScalarFieldEnum: {
    id: 'id',
    action: 'action',
    amount: 'amount',
    reason: 'reason',
    relatedType: 'relatedType',
    relatedId: 'relatedId',
    metadata: 'metadata',
    createdAt: 'createdAt',
    userId: 'userId'
  };

  export type CreditLogScalarFieldEnum = (typeof CreditLogScalarFieldEnum)[keyof typeof CreditLogScalarFieldEnum]


  export const UserLevelScalarFieldEnum: {
    id: 'id',
    level: 'level',
    name: 'name',
    minExp: 'minExp',
    maxExp: 'maxExp',
    icon: 'icon',
    color: 'color',
    privileges: 'privileges',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserLevelScalarFieldEnum = (typeof UserLevelScalarFieldEnum)[keyof typeof UserLevelScalarFieldEnum]


  export const UserBadgeScalarFieldEnum: {
    id: 'id',
    code: 'code',
    name: 'name',
    description: 'description',
    icon: 'icon',
    category: 'category',
    rarity: 'rarity',
    condition: 'condition',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserBadgeScalarFieldEnum = (typeof UserBadgeScalarFieldEnum)[keyof typeof UserBadgeScalarFieldEnum]


  export const UserBadgeRecordScalarFieldEnum: {
    id: 'id',
    progress: 'progress',
    awardedAt: 'awardedAt',
    metadata: 'metadata',
    userId: 'userId',
    badgeId: 'badgeId'
  };

  export type UserBadgeRecordScalarFieldEnum = (typeof UserBadgeRecordScalarFieldEnum)[keyof typeof UserBadgeRecordScalarFieldEnum]


  export const DailyCheckInScalarFieldEnum: {
    id: 'id',
    checkInDate: 'checkInDate',
    credits: 'credits',
    consecutiveDays: 'consecutiveDays',
    createdAt: 'createdAt',
    userId: 'userId'
  };

  export type DailyCheckInScalarFieldEnum = (typeof DailyCheckInScalarFieldEnum)[keyof typeof DailyCheckInScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    id: 'id',
    name: 'name',
    displayName: 'displayName',
    description: 'description',
    level: 'level',
    type: 'type',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const PermissionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    displayName: 'displayName',
    description: 'description',
    module: 'module',
    action: 'action',
    resource: 'resource',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PermissionScalarFieldEnum = (typeof PermissionScalarFieldEnum)[keyof typeof PermissionScalarFieldEnum]


  export const RolePermissionScalarFieldEnum: {
    id: 'id',
    roleId: 'roleId',
    permissionId: 'permissionId',
    createdAt: 'createdAt'
  };

  export type RolePermissionScalarFieldEnum = (typeof RolePermissionScalarFieldEnum)[keyof typeof RolePermissionScalarFieldEnum]


  export const UserRoleScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    roleId: 'roleId',
    assignedBy: 'assignedBy',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt'
  };

  export type UserRoleScalarFieldEnum = (typeof UserRoleScalarFieldEnum)[keyof typeof UserRoleScalarFieldEnum]


  export const OperationLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    action: 'action',
    module: 'module',
    description: 'description',
    method: 'method',
    path: 'path',
    ip: 'ip',
    userAgent: 'userAgent',
    status: 'status',
    errorMsg: 'errorMsg',
    requestData: 'requestData',
    responseData: 'responseData',
    duration: 'duration',
    createdAt: 'createdAt'
  };

  export type OperationLogScalarFieldEnum = (typeof OperationLogScalarFieldEnum)[keyof typeof OperationLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    openid?: StringNullableFilter<"User"> | string | null
    unionid?: StringNullableFilter<"User"> | string | null
    sessionKey?: StringNullableFilter<"User"> | string | null
    nickname?: StringFilter<"User"> | string
    avatar?: StringNullableFilter<"User"> | string | null
    gender?: IntFilter<"User"> | number
    phone?: StringNullableFilter<"User"> | string | null
    bio?: StringNullableFilter<"User"> | string | null
    school?: StringNullableFilter<"User"> | string | null
    major?: StringNullableFilter<"User"> | string | null
    grade?: StringNullableFilter<"User"> | string | null
    verified?: BoolFilter<"User"> | boolean
    skills?: StringNullableFilter<"User"> | string | null
    interests?: StringNullableFilter<"User"> | string | null
    credits?: IntFilter<"User"> | number
    level?: IntFilter<"User"> | number
    exp?: IntFilter<"User"> | number
    topicsCount?: IntFilter<"User"> | number
    commentsCount?: IntFilter<"User"> | number
    likesCount?: IntFilter<"User"> | number
    fansCount?: IntFilter<"User"> | number
    followsCount?: IntFilter<"User"> | number
    status?: StringFilter<"User"> | string
    isCertified?: BoolFilter<"User"> | boolean
    isVip?: BoolFilter<"User"> | boolean
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    lastActiveAt?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    topics?: TopicListRelationFilter
    projects?: ProjectListRelationFilter
    comments?: CommentListRelationFilter
    likes?: LikeListRelationFilter
    bookmarks?: BookmarkListRelationFilter
    follows?: FollowListRelationFilter
    followers?: FollowListRelationFilter
    sentNotifications?: NotificationListRelationFilter
    receivedNotifications?: NotificationListRelationFilter
    userActions?: UserActionListRelationFilter
    topicQuickActions?: TopicQuickActionListRelationFilter
    topicActions?: TopicActionListRelationFilter
    projectActions?: ProjectActionListRelationFilter
    activities?: ActivityListRelationFilter
    activityParticipants?: ActivityParticipantListRelationFilter
    activityLikes?: ActivityLikeListRelationFilter
    activityComments?: ActivityCommentListRelationFilter
    userBindings?: UserBindingListRelationFilter
    loginLogs?: LoginLogListRelationFilter
    feedbacks?: FeedbackListRelationFilter
    feedbackReplies?: FeedbackReplyListRelationFilter
    creditLogs?: CreditLogListRelationFilter
    badgeRecords?: UserBadgeRecordListRelationFilter
    checkIns?: DailyCheckInListRelationFilter
    roles?: UserRoleListRelationFilter
    operationLogs?: OperationLogListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    openid?: SortOrderInput | SortOrder
    unionid?: SortOrderInput | SortOrder
    sessionKey?: SortOrderInput | SortOrder
    nickname?: SortOrder
    avatar?: SortOrderInput | SortOrder
    gender?: SortOrder
    phone?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    school?: SortOrderInput | SortOrder
    major?: SortOrderInput | SortOrder
    grade?: SortOrderInput | SortOrder
    verified?: SortOrder
    skills?: SortOrderInput | SortOrder
    interests?: SortOrderInput | SortOrder
    credits?: SortOrder
    level?: SortOrder
    exp?: SortOrder
    topicsCount?: SortOrder
    commentsCount?: SortOrder
    likesCount?: SortOrder
    fansCount?: SortOrder
    followsCount?: SortOrder
    status?: SortOrder
    isCertified?: SortOrder
    isVip?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    lastActiveAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    topics?: TopicOrderByRelationAggregateInput
    projects?: ProjectOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    likes?: LikeOrderByRelationAggregateInput
    bookmarks?: BookmarkOrderByRelationAggregateInput
    follows?: FollowOrderByRelationAggregateInput
    followers?: FollowOrderByRelationAggregateInput
    sentNotifications?: NotificationOrderByRelationAggregateInput
    receivedNotifications?: NotificationOrderByRelationAggregateInput
    userActions?: UserActionOrderByRelationAggregateInput
    topicQuickActions?: TopicQuickActionOrderByRelationAggregateInput
    topicActions?: TopicActionOrderByRelationAggregateInput
    projectActions?: ProjectActionOrderByRelationAggregateInput
    activities?: ActivityOrderByRelationAggregateInput
    activityParticipants?: ActivityParticipantOrderByRelationAggregateInput
    activityLikes?: ActivityLikeOrderByRelationAggregateInput
    activityComments?: ActivityCommentOrderByRelationAggregateInput
    userBindings?: UserBindingOrderByRelationAggregateInput
    loginLogs?: LoginLogOrderByRelationAggregateInput
    feedbacks?: FeedbackOrderByRelationAggregateInput
    feedbackReplies?: FeedbackReplyOrderByRelationAggregateInput
    creditLogs?: CreditLogOrderByRelationAggregateInput
    badgeRecords?: UserBadgeRecordOrderByRelationAggregateInput
    checkIns?: DailyCheckInOrderByRelationAggregateInput
    roles?: UserRoleOrderByRelationAggregateInput
    operationLogs?: OperationLogOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    openid?: string
    phone?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    unionid?: StringNullableFilter<"User"> | string | null
    sessionKey?: StringNullableFilter<"User"> | string | null
    nickname?: StringFilter<"User"> | string
    avatar?: StringNullableFilter<"User"> | string | null
    gender?: IntFilter<"User"> | number
    bio?: StringNullableFilter<"User"> | string | null
    school?: StringNullableFilter<"User"> | string | null
    major?: StringNullableFilter<"User"> | string | null
    grade?: StringNullableFilter<"User"> | string | null
    verified?: BoolFilter<"User"> | boolean
    skills?: StringNullableFilter<"User"> | string | null
    interests?: StringNullableFilter<"User"> | string | null
    credits?: IntFilter<"User"> | number
    level?: IntFilter<"User"> | number
    exp?: IntFilter<"User"> | number
    topicsCount?: IntFilter<"User"> | number
    commentsCount?: IntFilter<"User"> | number
    likesCount?: IntFilter<"User"> | number
    fansCount?: IntFilter<"User"> | number
    followsCount?: IntFilter<"User"> | number
    status?: StringFilter<"User"> | string
    isCertified?: BoolFilter<"User"> | boolean
    isVip?: BoolFilter<"User"> | boolean
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    lastActiveAt?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    topics?: TopicListRelationFilter
    projects?: ProjectListRelationFilter
    comments?: CommentListRelationFilter
    likes?: LikeListRelationFilter
    bookmarks?: BookmarkListRelationFilter
    follows?: FollowListRelationFilter
    followers?: FollowListRelationFilter
    sentNotifications?: NotificationListRelationFilter
    receivedNotifications?: NotificationListRelationFilter
    userActions?: UserActionListRelationFilter
    topicQuickActions?: TopicQuickActionListRelationFilter
    topicActions?: TopicActionListRelationFilter
    projectActions?: ProjectActionListRelationFilter
    activities?: ActivityListRelationFilter
    activityParticipants?: ActivityParticipantListRelationFilter
    activityLikes?: ActivityLikeListRelationFilter
    activityComments?: ActivityCommentListRelationFilter
    userBindings?: UserBindingListRelationFilter
    loginLogs?: LoginLogListRelationFilter
    feedbacks?: FeedbackListRelationFilter
    feedbackReplies?: FeedbackReplyListRelationFilter
    creditLogs?: CreditLogListRelationFilter
    badgeRecords?: UserBadgeRecordListRelationFilter
    checkIns?: DailyCheckInListRelationFilter
    roles?: UserRoleListRelationFilter
    operationLogs?: OperationLogListRelationFilter
  }, "id" | "email" | "openid" | "phone">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    openid?: SortOrderInput | SortOrder
    unionid?: SortOrderInput | SortOrder
    sessionKey?: SortOrderInput | SortOrder
    nickname?: SortOrder
    avatar?: SortOrderInput | SortOrder
    gender?: SortOrder
    phone?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    school?: SortOrderInput | SortOrder
    major?: SortOrderInput | SortOrder
    grade?: SortOrderInput | SortOrder
    verified?: SortOrder
    skills?: SortOrderInput | SortOrder
    interests?: SortOrderInput | SortOrder
    credits?: SortOrder
    level?: SortOrder
    exp?: SortOrder
    topicsCount?: SortOrder
    commentsCount?: SortOrder
    likesCount?: SortOrder
    fansCount?: SortOrder
    followsCount?: SortOrder
    status?: SortOrder
    isCertified?: SortOrder
    isVip?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    lastActiveAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    openid?: StringNullableWithAggregatesFilter<"User"> | string | null
    unionid?: StringNullableWithAggregatesFilter<"User"> | string | null
    sessionKey?: StringNullableWithAggregatesFilter<"User"> | string | null
    nickname?: StringWithAggregatesFilter<"User"> | string
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    gender?: IntWithAggregatesFilter<"User"> | number
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    bio?: StringNullableWithAggregatesFilter<"User"> | string | null
    school?: StringNullableWithAggregatesFilter<"User"> | string | null
    major?: StringNullableWithAggregatesFilter<"User"> | string | null
    grade?: StringNullableWithAggregatesFilter<"User"> | string | null
    verified?: BoolWithAggregatesFilter<"User"> | boolean
    skills?: StringNullableWithAggregatesFilter<"User"> | string | null
    interests?: StringNullableWithAggregatesFilter<"User"> | string | null
    credits?: IntWithAggregatesFilter<"User"> | number
    level?: IntWithAggregatesFilter<"User"> | number
    exp?: IntWithAggregatesFilter<"User"> | number
    topicsCount?: IntWithAggregatesFilter<"User"> | number
    commentsCount?: IntWithAggregatesFilter<"User"> | number
    likesCount?: IntWithAggregatesFilter<"User"> | number
    fansCount?: IntWithAggregatesFilter<"User"> | number
    followsCount?: IntWithAggregatesFilter<"User"> | number
    status?: StringWithAggregatesFilter<"User"> | string
    isCertified?: BoolWithAggregatesFilter<"User"> | boolean
    isVip?: BoolWithAggregatesFilter<"User"> | boolean
    lastLoginAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    lastActiveAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type TopicWhereInput = {
    AND?: TopicWhereInput | TopicWhereInput[]
    OR?: TopicWhereInput[]
    NOT?: TopicWhereInput | TopicWhereInput[]
    id?: StringFilter<"Topic"> | string
    title?: StringFilter<"Topic"> | string
    content?: StringFilter<"Topic"> | string
    contentType?: StringFilter<"Topic"> | string
    summary?: StringNullableFilter<"Topic"> | string | null
    category?: StringFilter<"Topic"> | string
    tags?: StringNullableFilter<"Topic"> | string | null
    topicType?: StringFilter<"Topic"> | string
    demandType?: StringNullableFilter<"Topic"> | string | null
    skillsNeeded?: StringNullableFilter<"Topic"> | string | null
    skillsProvided?: StringNullableFilter<"Topic"> | string | null
    threshold?: IntFilter<"Topic"> | number
    wantToHearCount?: IntFilter<"Topic"> | number
    canTellCount?: IntFilter<"Topic"> | number
    status?: StringFilter<"Topic"> | string
    teamSize?: IntNullableFilter<"Topic"> | number | null
    lookingForRoles?: JsonNullableFilter<"Topic">
    projectStage?: StringNullableFilter<"Topic"> | string | null
    website?: StringNullableFilter<"Topic"> | string | null
    github?: StringNullableFilter<"Topic"> | string | null
    interestedCount?: IntFilter<"Topic"> | number
    duration?: StringNullableFilter<"Topic"> | string | null
    targetAudience?: StringNullableFilter<"Topic"> | string | null
    scheduledTime?: DateTimeNullableFilter<"Topic"> | Date | string | null
    deadline?: DateTimeNullableFilter<"Topic"> | Date | string | null
    budget?: StringNullableFilter<"Topic"> | string | null
    contactInfo?: StringNullableFilter<"Topic"> | string | null
    images?: StringNullableFilter<"Topic"> | string | null
    documents?: StringNullableFilter<"Topic"> | string | null
    videos?: StringNullableFilter<"Topic"> | string | null
    links?: StringNullableFilter<"Topic"> | string | null
    quickActions?: StringNullableFilter<"Topic"> | string | null
    visibility?: StringFilter<"Topic"> | string
    viewsCount?: IntFilter<"Topic"> | number
    likesCount?: IntFilter<"Topic"> | number
    commentsCount?: IntFilter<"Topic"> | number
    bookmarksCount?: IntFilter<"Topic"> | number
    hotScore?: FloatFilter<"Topic"> | number
    trendingScore?: FloatFilter<"Topic"> | number
    isHot?: BoolFilter<"Topic"> | boolean
    publishedAt?: DateTimeNullableFilter<"Topic"> | Date | string | null
    lastActiveAt?: DateTimeFilter<"Topic"> | Date | string
    createdAt?: DateTimeFilter<"Topic"> | Date | string
    updatedAt?: DateTimeFilter<"Topic"> | Date | string
    authorId?: StringFilter<"Topic"> | string
    author?: XOR<UserRelationFilter, UserWhereInput>
    comments?: CommentListRelationFilter
    likes?: LikeListRelationFilter
    bookmarks?: BookmarkListRelationFilter
    notifications?: NotificationListRelationFilter
    userActions?: UserActionListRelationFilter
    quickActionsList?: TopicQuickActionListRelationFilter
    actions?: TopicActionListRelationFilter
  }

  export type TopicOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    contentType?: SortOrder
    summary?: SortOrderInput | SortOrder
    category?: SortOrder
    tags?: SortOrderInput | SortOrder
    topicType?: SortOrder
    demandType?: SortOrderInput | SortOrder
    skillsNeeded?: SortOrderInput | SortOrder
    skillsProvided?: SortOrderInput | SortOrder
    threshold?: SortOrder
    wantToHearCount?: SortOrder
    canTellCount?: SortOrder
    status?: SortOrder
    teamSize?: SortOrderInput | SortOrder
    lookingForRoles?: SortOrderInput | SortOrder
    projectStage?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    github?: SortOrderInput | SortOrder
    interestedCount?: SortOrder
    duration?: SortOrderInput | SortOrder
    targetAudience?: SortOrderInput | SortOrder
    scheduledTime?: SortOrderInput | SortOrder
    deadline?: SortOrderInput | SortOrder
    budget?: SortOrderInput | SortOrder
    contactInfo?: SortOrderInput | SortOrder
    images?: SortOrderInput | SortOrder
    documents?: SortOrderInput | SortOrder
    videos?: SortOrderInput | SortOrder
    links?: SortOrderInput | SortOrder
    quickActions?: SortOrderInput | SortOrder
    visibility?: SortOrder
    viewsCount?: SortOrder
    likesCount?: SortOrder
    commentsCount?: SortOrder
    bookmarksCount?: SortOrder
    hotScore?: SortOrder
    trendingScore?: SortOrder
    isHot?: SortOrder
    publishedAt?: SortOrderInput | SortOrder
    lastActiveAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    author?: UserOrderByWithRelationInput
    comments?: CommentOrderByRelationAggregateInput
    likes?: LikeOrderByRelationAggregateInput
    bookmarks?: BookmarkOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    userActions?: UserActionOrderByRelationAggregateInput
    quickActionsList?: TopicQuickActionOrderByRelationAggregateInput
    actions?: TopicActionOrderByRelationAggregateInput
  }

  export type TopicWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TopicWhereInput | TopicWhereInput[]
    OR?: TopicWhereInput[]
    NOT?: TopicWhereInput | TopicWhereInput[]
    title?: StringFilter<"Topic"> | string
    content?: StringFilter<"Topic"> | string
    contentType?: StringFilter<"Topic"> | string
    summary?: StringNullableFilter<"Topic"> | string | null
    category?: StringFilter<"Topic"> | string
    tags?: StringNullableFilter<"Topic"> | string | null
    topicType?: StringFilter<"Topic"> | string
    demandType?: StringNullableFilter<"Topic"> | string | null
    skillsNeeded?: StringNullableFilter<"Topic"> | string | null
    skillsProvided?: StringNullableFilter<"Topic"> | string | null
    threshold?: IntFilter<"Topic"> | number
    wantToHearCount?: IntFilter<"Topic"> | number
    canTellCount?: IntFilter<"Topic"> | number
    status?: StringFilter<"Topic"> | string
    teamSize?: IntNullableFilter<"Topic"> | number | null
    lookingForRoles?: JsonNullableFilter<"Topic">
    projectStage?: StringNullableFilter<"Topic"> | string | null
    website?: StringNullableFilter<"Topic"> | string | null
    github?: StringNullableFilter<"Topic"> | string | null
    interestedCount?: IntFilter<"Topic"> | number
    duration?: StringNullableFilter<"Topic"> | string | null
    targetAudience?: StringNullableFilter<"Topic"> | string | null
    scheduledTime?: DateTimeNullableFilter<"Topic"> | Date | string | null
    deadline?: DateTimeNullableFilter<"Topic"> | Date | string | null
    budget?: StringNullableFilter<"Topic"> | string | null
    contactInfo?: StringNullableFilter<"Topic"> | string | null
    images?: StringNullableFilter<"Topic"> | string | null
    documents?: StringNullableFilter<"Topic"> | string | null
    videos?: StringNullableFilter<"Topic"> | string | null
    links?: StringNullableFilter<"Topic"> | string | null
    quickActions?: StringNullableFilter<"Topic"> | string | null
    visibility?: StringFilter<"Topic"> | string
    viewsCount?: IntFilter<"Topic"> | number
    likesCount?: IntFilter<"Topic"> | number
    commentsCount?: IntFilter<"Topic"> | number
    bookmarksCount?: IntFilter<"Topic"> | number
    hotScore?: FloatFilter<"Topic"> | number
    trendingScore?: FloatFilter<"Topic"> | number
    isHot?: BoolFilter<"Topic"> | boolean
    publishedAt?: DateTimeNullableFilter<"Topic"> | Date | string | null
    lastActiveAt?: DateTimeFilter<"Topic"> | Date | string
    createdAt?: DateTimeFilter<"Topic"> | Date | string
    updatedAt?: DateTimeFilter<"Topic"> | Date | string
    authorId?: StringFilter<"Topic"> | string
    author?: XOR<UserRelationFilter, UserWhereInput>
    comments?: CommentListRelationFilter
    likes?: LikeListRelationFilter
    bookmarks?: BookmarkListRelationFilter
    notifications?: NotificationListRelationFilter
    userActions?: UserActionListRelationFilter
    quickActionsList?: TopicQuickActionListRelationFilter
    actions?: TopicActionListRelationFilter
  }, "id">

  export type TopicOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    contentType?: SortOrder
    summary?: SortOrderInput | SortOrder
    category?: SortOrder
    tags?: SortOrderInput | SortOrder
    topicType?: SortOrder
    demandType?: SortOrderInput | SortOrder
    skillsNeeded?: SortOrderInput | SortOrder
    skillsProvided?: SortOrderInput | SortOrder
    threshold?: SortOrder
    wantToHearCount?: SortOrder
    canTellCount?: SortOrder
    status?: SortOrder
    teamSize?: SortOrderInput | SortOrder
    lookingForRoles?: SortOrderInput | SortOrder
    projectStage?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    github?: SortOrderInput | SortOrder
    interestedCount?: SortOrder
    duration?: SortOrderInput | SortOrder
    targetAudience?: SortOrderInput | SortOrder
    scheduledTime?: SortOrderInput | SortOrder
    deadline?: SortOrderInput | SortOrder
    budget?: SortOrderInput | SortOrder
    contactInfo?: SortOrderInput | SortOrder
    images?: SortOrderInput | SortOrder
    documents?: SortOrderInput | SortOrder
    videos?: SortOrderInput | SortOrder
    links?: SortOrderInput | SortOrder
    quickActions?: SortOrderInput | SortOrder
    visibility?: SortOrder
    viewsCount?: SortOrder
    likesCount?: SortOrder
    commentsCount?: SortOrder
    bookmarksCount?: SortOrder
    hotScore?: SortOrder
    trendingScore?: SortOrder
    isHot?: SortOrder
    publishedAt?: SortOrderInput | SortOrder
    lastActiveAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    _count?: TopicCountOrderByAggregateInput
    _avg?: TopicAvgOrderByAggregateInput
    _max?: TopicMaxOrderByAggregateInput
    _min?: TopicMinOrderByAggregateInput
    _sum?: TopicSumOrderByAggregateInput
  }

  export type TopicScalarWhereWithAggregatesInput = {
    AND?: TopicScalarWhereWithAggregatesInput | TopicScalarWhereWithAggregatesInput[]
    OR?: TopicScalarWhereWithAggregatesInput[]
    NOT?: TopicScalarWhereWithAggregatesInput | TopicScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Topic"> | string
    title?: StringWithAggregatesFilter<"Topic"> | string
    content?: StringWithAggregatesFilter<"Topic"> | string
    contentType?: StringWithAggregatesFilter<"Topic"> | string
    summary?: StringNullableWithAggregatesFilter<"Topic"> | string | null
    category?: StringWithAggregatesFilter<"Topic"> | string
    tags?: StringNullableWithAggregatesFilter<"Topic"> | string | null
    topicType?: StringWithAggregatesFilter<"Topic"> | string
    demandType?: StringNullableWithAggregatesFilter<"Topic"> | string | null
    skillsNeeded?: StringNullableWithAggregatesFilter<"Topic"> | string | null
    skillsProvided?: StringNullableWithAggregatesFilter<"Topic"> | string | null
    threshold?: IntWithAggregatesFilter<"Topic"> | number
    wantToHearCount?: IntWithAggregatesFilter<"Topic"> | number
    canTellCount?: IntWithAggregatesFilter<"Topic"> | number
    status?: StringWithAggregatesFilter<"Topic"> | string
    teamSize?: IntNullableWithAggregatesFilter<"Topic"> | number | null
    lookingForRoles?: JsonNullableWithAggregatesFilter<"Topic">
    projectStage?: StringNullableWithAggregatesFilter<"Topic"> | string | null
    website?: StringNullableWithAggregatesFilter<"Topic"> | string | null
    github?: StringNullableWithAggregatesFilter<"Topic"> | string | null
    interestedCount?: IntWithAggregatesFilter<"Topic"> | number
    duration?: StringNullableWithAggregatesFilter<"Topic"> | string | null
    targetAudience?: StringNullableWithAggregatesFilter<"Topic"> | string | null
    scheduledTime?: DateTimeNullableWithAggregatesFilter<"Topic"> | Date | string | null
    deadline?: DateTimeNullableWithAggregatesFilter<"Topic"> | Date | string | null
    budget?: StringNullableWithAggregatesFilter<"Topic"> | string | null
    contactInfo?: StringNullableWithAggregatesFilter<"Topic"> | string | null
    images?: StringNullableWithAggregatesFilter<"Topic"> | string | null
    documents?: StringNullableWithAggregatesFilter<"Topic"> | string | null
    videos?: StringNullableWithAggregatesFilter<"Topic"> | string | null
    links?: StringNullableWithAggregatesFilter<"Topic"> | string | null
    quickActions?: StringNullableWithAggregatesFilter<"Topic"> | string | null
    visibility?: StringWithAggregatesFilter<"Topic"> | string
    viewsCount?: IntWithAggregatesFilter<"Topic"> | number
    likesCount?: IntWithAggregatesFilter<"Topic"> | number
    commentsCount?: IntWithAggregatesFilter<"Topic"> | number
    bookmarksCount?: IntWithAggregatesFilter<"Topic"> | number
    hotScore?: FloatWithAggregatesFilter<"Topic"> | number
    trendingScore?: FloatWithAggregatesFilter<"Topic"> | number
    isHot?: BoolWithAggregatesFilter<"Topic"> | boolean
    publishedAt?: DateTimeNullableWithAggregatesFilter<"Topic"> | Date | string | null
    lastActiveAt?: DateTimeWithAggregatesFilter<"Topic"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Topic"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Topic"> | Date | string
    authorId?: StringWithAggregatesFilter<"Topic"> | string
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: StringFilter<"Comment"> | string
    content?: StringFilter<"Comment"> | string
    images?: StringNullableFilter<"Comment"> | string | null
    parentId?: StringNullableFilter<"Comment"> | string | null
    rootId?: StringNullableFilter<"Comment"> | string | null
    repliesCount?: IntFilter<"Comment"> | number
    likesCount?: IntFilter<"Comment"> | number
    status?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    topicId?: StringNullableFilter<"Comment"> | string | null
    projectId?: StringNullableFilter<"Comment"> | string | null
    authorId?: StringFilter<"Comment"> | string
    topic?: XOR<TopicNullableRelationFilter, TopicWhereInput> | null
    project?: XOR<ProjectNullableRelationFilter, ProjectWhereInput> | null
    author?: XOR<UserRelationFilter, UserWhereInput>
    parent?: XOR<CommentNullableRelationFilter, CommentWhereInput> | null
    replies?: CommentListRelationFilter
    likes?: LikeListRelationFilter
    notifications?: NotificationListRelationFilter
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    images?: SortOrderInput | SortOrder
    parentId?: SortOrderInput | SortOrder
    rootId?: SortOrderInput | SortOrder
    repliesCount?: SortOrder
    likesCount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    topicId?: SortOrderInput | SortOrder
    projectId?: SortOrderInput | SortOrder
    authorId?: SortOrder
    topic?: TopicOrderByWithRelationInput
    project?: ProjectOrderByWithRelationInput
    author?: UserOrderByWithRelationInput
    parent?: CommentOrderByWithRelationInput
    replies?: CommentOrderByRelationAggregateInput
    likes?: LikeOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    content?: StringFilter<"Comment"> | string
    images?: StringNullableFilter<"Comment"> | string | null
    parentId?: StringNullableFilter<"Comment"> | string | null
    rootId?: StringNullableFilter<"Comment"> | string | null
    repliesCount?: IntFilter<"Comment"> | number
    likesCount?: IntFilter<"Comment"> | number
    status?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    topicId?: StringNullableFilter<"Comment"> | string | null
    projectId?: StringNullableFilter<"Comment"> | string | null
    authorId?: StringFilter<"Comment"> | string
    topic?: XOR<TopicNullableRelationFilter, TopicWhereInput> | null
    project?: XOR<ProjectNullableRelationFilter, ProjectWhereInput> | null
    author?: XOR<UserRelationFilter, UserWhereInput>
    parent?: XOR<CommentNullableRelationFilter, CommentWhereInput> | null
    replies?: CommentListRelationFilter
    likes?: LikeListRelationFilter
    notifications?: NotificationListRelationFilter
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    images?: SortOrderInput | SortOrder
    parentId?: SortOrderInput | SortOrder
    rootId?: SortOrderInput | SortOrder
    repliesCount?: SortOrder
    likesCount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    topicId?: SortOrderInput | SortOrder
    projectId?: SortOrderInput | SortOrder
    authorId?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _avg?: CommentAvgOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
    _sum?: CommentSumOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Comment"> | string
    content?: StringWithAggregatesFilter<"Comment"> | string
    images?: StringNullableWithAggregatesFilter<"Comment"> | string | null
    parentId?: StringNullableWithAggregatesFilter<"Comment"> | string | null
    rootId?: StringNullableWithAggregatesFilter<"Comment"> | string | null
    repliesCount?: IntWithAggregatesFilter<"Comment"> | number
    likesCount?: IntWithAggregatesFilter<"Comment"> | number
    status?: StringWithAggregatesFilter<"Comment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    topicId?: StringNullableWithAggregatesFilter<"Comment"> | string | null
    projectId?: StringNullableWithAggregatesFilter<"Comment"> | string | null
    authorId?: StringWithAggregatesFilter<"Comment"> | string
  }

  export type LikeWhereInput = {
    AND?: LikeWhereInput | LikeWhereInput[]
    OR?: LikeWhereInput[]
    NOT?: LikeWhereInput | LikeWhereInput[]
    id?: StringFilter<"Like"> | string
    targetType?: StringFilter<"Like"> | string
    targetId?: StringFilter<"Like"> | string
    createdAt?: DateTimeFilter<"Like"> | Date | string
    userId?: StringFilter<"Like"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    topic?: XOR<TopicNullableRelationFilter, TopicWhereInput> | null
    comment?: XOR<CommentNullableRelationFilter, CommentWhereInput> | null
  }

  export type LikeOrderByWithRelationInput = {
    id?: SortOrder
    targetType?: SortOrder
    targetId?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    topic?: TopicOrderByWithRelationInput
    comment?: CommentOrderByWithRelationInput
  }

  export type LikeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_targetType_targetId?: LikeUserIdTargetTypeTargetIdCompoundUniqueInput
    AND?: LikeWhereInput | LikeWhereInput[]
    OR?: LikeWhereInput[]
    NOT?: LikeWhereInput | LikeWhereInput[]
    targetType?: StringFilter<"Like"> | string
    targetId?: StringFilter<"Like"> | string
    createdAt?: DateTimeFilter<"Like"> | Date | string
    userId?: StringFilter<"Like"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    topic?: XOR<TopicNullableRelationFilter, TopicWhereInput> | null
    comment?: XOR<CommentNullableRelationFilter, CommentWhereInput> | null
  }, "id" | "userId_targetType_targetId">

  export type LikeOrderByWithAggregationInput = {
    id?: SortOrder
    targetType?: SortOrder
    targetId?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    _count?: LikeCountOrderByAggregateInput
    _max?: LikeMaxOrderByAggregateInput
    _min?: LikeMinOrderByAggregateInput
  }

  export type LikeScalarWhereWithAggregatesInput = {
    AND?: LikeScalarWhereWithAggregatesInput | LikeScalarWhereWithAggregatesInput[]
    OR?: LikeScalarWhereWithAggregatesInput[]
    NOT?: LikeScalarWhereWithAggregatesInput | LikeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Like"> | string
    targetType?: StringWithAggregatesFilter<"Like"> | string
    targetId?: StringWithAggregatesFilter<"Like"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Like"> | Date | string
    userId?: StringWithAggregatesFilter<"Like"> | string
  }

  export type BookmarkWhereInput = {
    AND?: BookmarkWhereInput | BookmarkWhereInput[]
    OR?: BookmarkWhereInput[]
    NOT?: BookmarkWhereInput | BookmarkWhereInput[]
    id?: StringFilter<"Bookmark"> | string
    createdAt?: DateTimeFilter<"Bookmark"> | Date | string
    userId?: StringFilter<"Bookmark"> | string
    topicId?: StringFilter<"Bookmark"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    topic?: XOR<TopicRelationFilter, TopicWhereInput>
  }

  export type BookmarkOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    topicId?: SortOrder
    user?: UserOrderByWithRelationInput
    topic?: TopicOrderByWithRelationInput
  }

  export type BookmarkWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_topicId?: BookmarkUserIdTopicIdCompoundUniqueInput
    AND?: BookmarkWhereInput | BookmarkWhereInput[]
    OR?: BookmarkWhereInput[]
    NOT?: BookmarkWhereInput | BookmarkWhereInput[]
    createdAt?: DateTimeFilter<"Bookmark"> | Date | string
    userId?: StringFilter<"Bookmark"> | string
    topicId?: StringFilter<"Bookmark"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    topic?: XOR<TopicRelationFilter, TopicWhereInput>
  }, "id" | "userId_topicId">

  export type BookmarkOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    topicId?: SortOrder
    _count?: BookmarkCountOrderByAggregateInput
    _max?: BookmarkMaxOrderByAggregateInput
    _min?: BookmarkMinOrderByAggregateInput
  }

  export type BookmarkScalarWhereWithAggregatesInput = {
    AND?: BookmarkScalarWhereWithAggregatesInput | BookmarkScalarWhereWithAggregatesInput[]
    OR?: BookmarkScalarWhereWithAggregatesInput[]
    NOT?: BookmarkScalarWhereWithAggregatesInput | BookmarkScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Bookmark"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Bookmark"> | Date | string
    userId?: StringWithAggregatesFilter<"Bookmark"> | string
    topicId?: StringWithAggregatesFilter<"Bookmark"> | string
  }

  export type FollowWhereInput = {
    AND?: FollowWhereInput | FollowWhereInput[]
    OR?: FollowWhereInput[]
    NOT?: FollowWhereInput | FollowWhereInput[]
    id?: StringFilter<"Follow"> | string
    createdAt?: DateTimeFilter<"Follow"> | Date | string
    followerId?: StringFilter<"Follow"> | string
    followingId?: StringFilter<"Follow"> | string
    follower?: XOR<UserRelationFilter, UserWhereInput>
    following?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type FollowOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    followerId?: SortOrder
    followingId?: SortOrder
    follower?: UserOrderByWithRelationInput
    following?: UserOrderByWithRelationInput
  }

  export type FollowWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    followerId_followingId?: FollowFollowerIdFollowingIdCompoundUniqueInput
    AND?: FollowWhereInput | FollowWhereInput[]
    OR?: FollowWhereInput[]
    NOT?: FollowWhereInput | FollowWhereInput[]
    createdAt?: DateTimeFilter<"Follow"> | Date | string
    followerId?: StringFilter<"Follow"> | string
    followingId?: StringFilter<"Follow"> | string
    follower?: XOR<UserRelationFilter, UserWhereInput>
    following?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "followerId_followingId">

  export type FollowOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    followerId?: SortOrder
    followingId?: SortOrder
    _count?: FollowCountOrderByAggregateInput
    _max?: FollowMaxOrderByAggregateInput
    _min?: FollowMinOrderByAggregateInput
  }

  export type FollowScalarWhereWithAggregatesInput = {
    AND?: FollowScalarWhereWithAggregatesInput | FollowScalarWhereWithAggregatesInput[]
    OR?: FollowScalarWhereWithAggregatesInput[]
    NOT?: FollowScalarWhereWithAggregatesInput | FollowScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Follow"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Follow"> | Date | string
    followerId?: StringWithAggregatesFilter<"Follow"> | string
    followingId?: StringWithAggregatesFilter<"Follow"> | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    type?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    content?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    link?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    userId?: StringFilter<"Notification"> | string
    actorId?: StringNullableFilter<"Notification"> | string | null
    targetType?: StringFilter<"Notification"> | string
    targetId?: StringFilter<"Notification"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    actor?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    topic?: XOR<TopicNullableRelationFilter, TopicWhereInput> | null
    comment?: XOR<CommentNullableRelationFilter, CommentWhereInput> | null
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrderInput | SortOrder
    link?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    actorId?: SortOrderInput | SortOrder
    targetType?: SortOrder
    targetId?: SortOrder
    user?: UserOrderByWithRelationInput
    actor?: UserOrderByWithRelationInput
    topic?: TopicOrderByWithRelationInput
    comment?: CommentOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    type?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    content?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    link?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    userId?: StringFilter<"Notification"> | string
    actorId?: StringNullableFilter<"Notification"> | string | null
    targetType?: StringFilter<"Notification"> | string
    targetId?: StringFilter<"Notification"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    actor?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    topic?: XOR<TopicNullableRelationFilter, TopicWhereInput> | null
    comment?: XOR<CommentNullableRelationFilter, CommentWhereInput> | null
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrderInput | SortOrder
    link?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    actorId?: SortOrderInput | SortOrder
    targetType?: SortOrder
    targetId?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    type?: StringWithAggregatesFilter<"Notification"> | string
    title?: StringWithAggregatesFilter<"Notification"> | string
    content?: StringWithAggregatesFilter<"Notification"> | string
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    readAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    link?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    userId?: StringWithAggregatesFilter<"Notification"> | string
    actorId?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    targetType?: StringWithAggregatesFilter<"Notification"> | string
    targetId?: StringWithAggregatesFilter<"Notification"> | string
  }

  export type UserActionWhereInput = {
    AND?: UserActionWhereInput | UserActionWhereInput[]
    OR?: UserActionWhereInput[]
    NOT?: UserActionWhereInput | UserActionWhereInput[]
    id?: StringFilter<"UserAction"> | string
    actionType?: StringFilter<"UserAction"> | string
    targetType?: StringFilter<"UserAction"> | string
    targetId?: StringFilter<"UserAction"> | string
    metadata?: StringNullableFilter<"UserAction"> | string | null
    createdAt?: DateTimeFilter<"UserAction"> | Date | string
    userId?: StringFilter<"UserAction"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    topic?: XOR<TopicNullableRelationFilter, TopicWhereInput> | null
  }

  export type UserActionOrderByWithRelationInput = {
    id?: SortOrder
    actionType?: SortOrder
    targetType?: SortOrder
    targetId?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    topic?: TopicOrderByWithRelationInput
  }

  export type UserActionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserActionWhereInput | UserActionWhereInput[]
    OR?: UserActionWhereInput[]
    NOT?: UserActionWhereInput | UserActionWhereInput[]
    actionType?: StringFilter<"UserAction"> | string
    targetType?: StringFilter<"UserAction"> | string
    targetId?: StringFilter<"UserAction"> | string
    metadata?: StringNullableFilter<"UserAction"> | string | null
    createdAt?: DateTimeFilter<"UserAction"> | Date | string
    userId?: StringFilter<"UserAction"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    topic?: XOR<TopicNullableRelationFilter, TopicWhereInput> | null
  }, "id">

  export type UserActionOrderByWithAggregationInput = {
    id?: SortOrder
    actionType?: SortOrder
    targetType?: SortOrder
    targetId?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    _count?: UserActionCountOrderByAggregateInput
    _max?: UserActionMaxOrderByAggregateInput
    _min?: UserActionMinOrderByAggregateInput
  }

  export type UserActionScalarWhereWithAggregatesInput = {
    AND?: UserActionScalarWhereWithAggregatesInput | UserActionScalarWhereWithAggregatesInput[]
    OR?: UserActionScalarWhereWithAggregatesInput[]
    NOT?: UserActionScalarWhereWithAggregatesInput | UserActionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserAction"> | string
    actionType?: StringWithAggregatesFilter<"UserAction"> | string
    targetType?: StringWithAggregatesFilter<"UserAction"> | string
    targetId?: StringWithAggregatesFilter<"UserAction"> | string
    metadata?: StringNullableWithAggregatesFilter<"UserAction"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UserAction"> | Date | string
    userId?: StringWithAggregatesFilter<"UserAction"> | string
  }

  export type TopicQuickActionWhereInput = {
    AND?: TopicQuickActionWhereInput | TopicQuickActionWhereInput[]
    OR?: TopicQuickActionWhereInput[]
    NOT?: TopicQuickActionWhereInput | TopicQuickActionWhereInput[]
    id?: StringFilter<"TopicQuickAction"> | string
    actionType?: StringFilter<"TopicQuickAction"> | string
    createdAt?: DateTimeFilter<"TopicQuickAction"> | Date | string
    topicId?: StringFilter<"TopicQuickAction"> | string
    userId?: StringFilter<"TopicQuickAction"> | string
    topic?: XOR<TopicRelationFilter, TopicWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type TopicQuickActionOrderByWithRelationInput = {
    id?: SortOrder
    actionType?: SortOrder
    createdAt?: SortOrder
    topicId?: SortOrder
    userId?: SortOrder
    topic?: TopicOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type TopicQuickActionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    topicId_userId_actionType?: TopicQuickActionTopicIdUserIdActionTypeCompoundUniqueInput
    AND?: TopicQuickActionWhereInput | TopicQuickActionWhereInput[]
    OR?: TopicQuickActionWhereInput[]
    NOT?: TopicQuickActionWhereInput | TopicQuickActionWhereInput[]
    actionType?: StringFilter<"TopicQuickAction"> | string
    createdAt?: DateTimeFilter<"TopicQuickAction"> | Date | string
    topicId?: StringFilter<"TopicQuickAction"> | string
    userId?: StringFilter<"TopicQuickAction"> | string
    topic?: XOR<TopicRelationFilter, TopicWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "topicId_userId_actionType">

  export type TopicQuickActionOrderByWithAggregationInput = {
    id?: SortOrder
    actionType?: SortOrder
    createdAt?: SortOrder
    topicId?: SortOrder
    userId?: SortOrder
    _count?: TopicQuickActionCountOrderByAggregateInput
    _max?: TopicQuickActionMaxOrderByAggregateInput
    _min?: TopicQuickActionMinOrderByAggregateInput
  }

  export type TopicQuickActionScalarWhereWithAggregatesInput = {
    AND?: TopicQuickActionScalarWhereWithAggregatesInput | TopicQuickActionScalarWhereWithAggregatesInput[]
    OR?: TopicQuickActionScalarWhereWithAggregatesInput[]
    NOT?: TopicQuickActionScalarWhereWithAggregatesInput | TopicQuickActionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TopicQuickAction"> | string
    actionType?: StringWithAggregatesFilter<"TopicQuickAction"> | string
    createdAt?: DateTimeWithAggregatesFilter<"TopicQuickAction"> | Date | string
    topicId?: StringWithAggregatesFilter<"TopicQuickAction"> | string
    userId?: StringWithAggregatesFilter<"TopicQuickAction"> | string
  }

  export type TopicActionWhereInput = {
    AND?: TopicActionWhereInput | TopicActionWhereInput[]
    OR?: TopicActionWhereInput[]
    NOT?: TopicActionWhereInput | TopicActionWhereInput[]
    id?: StringFilter<"TopicAction"> | string
    type?: StringFilter<"TopicAction"> | string
    userId?: StringFilter<"TopicAction"> | string
    topicId?: StringFilter<"TopicAction"> | string
    createdAt?: DateTimeFilter<"TopicAction"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    topic?: XOR<TopicRelationFilter, TopicWhereInput>
  }

  export type TopicActionOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    topicId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    topic?: TopicOrderByWithRelationInput
  }

  export type TopicActionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_topicId_type?: TopicActionUserIdTopicIdTypeCompoundUniqueInput
    AND?: TopicActionWhereInput | TopicActionWhereInput[]
    OR?: TopicActionWhereInput[]
    NOT?: TopicActionWhereInput | TopicActionWhereInput[]
    type?: StringFilter<"TopicAction"> | string
    userId?: StringFilter<"TopicAction"> | string
    topicId?: StringFilter<"TopicAction"> | string
    createdAt?: DateTimeFilter<"TopicAction"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    topic?: XOR<TopicRelationFilter, TopicWhereInput>
  }, "id" | "userId_topicId_type">

  export type TopicActionOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    topicId?: SortOrder
    createdAt?: SortOrder
    _count?: TopicActionCountOrderByAggregateInput
    _max?: TopicActionMaxOrderByAggregateInput
    _min?: TopicActionMinOrderByAggregateInput
  }

  export type TopicActionScalarWhereWithAggregatesInput = {
    AND?: TopicActionScalarWhereWithAggregatesInput | TopicActionScalarWhereWithAggregatesInput[]
    OR?: TopicActionScalarWhereWithAggregatesInput[]
    NOT?: TopicActionScalarWhereWithAggregatesInput | TopicActionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TopicAction"> | string
    type?: StringWithAggregatesFilter<"TopicAction"> | string
    userId?: StringWithAggregatesFilter<"TopicAction"> | string
    topicId?: StringWithAggregatesFilter<"TopicAction"> | string
    createdAt?: DateTimeWithAggregatesFilter<"TopicAction"> | Date | string
  }

  export type ProjectActionWhereInput = {
    AND?: ProjectActionWhereInput | ProjectActionWhereInput[]
    OR?: ProjectActionWhereInput[]
    NOT?: ProjectActionWhereInput | ProjectActionWhereInput[]
    id?: StringFilter<"ProjectAction"> | string
    type?: StringFilter<"ProjectAction"> | string
    userId?: StringFilter<"ProjectAction"> | string
    projectId?: StringFilter<"ProjectAction"> | string
    createdAt?: DateTimeFilter<"ProjectAction"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
  }

  export type ProjectActionOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    project?: ProjectOrderByWithRelationInput
  }

  export type ProjectActionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_projectId_type?: ProjectActionUserIdProjectIdTypeCompoundUniqueInput
    AND?: ProjectActionWhereInput | ProjectActionWhereInput[]
    OR?: ProjectActionWhereInput[]
    NOT?: ProjectActionWhereInput | ProjectActionWhereInput[]
    type?: StringFilter<"ProjectAction"> | string
    userId?: StringFilter<"ProjectAction"> | string
    projectId?: StringFilter<"ProjectAction"> | string
    createdAt?: DateTimeFilter<"ProjectAction"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
  }, "id" | "userId_projectId_type">

  export type ProjectActionOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    _count?: ProjectActionCountOrderByAggregateInput
    _max?: ProjectActionMaxOrderByAggregateInput
    _min?: ProjectActionMinOrderByAggregateInput
  }

  export type ProjectActionScalarWhereWithAggregatesInput = {
    AND?: ProjectActionScalarWhereWithAggregatesInput | ProjectActionScalarWhereWithAggregatesInput[]
    OR?: ProjectActionScalarWhereWithAggregatesInput[]
    NOT?: ProjectActionScalarWhereWithAggregatesInput | ProjectActionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProjectAction"> | string
    type?: StringWithAggregatesFilter<"ProjectAction"> | string
    userId?: StringWithAggregatesFilter<"ProjectAction"> | string
    projectId?: StringWithAggregatesFilter<"ProjectAction"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ProjectAction"> | Date | string
  }

  export type ProjectWhereInput = {
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    id?: StringFilter<"Project"> | string
    category?: StringFilter<"Project"> | string
    title?: StringFilter<"Project"> | string
    description?: StringFilter<"Project"> | string
    tags?: StringNullableFilter<"Project"> | string | null
    teamSize?: IntNullableFilter<"Project"> | number | null
    lookingForRoles?: JsonNullableFilter<"Project">
    projectStage?: StringNullableFilter<"Project"> | string | null
    website?: StringNullableFilter<"Project"> | string | null
    github?: StringNullableFilter<"Project"> | string | null
    viewCount?: IntFilter<"Project"> | number
    likeCount?: IntFilter<"Project"> | number
    commentCount?: IntFilter<"Project"> | number
    interestedCount?: IntFilter<"Project"> | number
    images?: StringNullableFilter<"Project"> | string | null
    authorId?: StringFilter<"Project"> | string
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    author?: XOR<UserRelationFilter, UserWhereInput>
    comments?: CommentListRelationFilter
    actions?: ProjectActionListRelationFilter
  }

  export type ProjectOrderByWithRelationInput = {
    id?: SortOrder
    category?: SortOrder
    title?: SortOrder
    description?: SortOrder
    tags?: SortOrderInput | SortOrder
    teamSize?: SortOrderInput | SortOrder
    lookingForRoles?: SortOrderInput | SortOrder
    projectStage?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    github?: SortOrderInput | SortOrder
    viewCount?: SortOrder
    likeCount?: SortOrder
    commentCount?: SortOrder
    interestedCount?: SortOrder
    images?: SortOrderInput | SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    author?: UserOrderByWithRelationInput
    comments?: CommentOrderByRelationAggregateInput
    actions?: ProjectActionOrderByRelationAggregateInput
  }

  export type ProjectWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    category?: StringFilter<"Project"> | string
    title?: StringFilter<"Project"> | string
    description?: StringFilter<"Project"> | string
    tags?: StringNullableFilter<"Project"> | string | null
    teamSize?: IntNullableFilter<"Project"> | number | null
    lookingForRoles?: JsonNullableFilter<"Project">
    projectStage?: StringNullableFilter<"Project"> | string | null
    website?: StringNullableFilter<"Project"> | string | null
    github?: StringNullableFilter<"Project"> | string | null
    viewCount?: IntFilter<"Project"> | number
    likeCount?: IntFilter<"Project"> | number
    commentCount?: IntFilter<"Project"> | number
    interestedCount?: IntFilter<"Project"> | number
    images?: StringNullableFilter<"Project"> | string | null
    authorId?: StringFilter<"Project"> | string
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    author?: XOR<UserRelationFilter, UserWhereInput>
    comments?: CommentListRelationFilter
    actions?: ProjectActionListRelationFilter
  }, "id">

  export type ProjectOrderByWithAggregationInput = {
    id?: SortOrder
    category?: SortOrder
    title?: SortOrder
    description?: SortOrder
    tags?: SortOrderInput | SortOrder
    teamSize?: SortOrderInput | SortOrder
    lookingForRoles?: SortOrderInput | SortOrder
    projectStage?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    github?: SortOrderInput | SortOrder
    viewCount?: SortOrder
    likeCount?: SortOrder
    commentCount?: SortOrder
    interestedCount?: SortOrder
    images?: SortOrderInput | SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _avg?: ProjectAvgOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
    _sum?: ProjectSumOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    OR?: ProjectScalarWhereWithAggregatesInput[]
    NOT?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Project"> | string
    category?: StringWithAggregatesFilter<"Project"> | string
    title?: StringWithAggregatesFilter<"Project"> | string
    description?: StringWithAggregatesFilter<"Project"> | string
    tags?: StringNullableWithAggregatesFilter<"Project"> | string | null
    teamSize?: IntNullableWithAggregatesFilter<"Project"> | number | null
    lookingForRoles?: JsonNullableWithAggregatesFilter<"Project">
    projectStage?: StringNullableWithAggregatesFilter<"Project"> | string | null
    website?: StringNullableWithAggregatesFilter<"Project"> | string | null
    github?: StringNullableWithAggregatesFilter<"Project"> | string | null
    viewCount?: IntWithAggregatesFilter<"Project"> | number
    likeCount?: IntWithAggregatesFilter<"Project"> | number
    commentCount?: IntWithAggregatesFilter<"Project"> | number
    interestedCount?: IntWithAggregatesFilter<"Project"> | number
    images?: StringNullableWithAggregatesFilter<"Project"> | string | null
    authorId?: StringWithAggregatesFilter<"Project"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
  }

  export type ActivityWhereInput = {
    AND?: ActivityWhereInput | ActivityWhereInput[]
    OR?: ActivityWhereInput[]
    NOT?: ActivityWhereInput | ActivityWhereInput[]
    id?: StringFilter<"Activity"> | string
    title?: StringFilter<"Activity"> | string
    description?: StringFilter<"Activity"> | string
    location?: StringFilter<"Activity"> | string
    startTime?: DateTimeFilter<"Activity"> | Date | string
    endTime?: DateTimeNullableFilter<"Activity"> | Date | string | null
    maxParticipants?: IntNullableFilter<"Activity"> | number | null
    category?: StringFilter<"Activity"> | string
    tags?: StringNullableFilter<"Activity"> | string | null
    cover?: StringNullableFilter<"Activity"> | string | null
    images?: StringNullableFilter<"Activity"> | string | null
    participantsCount?: IntFilter<"Activity"> | number
    likesCount?: IntFilter<"Activity"> | number
    commentsCount?: IntFilter<"Activity"> | number
    status?: StringFilter<"Activity"> | string
    createdAt?: DateTimeFilter<"Activity"> | Date | string
    updatedAt?: DateTimeFilter<"Activity"> | Date | string
    authorId?: StringFilter<"Activity"> | string
    author?: XOR<UserRelationFilter, UserWhereInput>
    participants?: ActivityParticipantListRelationFilter
    likes?: ActivityLikeListRelationFilter
    comments?: ActivityCommentListRelationFilter
  }

  export type ActivityOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    maxParticipants?: SortOrderInput | SortOrder
    category?: SortOrder
    tags?: SortOrderInput | SortOrder
    cover?: SortOrderInput | SortOrder
    images?: SortOrderInput | SortOrder
    participantsCount?: SortOrder
    likesCount?: SortOrder
    commentsCount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    author?: UserOrderByWithRelationInput
    participants?: ActivityParticipantOrderByRelationAggregateInput
    likes?: ActivityLikeOrderByRelationAggregateInput
    comments?: ActivityCommentOrderByRelationAggregateInput
  }

  export type ActivityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ActivityWhereInput | ActivityWhereInput[]
    OR?: ActivityWhereInput[]
    NOT?: ActivityWhereInput | ActivityWhereInput[]
    title?: StringFilter<"Activity"> | string
    description?: StringFilter<"Activity"> | string
    location?: StringFilter<"Activity"> | string
    startTime?: DateTimeFilter<"Activity"> | Date | string
    endTime?: DateTimeNullableFilter<"Activity"> | Date | string | null
    maxParticipants?: IntNullableFilter<"Activity"> | number | null
    category?: StringFilter<"Activity"> | string
    tags?: StringNullableFilter<"Activity"> | string | null
    cover?: StringNullableFilter<"Activity"> | string | null
    images?: StringNullableFilter<"Activity"> | string | null
    participantsCount?: IntFilter<"Activity"> | number
    likesCount?: IntFilter<"Activity"> | number
    commentsCount?: IntFilter<"Activity"> | number
    status?: StringFilter<"Activity"> | string
    createdAt?: DateTimeFilter<"Activity"> | Date | string
    updatedAt?: DateTimeFilter<"Activity"> | Date | string
    authorId?: StringFilter<"Activity"> | string
    author?: XOR<UserRelationFilter, UserWhereInput>
    participants?: ActivityParticipantListRelationFilter
    likes?: ActivityLikeListRelationFilter
    comments?: ActivityCommentListRelationFilter
  }, "id">

  export type ActivityOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    maxParticipants?: SortOrderInput | SortOrder
    category?: SortOrder
    tags?: SortOrderInput | SortOrder
    cover?: SortOrderInput | SortOrder
    images?: SortOrderInput | SortOrder
    participantsCount?: SortOrder
    likesCount?: SortOrder
    commentsCount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    _count?: ActivityCountOrderByAggregateInput
    _avg?: ActivityAvgOrderByAggregateInput
    _max?: ActivityMaxOrderByAggregateInput
    _min?: ActivityMinOrderByAggregateInput
    _sum?: ActivitySumOrderByAggregateInput
  }

  export type ActivityScalarWhereWithAggregatesInput = {
    AND?: ActivityScalarWhereWithAggregatesInput | ActivityScalarWhereWithAggregatesInput[]
    OR?: ActivityScalarWhereWithAggregatesInput[]
    NOT?: ActivityScalarWhereWithAggregatesInput | ActivityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Activity"> | string
    title?: StringWithAggregatesFilter<"Activity"> | string
    description?: StringWithAggregatesFilter<"Activity"> | string
    location?: StringWithAggregatesFilter<"Activity"> | string
    startTime?: DateTimeWithAggregatesFilter<"Activity"> | Date | string
    endTime?: DateTimeNullableWithAggregatesFilter<"Activity"> | Date | string | null
    maxParticipants?: IntNullableWithAggregatesFilter<"Activity"> | number | null
    category?: StringWithAggregatesFilter<"Activity"> | string
    tags?: StringNullableWithAggregatesFilter<"Activity"> | string | null
    cover?: StringNullableWithAggregatesFilter<"Activity"> | string | null
    images?: StringNullableWithAggregatesFilter<"Activity"> | string | null
    participantsCount?: IntWithAggregatesFilter<"Activity"> | number
    likesCount?: IntWithAggregatesFilter<"Activity"> | number
    commentsCount?: IntWithAggregatesFilter<"Activity"> | number
    status?: StringWithAggregatesFilter<"Activity"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Activity"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Activity"> | Date | string
    authorId?: StringWithAggregatesFilter<"Activity"> | string
  }

  export type ActivityParticipantWhereInput = {
    AND?: ActivityParticipantWhereInput | ActivityParticipantWhereInput[]
    OR?: ActivityParticipantWhereInput[]
    NOT?: ActivityParticipantWhereInput | ActivityParticipantWhereInput[]
    id?: StringFilter<"ActivityParticipant"> | string
    createdAt?: DateTimeFilter<"ActivityParticipant"> | Date | string
    userId?: StringFilter<"ActivityParticipant"> | string
    activityId?: StringFilter<"ActivityParticipant"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    activity?: XOR<ActivityRelationFilter, ActivityWhereInput>
  }

  export type ActivityParticipantOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
    user?: UserOrderByWithRelationInput
    activity?: ActivityOrderByWithRelationInput
  }

  export type ActivityParticipantWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_activityId?: ActivityParticipantUserIdActivityIdCompoundUniqueInput
    AND?: ActivityParticipantWhereInput | ActivityParticipantWhereInput[]
    OR?: ActivityParticipantWhereInput[]
    NOT?: ActivityParticipantWhereInput | ActivityParticipantWhereInput[]
    createdAt?: DateTimeFilter<"ActivityParticipant"> | Date | string
    userId?: StringFilter<"ActivityParticipant"> | string
    activityId?: StringFilter<"ActivityParticipant"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    activity?: XOR<ActivityRelationFilter, ActivityWhereInput>
  }, "id" | "userId_activityId">

  export type ActivityParticipantOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
    _count?: ActivityParticipantCountOrderByAggregateInput
    _max?: ActivityParticipantMaxOrderByAggregateInput
    _min?: ActivityParticipantMinOrderByAggregateInput
  }

  export type ActivityParticipantScalarWhereWithAggregatesInput = {
    AND?: ActivityParticipantScalarWhereWithAggregatesInput | ActivityParticipantScalarWhereWithAggregatesInput[]
    OR?: ActivityParticipantScalarWhereWithAggregatesInput[]
    NOT?: ActivityParticipantScalarWhereWithAggregatesInput | ActivityParticipantScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ActivityParticipant"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ActivityParticipant"> | Date | string
    userId?: StringWithAggregatesFilter<"ActivityParticipant"> | string
    activityId?: StringWithAggregatesFilter<"ActivityParticipant"> | string
  }

  export type ActivityLikeWhereInput = {
    AND?: ActivityLikeWhereInput | ActivityLikeWhereInput[]
    OR?: ActivityLikeWhereInput[]
    NOT?: ActivityLikeWhereInput | ActivityLikeWhereInput[]
    id?: StringFilter<"ActivityLike"> | string
    createdAt?: DateTimeFilter<"ActivityLike"> | Date | string
    userId?: StringFilter<"ActivityLike"> | string
    activityId?: StringFilter<"ActivityLike"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    activity?: XOR<ActivityRelationFilter, ActivityWhereInput>
  }

  export type ActivityLikeOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
    user?: UserOrderByWithRelationInput
    activity?: ActivityOrderByWithRelationInput
  }

  export type ActivityLikeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_activityId?: ActivityLikeUserIdActivityIdCompoundUniqueInput
    AND?: ActivityLikeWhereInput | ActivityLikeWhereInput[]
    OR?: ActivityLikeWhereInput[]
    NOT?: ActivityLikeWhereInput | ActivityLikeWhereInput[]
    createdAt?: DateTimeFilter<"ActivityLike"> | Date | string
    userId?: StringFilter<"ActivityLike"> | string
    activityId?: StringFilter<"ActivityLike"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    activity?: XOR<ActivityRelationFilter, ActivityWhereInput>
  }, "id" | "userId_activityId">

  export type ActivityLikeOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
    _count?: ActivityLikeCountOrderByAggregateInput
    _max?: ActivityLikeMaxOrderByAggregateInput
    _min?: ActivityLikeMinOrderByAggregateInput
  }

  export type ActivityLikeScalarWhereWithAggregatesInput = {
    AND?: ActivityLikeScalarWhereWithAggregatesInput | ActivityLikeScalarWhereWithAggregatesInput[]
    OR?: ActivityLikeScalarWhereWithAggregatesInput[]
    NOT?: ActivityLikeScalarWhereWithAggregatesInput | ActivityLikeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ActivityLike"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ActivityLike"> | Date | string
    userId?: StringWithAggregatesFilter<"ActivityLike"> | string
    activityId?: StringWithAggregatesFilter<"ActivityLike"> | string
  }

  export type ActivityCommentWhereInput = {
    AND?: ActivityCommentWhereInput | ActivityCommentWhereInput[]
    OR?: ActivityCommentWhereInput[]
    NOT?: ActivityCommentWhereInput | ActivityCommentWhereInput[]
    id?: StringFilter<"ActivityComment"> | string
    content?: StringFilter<"ActivityComment"> | string
    createdAt?: DateTimeFilter<"ActivityComment"> | Date | string
    updatedAt?: DateTimeFilter<"ActivityComment"> | Date | string
    authorId?: StringFilter<"ActivityComment"> | string
    activityId?: StringFilter<"ActivityComment"> | string
    author?: XOR<UserRelationFilter, UserWhereInput>
    activity?: XOR<ActivityRelationFilter, ActivityWhereInput>
  }

  export type ActivityCommentOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    activityId?: SortOrder
    author?: UserOrderByWithRelationInput
    activity?: ActivityOrderByWithRelationInput
  }

  export type ActivityCommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ActivityCommentWhereInput | ActivityCommentWhereInput[]
    OR?: ActivityCommentWhereInput[]
    NOT?: ActivityCommentWhereInput | ActivityCommentWhereInput[]
    content?: StringFilter<"ActivityComment"> | string
    createdAt?: DateTimeFilter<"ActivityComment"> | Date | string
    updatedAt?: DateTimeFilter<"ActivityComment"> | Date | string
    authorId?: StringFilter<"ActivityComment"> | string
    activityId?: StringFilter<"ActivityComment"> | string
    author?: XOR<UserRelationFilter, UserWhereInput>
    activity?: XOR<ActivityRelationFilter, ActivityWhereInput>
  }, "id">

  export type ActivityCommentOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    activityId?: SortOrder
    _count?: ActivityCommentCountOrderByAggregateInput
    _max?: ActivityCommentMaxOrderByAggregateInput
    _min?: ActivityCommentMinOrderByAggregateInput
  }

  export type ActivityCommentScalarWhereWithAggregatesInput = {
    AND?: ActivityCommentScalarWhereWithAggregatesInput | ActivityCommentScalarWhereWithAggregatesInput[]
    OR?: ActivityCommentScalarWhereWithAggregatesInput[]
    NOT?: ActivityCommentScalarWhereWithAggregatesInput | ActivityCommentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ActivityComment"> | string
    content?: StringWithAggregatesFilter<"ActivityComment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ActivityComment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ActivityComment"> | Date | string
    authorId?: StringWithAggregatesFilter<"ActivityComment"> | string
    activityId?: StringWithAggregatesFilter<"ActivityComment"> | string
  }

  export type UserBindingWhereInput = {
    AND?: UserBindingWhereInput | UserBindingWhereInput[]
    OR?: UserBindingWhereInput[]
    NOT?: UserBindingWhereInput | UserBindingWhereInput[]
    id?: StringFilter<"UserBinding"> | string
    type?: StringFilter<"UserBinding"> | string
    bindValue?: StringFilter<"UserBinding"> | string
    metadata?: StringNullableFilter<"UserBinding"> | string | null
    createdAt?: DateTimeFilter<"UserBinding"> | Date | string
    updatedAt?: DateTimeFilter<"UserBinding"> | Date | string
    userId?: StringFilter<"UserBinding"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserBindingOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    bindValue?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserBindingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    type_bindValue?: UserBindingTypeBindValueCompoundUniqueInput
    AND?: UserBindingWhereInput | UserBindingWhereInput[]
    OR?: UserBindingWhereInput[]
    NOT?: UserBindingWhereInput | UserBindingWhereInput[]
    type?: StringFilter<"UserBinding"> | string
    bindValue?: StringFilter<"UserBinding"> | string
    metadata?: StringNullableFilter<"UserBinding"> | string | null
    createdAt?: DateTimeFilter<"UserBinding"> | Date | string
    updatedAt?: DateTimeFilter<"UserBinding"> | Date | string
    userId?: StringFilter<"UserBinding"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "type_bindValue">

  export type UserBindingOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    bindValue?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    _count?: UserBindingCountOrderByAggregateInput
    _max?: UserBindingMaxOrderByAggregateInput
    _min?: UserBindingMinOrderByAggregateInput
  }

  export type UserBindingScalarWhereWithAggregatesInput = {
    AND?: UserBindingScalarWhereWithAggregatesInput | UserBindingScalarWhereWithAggregatesInput[]
    OR?: UserBindingScalarWhereWithAggregatesInput[]
    NOT?: UserBindingScalarWhereWithAggregatesInput | UserBindingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserBinding"> | string
    type?: StringWithAggregatesFilter<"UserBinding"> | string
    bindValue?: StringWithAggregatesFilter<"UserBinding"> | string
    metadata?: StringNullableWithAggregatesFilter<"UserBinding"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UserBinding"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserBinding"> | Date | string
    userId?: StringWithAggregatesFilter<"UserBinding"> | string
  }

  export type VerificationCodeWhereInput = {
    AND?: VerificationCodeWhereInput | VerificationCodeWhereInput[]
    OR?: VerificationCodeWhereInput[]
    NOT?: VerificationCodeWhereInput | VerificationCodeWhereInput[]
    id?: StringFilter<"VerificationCode"> | string
    email?: StringFilter<"VerificationCode"> | string
    code?: StringFilter<"VerificationCode"> | string
    type?: StringFilter<"VerificationCode"> | string
    used?: BoolFilter<"VerificationCode"> | boolean
    usedAt?: DateTimeNullableFilter<"VerificationCode"> | Date | string | null
    expiresAt?: DateTimeFilter<"VerificationCode"> | Date | string
    createdAt?: DateTimeFilter<"VerificationCode"> | Date | string
  }

  export type VerificationCodeOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    code?: SortOrder
    type?: SortOrder
    used?: SortOrder
    usedAt?: SortOrderInput | SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type VerificationCodeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VerificationCodeWhereInput | VerificationCodeWhereInput[]
    OR?: VerificationCodeWhereInput[]
    NOT?: VerificationCodeWhereInput | VerificationCodeWhereInput[]
    email?: StringFilter<"VerificationCode"> | string
    code?: StringFilter<"VerificationCode"> | string
    type?: StringFilter<"VerificationCode"> | string
    used?: BoolFilter<"VerificationCode"> | boolean
    usedAt?: DateTimeNullableFilter<"VerificationCode"> | Date | string | null
    expiresAt?: DateTimeFilter<"VerificationCode"> | Date | string
    createdAt?: DateTimeFilter<"VerificationCode"> | Date | string
  }, "id">

  export type VerificationCodeOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    code?: SortOrder
    type?: SortOrder
    used?: SortOrder
    usedAt?: SortOrderInput | SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    _count?: VerificationCodeCountOrderByAggregateInput
    _max?: VerificationCodeMaxOrderByAggregateInput
    _min?: VerificationCodeMinOrderByAggregateInput
  }

  export type VerificationCodeScalarWhereWithAggregatesInput = {
    AND?: VerificationCodeScalarWhereWithAggregatesInput | VerificationCodeScalarWhereWithAggregatesInput[]
    OR?: VerificationCodeScalarWhereWithAggregatesInput[]
    NOT?: VerificationCodeScalarWhereWithAggregatesInput | VerificationCodeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"VerificationCode"> | string
    email?: StringWithAggregatesFilter<"VerificationCode"> | string
    code?: StringWithAggregatesFilter<"VerificationCode"> | string
    type?: StringWithAggregatesFilter<"VerificationCode"> | string
    used?: BoolWithAggregatesFilter<"VerificationCode"> | boolean
    usedAt?: DateTimeNullableWithAggregatesFilter<"VerificationCode"> | Date | string | null
    expiresAt?: DateTimeWithAggregatesFilter<"VerificationCode"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"VerificationCode"> | Date | string
  }

  export type LoginLogWhereInput = {
    AND?: LoginLogWhereInput | LoginLogWhereInput[]
    OR?: LoginLogWhereInput[]
    NOT?: LoginLogWhereInput | LoginLogWhereInput[]
    id?: StringFilter<"LoginLog"> | string
    ipAddress?: StringNullableFilter<"LoginLog"> | string | null
    userAgent?: StringNullableFilter<"LoginLog"> | string | null
    loginMethod?: StringFilter<"LoginLog"> | string
    status?: StringFilter<"LoginLog"> | string
    failReason?: StringNullableFilter<"LoginLog"> | string | null
    loginTime?: DateTimeFilter<"LoginLog"> | Date | string
    userId?: StringNullableFilter<"LoginLog"> | string | null
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type LoginLogOrderByWithRelationInput = {
    id?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    loginMethod?: SortOrder
    status?: SortOrder
    failReason?: SortOrderInput | SortOrder
    loginTime?: SortOrder
    userId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type LoginLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LoginLogWhereInput | LoginLogWhereInput[]
    OR?: LoginLogWhereInput[]
    NOT?: LoginLogWhereInput | LoginLogWhereInput[]
    ipAddress?: StringNullableFilter<"LoginLog"> | string | null
    userAgent?: StringNullableFilter<"LoginLog"> | string | null
    loginMethod?: StringFilter<"LoginLog"> | string
    status?: StringFilter<"LoginLog"> | string
    failReason?: StringNullableFilter<"LoginLog"> | string | null
    loginTime?: DateTimeFilter<"LoginLog"> | Date | string
    userId?: StringNullableFilter<"LoginLog"> | string | null
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type LoginLogOrderByWithAggregationInput = {
    id?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    loginMethod?: SortOrder
    status?: SortOrder
    failReason?: SortOrderInput | SortOrder
    loginTime?: SortOrder
    userId?: SortOrderInput | SortOrder
    _count?: LoginLogCountOrderByAggregateInput
    _max?: LoginLogMaxOrderByAggregateInput
    _min?: LoginLogMinOrderByAggregateInput
  }

  export type LoginLogScalarWhereWithAggregatesInput = {
    AND?: LoginLogScalarWhereWithAggregatesInput | LoginLogScalarWhereWithAggregatesInput[]
    OR?: LoginLogScalarWhereWithAggregatesInput[]
    NOT?: LoginLogScalarWhereWithAggregatesInput | LoginLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LoginLog"> | string
    ipAddress?: StringNullableWithAggregatesFilter<"LoginLog"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"LoginLog"> | string | null
    loginMethod?: StringWithAggregatesFilter<"LoginLog"> | string
    status?: StringWithAggregatesFilter<"LoginLog"> | string
    failReason?: StringNullableWithAggregatesFilter<"LoginLog"> | string | null
    loginTime?: DateTimeWithAggregatesFilter<"LoginLog"> | Date | string
    userId?: StringNullableWithAggregatesFilter<"LoginLog"> | string | null
  }

  export type FeedbackWhereInput = {
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    id?: StringFilter<"Feedback"> | string
    type?: StringFilter<"Feedback"> | string
    title?: StringFilter<"Feedback"> | string
    content?: StringFilter<"Feedback"> | string
    contact?: StringNullableFilter<"Feedback"> | string | null
    images?: StringNullableFilter<"Feedback"> | string | null
    platform?: StringFilter<"Feedback"> | string
    version?: StringNullableFilter<"Feedback"> | string | null
    deviceInfo?: StringNullableFilter<"Feedback"> | string | null
    ipAddress?: StringNullableFilter<"Feedback"> | string | null
    userAgent?: StringNullableFilter<"Feedback"> | string | null
    status?: StringFilter<"Feedback"> | string
    processedAt?: DateTimeNullableFilter<"Feedback"> | Date | string | null
    createdAt?: DateTimeFilter<"Feedback"> | Date | string
    updatedAt?: DateTimeFilter<"Feedback"> | Date | string
    userId?: StringFilter<"Feedback"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    reply?: FeedbackReplyListRelationFilter
  }

  export type FeedbackOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    contact?: SortOrderInput | SortOrder
    images?: SortOrderInput | SortOrder
    platform?: SortOrder
    version?: SortOrderInput | SortOrder
    deviceInfo?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    status?: SortOrder
    processedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    reply?: FeedbackReplyOrderByRelationAggregateInput
  }

  export type FeedbackWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    type?: StringFilter<"Feedback"> | string
    title?: StringFilter<"Feedback"> | string
    content?: StringFilter<"Feedback"> | string
    contact?: StringNullableFilter<"Feedback"> | string | null
    images?: StringNullableFilter<"Feedback"> | string | null
    platform?: StringFilter<"Feedback"> | string
    version?: StringNullableFilter<"Feedback"> | string | null
    deviceInfo?: StringNullableFilter<"Feedback"> | string | null
    ipAddress?: StringNullableFilter<"Feedback"> | string | null
    userAgent?: StringNullableFilter<"Feedback"> | string | null
    status?: StringFilter<"Feedback"> | string
    processedAt?: DateTimeNullableFilter<"Feedback"> | Date | string | null
    createdAt?: DateTimeFilter<"Feedback"> | Date | string
    updatedAt?: DateTimeFilter<"Feedback"> | Date | string
    userId?: StringFilter<"Feedback"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    reply?: FeedbackReplyListRelationFilter
  }, "id">

  export type FeedbackOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    contact?: SortOrderInput | SortOrder
    images?: SortOrderInput | SortOrder
    platform?: SortOrder
    version?: SortOrderInput | SortOrder
    deviceInfo?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    status?: SortOrder
    processedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    _count?: FeedbackCountOrderByAggregateInput
    _max?: FeedbackMaxOrderByAggregateInput
    _min?: FeedbackMinOrderByAggregateInput
  }

  export type FeedbackScalarWhereWithAggregatesInput = {
    AND?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    OR?: FeedbackScalarWhereWithAggregatesInput[]
    NOT?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Feedback"> | string
    type?: StringWithAggregatesFilter<"Feedback"> | string
    title?: StringWithAggregatesFilter<"Feedback"> | string
    content?: StringWithAggregatesFilter<"Feedback"> | string
    contact?: StringNullableWithAggregatesFilter<"Feedback"> | string | null
    images?: StringNullableWithAggregatesFilter<"Feedback"> | string | null
    platform?: StringWithAggregatesFilter<"Feedback"> | string
    version?: StringNullableWithAggregatesFilter<"Feedback"> | string | null
    deviceInfo?: StringNullableWithAggregatesFilter<"Feedback"> | string | null
    ipAddress?: StringNullableWithAggregatesFilter<"Feedback"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"Feedback"> | string | null
    status?: StringWithAggregatesFilter<"Feedback"> | string
    processedAt?: DateTimeNullableWithAggregatesFilter<"Feedback"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Feedback"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Feedback"> | Date | string
    userId?: StringWithAggregatesFilter<"Feedback"> | string
  }

  export type FeedbackReplyWhereInput = {
    AND?: FeedbackReplyWhereInput | FeedbackReplyWhereInput[]
    OR?: FeedbackReplyWhereInput[]
    NOT?: FeedbackReplyWhereInput | FeedbackReplyWhereInput[]
    id?: StringFilter<"FeedbackReply"> | string
    content?: StringFilter<"FeedbackReply"> | string
    createdAt?: DateTimeFilter<"FeedbackReply"> | Date | string
    feedbackId?: StringFilter<"FeedbackReply"> | string
    adminId?: StringFilter<"FeedbackReply"> | string
    feedback?: XOR<FeedbackRelationFilter, FeedbackWhereInput>
    admin?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type FeedbackReplyOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    feedbackId?: SortOrder
    adminId?: SortOrder
    feedback?: FeedbackOrderByWithRelationInput
    admin?: UserOrderByWithRelationInput
  }

  export type FeedbackReplyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FeedbackReplyWhereInput | FeedbackReplyWhereInput[]
    OR?: FeedbackReplyWhereInput[]
    NOT?: FeedbackReplyWhereInput | FeedbackReplyWhereInput[]
    content?: StringFilter<"FeedbackReply"> | string
    createdAt?: DateTimeFilter<"FeedbackReply"> | Date | string
    feedbackId?: StringFilter<"FeedbackReply"> | string
    adminId?: StringFilter<"FeedbackReply"> | string
    feedback?: XOR<FeedbackRelationFilter, FeedbackWhereInput>
    admin?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type FeedbackReplyOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    feedbackId?: SortOrder
    adminId?: SortOrder
    _count?: FeedbackReplyCountOrderByAggregateInput
    _max?: FeedbackReplyMaxOrderByAggregateInput
    _min?: FeedbackReplyMinOrderByAggregateInput
  }

  export type FeedbackReplyScalarWhereWithAggregatesInput = {
    AND?: FeedbackReplyScalarWhereWithAggregatesInput | FeedbackReplyScalarWhereWithAggregatesInput[]
    OR?: FeedbackReplyScalarWhereWithAggregatesInput[]
    NOT?: FeedbackReplyScalarWhereWithAggregatesInput | FeedbackReplyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FeedbackReply"> | string
    content?: StringWithAggregatesFilter<"FeedbackReply"> | string
    createdAt?: DateTimeWithAggregatesFilter<"FeedbackReply"> | Date | string
    feedbackId?: StringWithAggregatesFilter<"FeedbackReply"> | string
    adminId?: StringWithAggregatesFilter<"FeedbackReply"> | string
  }

  export type CreditLogWhereInput = {
    AND?: CreditLogWhereInput | CreditLogWhereInput[]
    OR?: CreditLogWhereInput[]
    NOT?: CreditLogWhereInput | CreditLogWhereInput[]
    id?: StringFilter<"CreditLog"> | string
    action?: StringFilter<"CreditLog"> | string
    amount?: IntFilter<"CreditLog"> | number
    reason?: StringNullableFilter<"CreditLog"> | string | null
    relatedType?: StringNullableFilter<"CreditLog"> | string | null
    relatedId?: StringNullableFilter<"CreditLog"> | string | null
    metadata?: StringNullableFilter<"CreditLog"> | string | null
    createdAt?: DateTimeFilter<"CreditLog"> | Date | string
    userId?: StringFilter<"CreditLog"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type CreditLogOrderByWithRelationInput = {
    id?: SortOrder
    action?: SortOrder
    amount?: SortOrder
    reason?: SortOrderInput | SortOrder
    relatedType?: SortOrderInput | SortOrder
    relatedId?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type CreditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CreditLogWhereInput | CreditLogWhereInput[]
    OR?: CreditLogWhereInput[]
    NOT?: CreditLogWhereInput | CreditLogWhereInput[]
    action?: StringFilter<"CreditLog"> | string
    amount?: IntFilter<"CreditLog"> | number
    reason?: StringNullableFilter<"CreditLog"> | string | null
    relatedType?: StringNullableFilter<"CreditLog"> | string | null
    relatedId?: StringNullableFilter<"CreditLog"> | string | null
    metadata?: StringNullableFilter<"CreditLog"> | string | null
    createdAt?: DateTimeFilter<"CreditLog"> | Date | string
    userId?: StringFilter<"CreditLog"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type CreditLogOrderByWithAggregationInput = {
    id?: SortOrder
    action?: SortOrder
    amount?: SortOrder
    reason?: SortOrderInput | SortOrder
    relatedType?: SortOrderInput | SortOrder
    relatedId?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    _count?: CreditLogCountOrderByAggregateInput
    _avg?: CreditLogAvgOrderByAggregateInput
    _max?: CreditLogMaxOrderByAggregateInput
    _min?: CreditLogMinOrderByAggregateInput
    _sum?: CreditLogSumOrderByAggregateInput
  }

  export type CreditLogScalarWhereWithAggregatesInput = {
    AND?: CreditLogScalarWhereWithAggregatesInput | CreditLogScalarWhereWithAggregatesInput[]
    OR?: CreditLogScalarWhereWithAggregatesInput[]
    NOT?: CreditLogScalarWhereWithAggregatesInput | CreditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CreditLog"> | string
    action?: StringWithAggregatesFilter<"CreditLog"> | string
    amount?: IntWithAggregatesFilter<"CreditLog"> | number
    reason?: StringNullableWithAggregatesFilter<"CreditLog"> | string | null
    relatedType?: StringNullableWithAggregatesFilter<"CreditLog"> | string | null
    relatedId?: StringNullableWithAggregatesFilter<"CreditLog"> | string | null
    metadata?: StringNullableWithAggregatesFilter<"CreditLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"CreditLog"> | Date | string
    userId?: StringWithAggregatesFilter<"CreditLog"> | string
  }

  export type UserLevelWhereInput = {
    AND?: UserLevelWhereInput | UserLevelWhereInput[]
    OR?: UserLevelWhereInput[]
    NOT?: UserLevelWhereInput | UserLevelWhereInput[]
    id?: StringFilter<"UserLevel"> | string
    level?: IntFilter<"UserLevel"> | number
    name?: StringFilter<"UserLevel"> | string
    minExp?: IntFilter<"UserLevel"> | number
    maxExp?: IntFilter<"UserLevel"> | number
    icon?: StringNullableFilter<"UserLevel"> | string | null
    color?: StringNullableFilter<"UserLevel"> | string | null
    privileges?: StringNullableFilter<"UserLevel"> | string | null
    createdAt?: DateTimeFilter<"UserLevel"> | Date | string
    updatedAt?: DateTimeFilter<"UserLevel"> | Date | string
  }

  export type UserLevelOrderByWithRelationInput = {
    id?: SortOrder
    level?: SortOrder
    name?: SortOrder
    minExp?: SortOrder
    maxExp?: SortOrder
    icon?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    privileges?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserLevelWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    level?: number
    AND?: UserLevelWhereInput | UserLevelWhereInput[]
    OR?: UserLevelWhereInput[]
    NOT?: UserLevelWhereInput | UserLevelWhereInput[]
    name?: StringFilter<"UserLevel"> | string
    minExp?: IntFilter<"UserLevel"> | number
    maxExp?: IntFilter<"UserLevel"> | number
    icon?: StringNullableFilter<"UserLevel"> | string | null
    color?: StringNullableFilter<"UserLevel"> | string | null
    privileges?: StringNullableFilter<"UserLevel"> | string | null
    createdAt?: DateTimeFilter<"UserLevel"> | Date | string
    updatedAt?: DateTimeFilter<"UserLevel"> | Date | string
  }, "id" | "level">

  export type UserLevelOrderByWithAggregationInput = {
    id?: SortOrder
    level?: SortOrder
    name?: SortOrder
    minExp?: SortOrder
    maxExp?: SortOrder
    icon?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    privileges?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserLevelCountOrderByAggregateInput
    _avg?: UserLevelAvgOrderByAggregateInput
    _max?: UserLevelMaxOrderByAggregateInput
    _min?: UserLevelMinOrderByAggregateInput
    _sum?: UserLevelSumOrderByAggregateInput
  }

  export type UserLevelScalarWhereWithAggregatesInput = {
    AND?: UserLevelScalarWhereWithAggregatesInput | UserLevelScalarWhereWithAggregatesInput[]
    OR?: UserLevelScalarWhereWithAggregatesInput[]
    NOT?: UserLevelScalarWhereWithAggregatesInput | UserLevelScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserLevel"> | string
    level?: IntWithAggregatesFilter<"UserLevel"> | number
    name?: StringWithAggregatesFilter<"UserLevel"> | string
    minExp?: IntWithAggregatesFilter<"UserLevel"> | number
    maxExp?: IntWithAggregatesFilter<"UserLevel"> | number
    icon?: StringNullableWithAggregatesFilter<"UserLevel"> | string | null
    color?: StringNullableWithAggregatesFilter<"UserLevel"> | string | null
    privileges?: StringNullableWithAggregatesFilter<"UserLevel"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UserLevel"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserLevel"> | Date | string
  }

  export type UserBadgeWhereInput = {
    AND?: UserBadgeWhereInput | UserBadgeWhereInput[]
    OR?: UserBadgeWhereInput[]
    NOT?: UserBadgeWhereInput | UserBadgeWhereInput[]
    id?: StringFilter<"UserBadge"> | string
    code?: StringFilter<"UserBadge"> | string
    name?: StringFilter<"UserBadge"> | string
    description?: StringNullableFilter<"UserBadge"> | string | null
    icon?: StringNullableFilter<"UserBadge"> | string | null
    category?: StringFilter<"UserBadge"> | string
    rarity?: StringFilter<"UserBadge"> | string
    condition?: StringNullableFilter<"UserBadge"> | string | null
    isActive?: BoolFilter<"UserBadge"> | boolean
    createdAt?: DateTimeFilter<"UserBadge"> | Date | string
    updatedAt?: DateTimeFilter<"UserBadge"> | Date | string
    userRecords?: UserBadgeRecordListRelationFilter
  }

  export type UserBadgeOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    icon?: SortOrderInput | SortOrder
    category?: SortOrder
    rarity?: SortOrder
    condition?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userRecords?: UserBadgeRecordOrderByRelationAggregateInput
  }

  export type UserBadgeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: UserBadgeWhereInput | UserBadgeWhereInput[]
    OR?: UserBadgeWhereInput[]
    NOT?: UserBadgeWhereInput | UserBadgeWhereInput[]
    name?: StringFilter<"UserBadge"> | string
    description?: StringNullableFilter<"UserBadge"> | string | null
    icon?: StringNullableFilter<"UserBadge"> | string | null
    category?: StringFilter<"UserBadge"> | string
    rarity?: StringFilter<"UserBadge"> | string
    condition?: StringNullableFilter<"UserBadge"> | string | null
    isActive?: BoolFilter<"UserBadge"> | boolean
    createdAt?: DateTimeFilter<"UserBadge"> | Date | string
    updatedAt?: DateTimeFilter<"UserBadge"> | Date | string
    userRecords?: UserBadgeRecordListRelationFilter
  }, "id" | "code">

  export type UserBadgeOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    icon?: SortOrderInput | SortOrder
    category?: SortOrder
    rarity?: SortOrder
    condition?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserBadgeCountOrderByAggregateInput
    _max?: UserBadgeMaxOrderByAggregateInput
    _min?: UserBadgeMinOrderByAggregateInput
  }

  export type UserBadgeScalarWhereWithAggregatesInput = {
    AND?: UserBadgeScalarWhereWithAggregatesInput | UserBadgeScalarWhereWithAggregatesInput[]
    OR?: UserBadgeScalarWhereWithAggregatesInput[]
    NOT?: UserBadgeScalarWhereWithAggregatesInput | UserBadgeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserBadge"> | string
    code?: StringWithAggregatesFilter<"UserBadge"> | string
    name?: StringWithAggregatesFilter<"UserBadge"> | string
    description?: StringNullableWithAggregatesFilter<"UserBadge"> | string | null
    icon?: StringNullableWithAggregatesFilter<"UserBadge"> | string | null
    category?: StringWithAggregatesFilter<"UserBadge"> | string
    rarity?: StringWithAggregatesFilter<"UserBadge"> | string
    condition?: StringNullableWithAggregatesFilter<"UserBadge"> | string | null
    isActive?: BoolWithAggregatesFilter<"UserBadge"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"UserBadge"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserBadge"> | Date | string
  }

  export type UserBadgeRecordWhereInput = {
    AND?: UserBadgeRecordWhereInput | UserBadgeRecordWhereInput[]
    OR?: UserBadgeRecordWhereInput[]
    NOT?: UserBadgeRecordWhereInput | UserBadgeRecordWhereInput[]
    id?: StringFilter<"UserBadgeRecord"> | string
    progress?: IntFilter<"UserBadgeRecord"> | number
    awardedAt?: DateTimeFilter<"UserBadgeRecord"> | Date | string
    metadata?: StringNullableFilter<"UserBadgeRecord"> | string | null
    userId?: StringFilter<"UserBadgeRecord"> | string
    badgeId?: StringFilter<"UserBadgeRecord"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    badge?: XOR<UserBadgeRelationFilter, UserBadgeWhereInput>
  }

  export type UserBadgeRecordOrderByWithRelationInput = {
    id?: SortOrder
    progress?: SortOrder
    awardedAt?: SortOrder
    metadata?: SortOrderInput | SortOrder
    userId?: SortOrder
    badgeId?: SortOrder
    user?: UserOrderByWithRelationInput
    badge?: UserBadgeOrderByWithRelationInput
  }

  export type UserBadgeRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_badgeId?: UserBadgeRecordUserIdBadgeIdCompoundUniqueInput
    AND?: UserBadgeRecordWhereInput | UserBadgeRecordWhereInput[]
    OR?: UserBadgeRecordWhereInput[]
    NOT?: UserBadgeRecordWhereInput | UserBadgeRecordWhereInput[]
    progress?: IntFilter<"UserBadgeRecord"> | number
    awardedAt?: DateTimeFilter<"UserBadgeRecord"> | Date | string
    metadata?: StringNullableFilter<"UserBadgeRecord"> | string | null
    userId?: StringFilter<"UserBadgeRecord"> | string
    badgeId?: StringFilter<"UserBadgeRecord"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    badge?: XOR<UserBadgeRelationFilter, UserBadgeWhereInput>
  }, "id" | "userId_badgeId">

  export type UserBadgeRecordOrderByWithAggregationInput = {
    id?: SortOrder
    progress?: SortOrder
    awardedAt?: SortOrder
    metadata?: SortOrderInput | SortOrder
    userId?: SortOrder
    badgeId?: SortOrder
    _count?: UserBadgeRecordCountOrderByAggregateInput
    _avg?: UserBadgeRecordAvgOrderByAggregateInput
    _max?: UserBadgeRecordMaxOrderByAggregateInput
    _min?: UserBadgeRecordMinOrderByAggregateInput
    _sum?: UserBadgeRecordSumOrderByAggregateInput
  }

  export type UserBadgeRecordScalarWhereWithAggregatesInput = {
    AND?: UserBadgeRecordScalarWhereWithAggregatesInput | UserBadgeRecordScalarWhereWithAggregatesInput[]
    OR?: UserBadgeRecordScalarWhereWithAggregatesInput[]
    NOT?: UserBadgeRecordScalarWhereWithAggregatesInput | UserBadgeRecordScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserBadgeRecord"> | string
    progress?: IntWithAggregatesFilter<"UserBadgeRecord"> | number
    awardedAt?: DateTimeWithAggregatesFilter<"UserBadgeRecord"> | Date | string
    metadata?: StringNullableWithAggregatesFilter<"UserBadgeRecord"> | string | null
    userId?: StringWithAggregatesFilter<"UserBadgeRecord"> | string
    badgeId?: StringWithAggregatesFilter<"UserBadgeRecord"> | string
  }

  export type DailyCheckInWhereInput = {
    AND?: DailyCheckInWhereInput | DailyCheckInWhereInput[]
    OR?: DailyCheckInWhereInput[]
    NOT?: DailyCheckInWhereInput | DailyCheckInWhereInput[]
    id?: StringFilter<"DailyCheckIn"> | string
    checkInDate?: DateTimeFilter<"DailyCheckIn"> | Date | string
    credits?: IntFilter<"DailyCheckIn"> | number
    consecutiveDays?: IntFilter<"DailyCheckIn"> | number
    createdAt?: DateTimeFilter<"DailyCheckIn"> | Date | string
    userId?: StringFilter<"DailyCheckIn"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type DailyCheckInOrderByWithRelationInput = {
    id?: SortOrder
    checkInDate?: SortOrder
    credits?: SortOrder
    consecutiveDays?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type DailyCheckInWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_checkInDate?: DailyCheckInUserIdCheckInDateCompoundUniqueInput
    AND?: DailyCheckInWhereInput | DailyCheckInWhereInput[]
    OR?: DailyCheckInWhereInput[]
    NOT?: DailyCheckInWhereInput | DailyCheckInWhereInput[]
    checkInDate?: DateTimeFilter<"DailyCheckIn"> | Date | string
    credits?: IntFilter<"DailyCheckIn"> | number
    consecutiveDays?: IntFilter<"DailyCheckIn"> | number
    createdAt?: DateTimeFilter<"DailyCheckIn"> | Date | string
    userId?: StringFilter<"DailyCheckIn"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId_checkInDate">

  export type DailyCheckInOrderByWithAggregationInput = {
    id?: SortOrder
    checkInDate?: SortOrder
    credits?: SortOrder
    consecutiveDays?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    _count?: DailyCheckInCountOrderByAggregateInput
    _avg?: DailyCheckInAvgOrderByAggregateInput
    _max?: DailyCheckInMaxOrderByAggregateInput
    _min?: DailyCheckInMinOrderByAggregateInput
    _sum?: DailyCheckInSumOrderByAggregateInput
  }

  export type DailyCheckInScalarWhereWithAggregatesInput = {
    AND?: DailyCheckInScalarWhereWithAggregatesInput | DailyCheckInScalarWhereWithAggregatesInput[]
    OR?: DailyCheckInScalarWhereWithAggregatesInput[]
    NOT?: DailyCheckInScalarWhereWithAggregatesInput | DailyCheckInScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DailyCheckIn"> | string
    checkInDate?: DateTimeWithAggregatesFilter<"DailyCheckIn"> | Date | string
    credits?: IntWithAggregatesFilter<"DailyCheckIn"> | number
    consecutiveDays?: IntWithAggregatesFilter<"DailyCheckIn"> | number
    createdAt?: DateTimeWithAggregatesFilter<"DailyCheckIn"> | Date | string
    userId?: StringWithAggregatesFilter<"DailyCheckIn"> | string
  }

  export type RoleWhereInput = {
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    id?: StringFilter<"Role"> | string
    name?: StringFilter<"Role"> | string
    displayName?: StringFilter<"Role"> | string
    description?: StringNullableFilter<"Role"> | string | null
    level?: IntFilter<"Role"> | number
    type?: StringFilter<"Role"> | string
    isActive?: BoolFilter<"Role"> | boolean
    createdAt?: DateTimeFilter<"Role"> | Date | string
    updatedAt?: DateTimeFilter<"Role"> | Date | string
    userRoles?: UserRoleListRelationFilter
    permissions?: RolePermissionListRelationFilter
  }

  export type RoleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    displayName?: SortOrder
    description?: SortOrderInput | SortOrder
    level?: SortOrder
    type?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userRoles?: UserRoleOrderByRelationAggregateInput
    permissions?: RolePermissionOrderByRelationAggregateInput
  }

  export type RoleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    displayName?: StringFilter<"Role"> | string
    description?: StringNullableFilter<"Role"> | string | null
    level?: IntFilter<"Role"> | number
    type?: StringFilter<"Role"> | string
    isActive?: BoolFilter<"Role"> | boolean
    createdAt?: DateTimeFilter<"Role"> | Date | string
    updatedAt?: DateTimeFilter<"Role"> | Date | string
    userRoles?: UserRoleListRelationFilter
    permissions?: RolePermissionListRelationFilter
  }, "id" | "name">

  export type RoleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    displayName?: SortOrder
    description?: SortOrderInput | SortOrder
    level?: SortOrder
    type?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RoleCountOrderByAggregateInput
    _avg?: RoleAvgOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
    _sum?: RoleSumOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    OR?: RoleScalarWhereWithAggregatesInput[]
    NOT?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Role"> | string
    name?: StringWithAggregatesFilter<"Role"> | string
    displayName?: StringWithAggregatesFilter<"Role"> | string
    description?: StringNullableWithAggregatesFilter<"Role"> | string | null
    level?: IntWithAggregatesFilter<"Role"> | number
    type?: StringWithAggregatesFilter<"Role"> | string
    isActive?: BoolWithAggregatesFilter<"Role"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Role"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Role"> | Date | string
  }

  export type PermissionWhereInput = {
    AND?: PermissionWhereInput | PermissionWhereInput[]
    OR?: PermissionWhereInput[]
    NOT?: PermissionWhereInput | PermissionWhereInput[]
    id?: StringFilter<"Permission"> | string
    name?: StringFilter<"Permission"> | string
    displayName?: StringFilter<"Permission"> | string
    description?: StringNullableFilter<"Permission"> | string | null
    module?: StringFilter<"Permission"> | string
    action?: StringFilter<"Permission"> | string
    resource?: StringNullableFilter<"Permission"> | string | null
    isActive?: BoolFilter<"Permission"> | boolean
    createdAt?: DateTimeFilter<"Permission"> | Date | string
    updatedAt?: DateTimeFilter<"Permission"> | Date | string
    roles?: RolePermissionListRelationFilter
  }

  export type PermissionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    displayName?: SortOrder
    description?: SortOrderInput | SortOrder
    module?: SortOrder
    action?: SortOrder
    resource?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    roles?: RolePermissionOrderByRelationAggregateInput
  }

  export type PermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: PermissionWhereInput | PermissionWhereInput[]
    OR?: PermissionWhereInput[]
    NOT?: PermissionWhereInput | PermissionWhereInput[]
    displayName?: StringFilter<"Permission"> | string
    description?: StringNullableFilter<"Permission"> | string | null
    module?: StringFilter<"Permission"> | string
    action?: StringFilter<"Permission"> | string
    resource?: StringNullableFilter<"Permission"> | string | null
    isActive?: BoolFilter<"Permission"> | boolean
    createdAt?: DateTimeFilter<"Permission"> | Date | string
    updatedAt?: DateTimeFilter<"Permission"> | Date | string
    roles?: RolePermissionListRelationFilter
  }, "id" | "name">

  export type PermissionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    displayName?: SortOrder
    description?: SortOrderInput | SortOrder
    module?: SortOrder
    action?: SortOrder
    resource?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PermissionCountOrderByAggregateInput
    _max?: PermissionMaxOrderByAggregateInput
    _min?: PermissionMinOrderByAggregateInput
  }

  export type PermissionScalarWhereWithAggregatesInput = {
    AND?: PermissionScalarWhereWithAggregatesInput | PermissionScalarWhereWithAggregatesInput[]
    OR?: PermissionScalarWhereWithAggregatesInput[]
    NOT?: PermissionScalarWhereWithAggregatesInput | PermissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Permission"> | string
    name?: StringWithAggregatesFilter<"Permission"> | string
    displayName?: StringWithAggregatesFilter<"Permission"> | string
    description?: StringNullableWithAggregatesFilter<"Permission"> | string | null
    module?: StringWithAggregatesFilter<"Permission"> | string
    action?: StringWithAggregatesFilter<"Permission"> | string
    resource?: StringNullableWithAggregatesFilter<"Permission"> | string | null
    isActive?: BoolWithAggregatesFilter<"Permission"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Permission"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Permission"> | Date | string
  }

  export type RolePermissionWhereInput = {
    AND?: RolePermissionWhereInput | RolePermissionWhereInput[]
    OR?: RolePermissionWhereInput[]
    NOT?: RolePermissionWhereInput | RolePermissionWhereInput[]
    id?: StringFilter<"RolePermission"> | string
    roleId?: StringFilter<"RolePermission"> | string
    permissionId?: StringFilter<"RolePermission"> | string
    createdAt?: DateTimeFilter<"RolePermission"> | Date | string
    role?: XOR<RoleRelationFilter, RoleWhereInput>
    permission?: XOR<PermissionRelationFilter, PermissionWhereInput>
  }

  export type RolePermissionOrderByWithRelationInput = {
    id?: SortOrder
    roleId?: SortOrder
    permissionId?: SortOrder
    createdAt?: SortOrder
    role?: RoleOrderByWithRelationInput
    permission?: PermissionOrderByWithRelationInput
  }

  export type RolePermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    roleId_permissionId?: RolePermissionRoleIdPermissionIdCompoundUniqueInput
    AND?: RolePermissionWhereInput | RolePermissionWhereInput[]
    OR?: RolePermissionWhereInput[]
    NOT?: RolePermissionWhereInput | RolePermissionWhereInput[]
    roleId?: StringFilter<"RolePermission"> | string
    permissionId?: StringFilter<"RolePermission"> | string
    createdAt?: DateTimeFilter<"RolePermission"> | Date | string
    role?: XOR<RoleRelationFilter, RoleWhereInput>
    permission?: XOR<PermissionRelationFilter, PermissionWhereInput>
  }, "id" | "roleId_permissionId">

  export type RolePermissionOrderByWithAggregationInput = {
    id?: SortOrder
    roleId?: SortOrder
    permissionId?: SortOrder
    createdAt?: SortOrder
    _count?: RolePermissionCountOrderByAggregateInput
    _max?: RolePermissionMaxOrderByAggregateInput
    _min?: RolePermissionMinOrderByAggregateInput
  }

  export type RolePermissionScalarWhereWithAggregatesInput = {
    AND?: RolePermissionScalarWhereWithAggregatesInput | RolePermissionScalarWhereWithAggregatesInput[]
    OR?: RolePermissionScalarWhereWithAggregatesInput[]
    NOT?: RolePermissionScalarWhereWithAggregatesInput | RolePermissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RolePermission"> | string
    roleId?: StringWithAggregatesFilter<"RolePermission"> | string
    permissionId?: StringWithAggregatesFilter<"RolePermission"> | string
    createdAt?: DateTimeWithAggregatesFilter<"RolePermission"> | Date | string
  }

  export type UserRoleWhereInput = {
    AND?: UserRoleWhereInput | UserRoleWhereInput[]
    OR?: UserRoleWhereInput[]
    NOT?: UserRoleWhereInput | UserRoleWhereInput[]
    id?: StringFilter<"UserRole"> | string
    userId?: StringFilter<"UserRole"> | string
    roleId?: StringFilter<"UserRole"> | string
    assignedBy?: StringNullableFilter<"UserRole"> | string | null
    expiresAt?: DateTimeNullableFilter<"UserRole"> | Date | string | null
    createdAt?: DateTimeFilter<"UserRole"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    role?: XOR<RoleRelationFilter, RoleWhereInput>
  }

  export type UserRoleOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    roleId?: SortOrder
    assignedBy?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    role?: RoleOrderByWithRelationInput
  }

  export type UserRoleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_roleId?: UserRoleUserIdRoleIdCompoundUniqueInput
    AND?: UserRoleWhereInput | UserRoleWhereInput[]
    OR?: UserRoleWhereInput[]
    NOT?: UserRoleWhereInput | UserRoleWhereInput[]
    userId?: StringFilter<"UserRole"> | string
    roleId?: StringFilter<"UserRole"> | string
    assignedBy?: StringNullableFilter<"UserRole"> | string | null
    expiresAt?: DateTimeNullableFilter<"UserRole"> | Date | string | null
    createdAt?: DateTimeFilter<"UserRole"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    role?: XOR<RoleRelationFilter, RoleWhereInput>
  }, "id" | "userId_roleId">

  export type UserRoleOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    roleId?: SortOrder
    assignedBy?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: UserRoleCountOrderByAggregateInput
    _max?: UserRoleMaxOrderByAggregateInput
    _min?: UserRoleMinOrderByAggregateInput
  }

  export type UserRoleScalarWhereWithAggregatesInput = {
    AND?: UserRoleScalarWhereWithAggregatesInput | UserRoleScalarWhereWithAggregatesInput[]
    OR?: UserRoleScalarWhereWithAggregatesInput[]
    NOT?: UserRoleScalarWhereWithAggregatesInput | UserRoleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserRole"> | string
    userId?: StringWithAggregatesFilter<"UserRole"> | string
    roleId?: StringWithAggregatesFilter<"UserRole"> | string
    assignedBy?: StringNullableWithAggregatesFilter<"UserRole"> | string | null
    expiresAt?: DateTimeNullableWithAggregatesFilter<"UserRole"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UserRole"> | Date | string
  }

  export type OperationLogWhereInput = {
    AND?: OperationLogWhereInput | OperationLogWhereInput[]
    OR?: OperationLogWhereInput[]
    NOT?: OperationLogWhereInput | OperationLogWhereInput[]
    id?: StringFilter<"OperationLog"> | string
    userId?: StringFilter<"OperationLog"> | string
    action?: StringFilter<"OperationLog"> | string
    module?: StringFilter<"OperationLog"> | string
    description?: StringNullableFilter<"OperationLog"> | string | null
    method?: StringFilter<"OperationLog"> | string
    path?: StringFilter<"OperationLog"> | string
    ip?: StringNullableFilter<"OperationLog"> | string | null
    userAgent?: StringNullableFilter<"OperationLog"> | string | null
    status?: StringFilter<"OperationLog"> | string
    errorMsg?: StringNullableFilter<"OperationLog"> | string | null
    requestData?: StringNullableFilter<"OperationLog"> | string | null
    responseData?: StringNullableFilter<"OperationLog"> | string | null
    duration?: IntNullableFilter<"OperationLog"> | number | null
    createdAt?: DateTimeFilter<"OperationLog"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type OperationLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    module?: SortOrder
    description?: SortOrderInput | SortOrder
    method?: SortOrder
    path?: SortOrder
    ip?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    status?: SortOrder
    errorMsg?: SortOrderInput | SortOrder
    requestData?: SortOrderInput | SortOrder
    responseData?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type OperationLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OperationLogWhereInput | OperationLogWhereInput[]
    OR?: OperationLogWhereInput[]
    NOT?: OperationLogWhereInput | OperationLogWhereInput[]
    userId?: StringFilter<"OperationLog"> | string
    action?: StringFilter<"OperationLog"> | string
    module?: StringFilter<"OperationLog"> | string
    description?: StringNullableFilter<"OperationLog"> | string | null
    method?: StringFilter<"OperationLog"> | string
    path?: StringFilter<"OperationLog"> | string
    ip?: StringNullableFilter<"OperationLog"> | string | null
    userAgent?: StringNullableFilter<"OperationLog"> | string | null
    status?: StringFilter<"OperationLog"> | string
    errorMsg?: StringNullableFilter<"OperationLog"> | string | null
    requestData?: StringNullableFilter<"OperationLog"> | string | null
    responseData?: StringNullableFilter<"OperationLog"> | string | null
    duration?: IntNullableFilter<"OperationLog"> | number | null
    createdAt?: DateTimeFilter<"OperationLog"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type OperationLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    module?: SortOrder
    description?: SortOrderInput | SortOrder
    method?: SortOrder
    path?: SortOrder
    ip?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    status?: SortOrder
    errorMsg?: SortOrderInput | SortOrder
    requestData?: SortOrderInput | SortOrder
    responseData?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: OperationLogCountOrderByAggregateInput
    _avg?: OperationLogAvgOrderByAggregateInput
    _max?: OperationLogMaxOrderByAggregateInput
    _min?: OperationLogMinOrderByAggregateInput
    _sum?: OperationLogSumOrderByAggregateInput
  }

  export type OperationLogScalarWhereWithAggregatesInput = {
    AND?: OperationLogScalarWhereWithAggregatesInput | OperationLogScalarWhereWithAggregatesInput[]
    OR?: OperationLogScalarWhereWithAggregatesInput[]
    NOT?: OperationLogScalarWhereWithAggregatesInput | OperationLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OperationLog"> | string
    userId?: StringWithAggregatesFilter<"OperationLog"> | string
    action?: StringWithAggregatesFilter<"OperationLog"> | string
    module?: StringWithAggregatesFilter<"OperationLog"> | string
    description?: StringNullableWithAggregatesFilter<"OperationLog"> | string | null
    method?: StringWithAggregatesFilter<"OperationLog"> | string
    path?: StringWithAggregatesFilter<"OperationLog"> | string
    ip?: StringNullableWithAggregatesFilter<"OperationLog"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"OperationLog"> | string | null
    status?: StringWithAggregatesFilter<"OperationLog"> | string
    errorMsg?: StringNullableWithAggregatesFilter<"OperationLog"> | string | null
    requestData?: StringNullableWithAggregatesFilter<"OperationLog"> | string | null
    responseData?: StringNullableWithAggregatesFilter<"OperationLog"> | string | null
    duration?: IntNullableWithAggregatesFilter<"OperationLog"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"OperationLog"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicCreateNestedManyWithoutAuthorInput
    projects?: ProjectCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    likes?: LikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    follows?: FollowCreateNestedManyWithoutFollowerInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionCreateNestedManyWithoutUserInput
    topicActions?: TopicActionCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionCreateNestedManyWithoutUserInput
    activities?: ActivityCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicUncheckedCreateNestedManyWithoutAuthorInput
    projects?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    follows?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionUncheckedCreateNestedManyWithoutUserInput
    topicActions?: TopicActionUncheckedCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityUncheckedCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantUncheckedCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeUncheckedCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentUncheckedCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingUncheckedCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyUncheckedCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogUncheckedCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordUncheckedCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    follows?: FollowUpdateManyWithoutFollowerNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    userActions?: UserActionUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUpdateManyWithoutUserNestedInput
    activities?: ActivityUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUncheckedUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    follows?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUncheckedUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUncheckedUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUncheckedUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUncheckedUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUncheckedUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUncheckedUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUncheckedUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUncheckedUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUncheckedUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TopicCreateInput = {
    id?: string
    title: string
    content: string
    contentType?: string
    summary?: string | null
    category: string
    tags?: string | null
    topicType?: string
    demandType?: string | null
    skillsNeeded?: string | null
    skillsProvided?: string | null
    threshold?: number
    wantToHearCount?: number
    canTellCount?: number
    status?: string
    teamSize?: number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: string | null
    website?: string | null
    github?: string | null
    interestedCount?: number
    duration?: string | null
    targetAudience?: string | null
    scheduledTime?: Date | string | null
    deadline?: Date | string | null
    budget?: string | null
    contactInfo?: string | null
    images?: string | null
    documents?: string | null
    videos?: string | null
    links?: string | null
    quickActions?: string | null
    visibility?: string
    viewsCount?: number
    likesCount?: number
    commentsCount?: number
    bookmarksCount?: number
    hotScore?: number
    trendingScore?: number
    isHot?: boolean
    publishedAt?: Date | string | null
    lastActiveAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutTopicsInput
    comments?: CommentCreateNestedManyWithoutTopicInput
    likes?: LikeCreateNestedManyWithoutTopicInput
    bookmarks?: BookmarkCreateNestedManyWithoutTopicInput
    notifications?: NotificationCreateNestedManyWithoutTopicInput
    userActions?: UserActionCreateNestedManyWithoutTopicInput
    quickActionsList?: TopicQuickActionCreateNestedManyWithoutTopicInput
    actions?: TopicActionCreateNestedManyWithoutTopicInput
  }

  export type TopicUncheckedCreateInput = {
    id?: string
    title: string
    content: string
    contentType?: string
    summary?: string | null
    category: string
    tags?: string | null
    topicType?: string
    demandType?: string | null
    skillsNeeded?: string | null
    skillsProvided?: string | null
    threshold?: number
    wantToHearCount?: number
    canTellCount?: number
    status?: string
    teamSize?: number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: string | null
    website?: string | null
    github?: string | null
    interestedCount?: number
    duration?: string | null
    targetAudience?: string | null
    scheduledTime?: Date | string | null
    deadline?: Date | string | null
    budget?: string | null
    contactInfo?: string | null
    images?: string | null
    documents?: string | null
    videos?: string | null
    links?: string | null
    quickActions?: string | null
    visibility?: string
    viewsCount?: number
    likesCount?: number
    commentsCount?: number
    bookmarksCount?: number
    hotScore?: number
    trendingScore?: number
    isHot?: boolean
    publishedAt?: Date | string | null
    lastActiveAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    comments?: CommentUncheckedCreateNestedManyWithoutTopicInput
    likes?: LikeUncheckedCreateNestedManyWithoutTopicInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutTopicInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTopicInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutTopicInput
    quickActionsList?: TopicQuickActionUncheckedCreateNestedManyWithoutTopicInput
    actions?: TopicActionUncheckedCreateNestedManyWithoutTopicInput
  }

  export type TopicUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    topicType?: StringFieldUpdateOperationsInput | string
    demandType?: NullableStringFieldUpdateOperationsInput | string | null
    skillsNeeded?: NullableStringFieldUpdateOperationsInput | string | null
    skillsProvided?: NullableStringFieldUpdateOperationsInput | string | null
    threshold?: IntFieldUpdateOperationsInput | number
    wantToHearCount?: IntFieldUpdateOperationsInput | number
    canTellCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    teamSize?: NullableIntFieldUpdateOperationsInput | number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    interestedCount?: IntFieldUpdateOperationsInput | number
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableStringFieldUpdateOperationsInput | string | null
    videos?: NullableStringFieldUpdateOperationsInput | string | null
    links?: NullableStringFieldUpdateOperationsInput | string | null
    quickActions?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: StringFieldUpdateOperationsInput | string
    viewsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    bookmarksCount?: IntFieldUpdateOperationsInput | number
    hotScore?: FloatFieldUpdateOperationsInput | number
    trendingScore?: FloatFieldUpdateOperationsInput | number
    isHot?: BoolFieldUpdateOperationsInput | boolean
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutTopicsNestedInput
    comments?: CommentUpdateManyWithoutTopicNestedInput
    likes?: LikeUpdateManyWithoutTopicNestedInput
    bookmarks?: BookmarkUpdateManyWithoutTopicNestedInput
    notifications?: NotificationUpdateManyWithoutTopicNestedInput
    userActions?: UserActionUpdateManyWithoutTopicNestedInput
    quickActionsList?: TopicQuickActionUpdateManyWithoutTopicNestedInput
    actions?: TopicActionUpdateManyWithoutTopicNestedInput
  }

  export type TopicUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    topicType?: StringFieldUpdateOperationsInput | string
    demandType?: NullableStringFieldUpdateOperationsInput | string | null
    skillsNeeded?: NullableStringFieldUpdateOperationsInput | string | null
    skillsProvided?: NullableStringFieldUpdateOperationsInput | string | null
    threshold?: IntFieldUpdateOperationsInput | number
    wantToHearCount?: IntFieldUpdateOperationsInput | number
    canTellCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    teamSize?: NullableIntFieldUpdateOperationsInput | number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    interestedCount?: IntFieldUpdateOperationsInput | number
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableStringFieldUpdateOperationsInput | string | null
    videos?: NullableStringFieldUpdateOperationsInput | string | null
    links?: NullableStringFieldUpdateOperationsInput | string | null
    quickActions?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: StringFieldUpdateOperationsInput | string
    viewsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    bookmarksCount?: IntFieldUpdateOperationsInput | number
    hotScore?: FloatFieldUpdateOperationsInput | number
    trendingScore?: FloatFieldUpdateOperationsInput | number
    isHot?: BoolFieldUpdateOperationsInput | boolean
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    comments?: CommentUncheckedUpdateManyWithoutTopicNestedInput
    likes?: LikeUncheckedUpdateManyWithoutTopicNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutTopicNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTopicNestedInput
    userActions?: UserActionUncheckedUpdateManyWithoutTopicNestedInput
    quickActionsList?: TopicQuickActionUncheckedUpdateManyWithoutTopicNestedInput
    actions?: TopicActionUncheckedUpdateManyWithoutTopicNestedInput
  }

  export type TopicCreateManyInput = {
    id?: string
    title: string
    content: string
    contentType?: string
    summary?: string | null
    category: string
    tags?: string | null
    topicType?: string
    demandType?: string | null
    skillsNeeded?: string | null
    skillsProvided?: string | null
    threshold?: number
    wantToHearCount?: number
    canTellCount?: number
    status?: string
    teamSize?: number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: string | null
    website?: string | null
    github?: string | null
    interestedCount?: number
    duration?: string | null
    targetAudience?: string | null
    scheduledTime?: Date | string | null
    deadline?: Date | string | null
    budget?: string | null
    contactInfo?: string | null
    images?: string | null
    documents?: string | null
    videos?: string | null
    links?: string | null
    quickActions?: string | null
    visibility?: string
    viewsCount?: number
    likesCount?: number
    commentsCount?: number
    bookmarksCount?: number
    hotScore?: number
    trendingScore?: number
    isHot?: boolean
    publishedAt?: Date | string | null
    lastActiveAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
  }

  export type TopicUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    topicType?: StringFieldUpdateOperationsInput | string
    demandType?: NullableStringFieldUpdateOperationsInput | string | null
    skillsNeeded?: NullableStringFieldUpdateOperationsInput | string | null
    skillsProvided?: NullableStringFieldUpdateOperationsInput | string | null
    threshold?: IntFieldUpdateOperationsInput | number
    wantToHearCount?: IntFieldUpdateOperationsInput | number
    canTellCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    teamSize?: NullableIntFieldUpdateOperationsInput | number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    interestedCount?: IntFieldUpdateOperationsInput | number
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableStringFieldUpdateOperationsInput | string | null
    videos?: NullableStringFieldUpdateOperationsInput | string | null
    links?: NullableStringFieldUpdateOperationsInput | string | null
    quickActions?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: StringFieldUpdateOperationsInput | string
    viewsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    bookmarksCount?: IntFieldUpdateOperationsInput | number
    hotScore?: FloatFieldUpdateOperationsInput | number
    trendingScore?: FloatFieldUpdateOperationsInput | number
    isHot?: BoolFieldUpdateOperationsInput | boolean
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TopicUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    topicType?: StringFieldUpdateOperationsInput | string
    demandType?: NullableStringFieldUpdateOperationsInput | string | null
    skillsNeeded?: NullableStringFieldUpdateOperationsInput | string | null
    skillsProvided?: NullableStringFieldUpdateOperationsInput | string | null
    threshold?: IntFieldUpdateOperationsInput | number
    wantToHearCount?: IntFieldUpdateOperationsInput | number
    canTellCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    teamSize?: NullableIntFieldUpdateOperationsInput | number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    interestedCount?: IntFieldUpdateOperationsInput | number
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableStringFieldUpdateOperationsInput | string | null
    videos?: NullableStringFieldUpdateOperationsInput | string | null
    links?: NullableStringFieldUpdateOperationsInput | string | null
    quickActions?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: StringFieldUpdateOperationsInput | string
    viewsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    bookmarksCount?: IntFieldUpdateOperationsInput | number
    hotScore?: FloatFieldUpdateOperationsInput | number
    trendingScore?: FloatFieldUpdateOperationsInput | number
    isHot?: BoolFieldUpdateOperationsInput | boolean
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentCreateInput = {
    id?: string
    content: string
    images?: string | null
    rootId?: string | null
    repliesCount?: number
    likesCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    topic?: TopicCreateNestedOneWithoutCommentsInput
    project?: ProjectCreateNestedOneWithoutCommentsInput
    author: UserCreateNestedOneWithoutCommentsInput
    parent?: CommentCreateNestedOneWithoutRepliesInput
    replies?: CommentCreateNestedManyWithoutParentInput
    likes?: LikeCreateNestedManyWithoutCommentInput
    notifications?: NotificationCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateInput = {
    id?: string
    content: string
    images?: string | null
    parentId?: string | null
    rootId?: string | null
    repliesCount?: number
    likesCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    topicId?: string | null
    projectId?: string | null
    authorId: string
    replies?: CommentUncheckedCreateNestedManyWithoutParentInput
    likes?: LikeUncheckedCreateNestedManyWithoutCommentInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    rootId?: NullableStringFieldUpdateOperationsInput | string | null
    repliesCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: TopicUpdateOneWithoutCommentsNestedInput
    project?: ProjectUpdateOneWithoutCommentsNestedInput
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
    parent?: CommentUpdateOneWithoutRepliesNestedInput
    replies?: CommentUpdateManyWithoutParentNestedInput
    likes?: LikeUpdateManyWithoutCommentNestedInput
    notifications?: NotificationUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    rootId?: NullableStringFieldUpdateOperationsInput | string | null
    repliesCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topicId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    replies?: CommentUncheckedUpdateManyWithoutParentNestedInput
    likes?: LikeUncheckedUpdateManyWithoutCommentNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentCreateManyInput = {
    id?: string
    content: string
    images?: string | null
    parentId?: string | null
    rootId?: string | null
    repliesCount?: number
    likesCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    topicId?: string | null
    projectId?: string | null
    authorId: string
  }

  export type CommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    rootId?: NullableStringFieldUpdateOperationsInput | string | null
    repliesCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    rootId?: NullableStringFieldUpdateOperationsInput | string | null
    repliesCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topicId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type LikeCreateInput = {
    id?: string
    targetType: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutLikesInput
    topic?: TopicCreateNestedOneWithoutLikesInput
    comment?: CommentCreateNestedOneWithoutLikesInput
  }

  export type LikeUncheckedCreateInput = {
    id?: string
    targetType: string
    targetId: string
    createdAt?: Date | string
    userId: string
  }

  export type LikeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutLikesNestedInput
    topic?: TopicUpdateOneWithoutLikesNestedInput
    comment?: CommentUpdateOneWithoutLikesNestedInput
  }

  export type LikeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type LikeCreateManyInput = {
    id?: string
    targetType: string
    targetId: string
    createdAt?: Date | string
    userId: string
  }

  export type LikeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type BookmarkCreateInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutBookmarksInput
    topic: TopicCreateNestedOneWithoutBookmarksInput
  }

  export type BookmarkUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    userId: string
    topicId: string
  }

  export type BookmarkUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBookmarksNestedInput
    topic?: TopicUpdateOneRequiredWithoutBookmarksNestedInput
  }

  export type BookmarkUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    topicId?: StringFieldUpdateOperationsInput | string
  }

  export type BookmarkCreateManyInput = {
    id?: string
    createdAt?: Date | string
    userId: string
    topicId: string
  }

  export type BookmarkUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmarkUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    topicId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowCreateInput = {
    id?: string
    createdAt?: Date | string
    follower: UserCreateNestedOneWithoutFollowsInput
    following: UserCreateNestedOneWithoutFollowersInput
  }

  export type FollowUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    followerId: string
    followingId: string
  }

  export type FollowUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    follower?: UserUpdateOneRequiredWithoutFollowsNestedInput
    following?: UserUpdateOneRequiredWithoutFollowersNestedInput
  }

  export type FollowUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followerId?: StringFieldUpdateOperationsInput | string
    followingId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowCreateManyInput = {
    id?: string
    createdAt?: Date | string
    followerId: string
    followingId: string
  }

  export type FollowUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followerId?: StringFieldUpdateOperationsInput | string
    followingId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationCreateInput = {
    id?: string
    type: string
    title: string
    content: string
    isRead?: boolean
    readAt?: Date | string | null
    link?: string | null
    createdAt?: Date | string
    targetType: string
    user: UserCreateNestedOneWithoutReceivedNotificationsInput
    actor?: UserCreateNestedOneWithoutSentNotificationsInput
    topic?: TopicCreateNestedOneWithoutNotificationsInput
    comment?: CommentCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    type: string
    title: string
    content: string
    isRead?: boolean
    readAt?: Date | string | null
    link?: string | null
    createdAt?: Date | string
    userId: string
    actorId?: string | null
    targetType: string
    targetId: string
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetType?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutReceivedNotificationsNestedInput
    actor?: UserUpdateOneWithoutSentNotificationsNestedInput
    topic?: TopicUpdateOneWithoutNotificationsNestedInput
    comment?: CommentUpdateOneWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    actorId?: NullableStringFieldUpdateOperationsInput | string | null
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationCreateManyInput = {
    id?: string
    type: string
    title: string
    content: string
    isRead?: boolean
    readAt?: Date | string | null
    link?: string | null
    createdAt?: Date | string
    userId: string
    actorId?: string | null
    targetType: string
    targetId: string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetType?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    actorId?: NullableStringFieldUpdateOperationsInput | string | null
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
  }

  export type UserActionCreateInput = {
    id?: string
    actionType: string
    targetType: string
    metadata?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutUserActionsInput
    topic?: TopicCreateNestedOneWithoutUserActionsInput
  }

  export type UserActionUncheckedCreateInput = {
    id?: string
    actionType: string
    targetType: string
    targetId: string
    metadata?: string | null
    createdAt?: Date | string
    userId: string
  }

  export type UserActionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserActionsNestedInput
    topic?: TopicUpdateOneWithoutUserActionsNestedInput
  }

  export type UserActionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserActionCreateManyInput = {
    id?: string
    actionType: string
    targetType: string
    targetId: string
    metadata?: string | null
    createdAt?: Date | string
    userId: string
  }

  export type UserActionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserActionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type TopicQuickActionCreateInput = {
    id?: string
    actionType: string
    createdAt?: Date | string
    topic: TopicCreateNestedOneWithoutQuickActionsListInput
    user: UserCreateNestedOneWithoutTopicQuickActionsInput
  }

  export type TopicQuickActionUncheckedCreateInput = {
    id?: string
    actionType: string
    createdAt?: Date | string
    topicId: string
    userId: string
  }

  export type TopicQuickActionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: TopicUpdateOneRequiredWithoutQuickActionsListNestedInput
    user?: UserUpdateOneRequiredWithoutTopicQuickActionsNestedInput
  }

  export type TopicQuickActionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topicId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type TopicQuickActionCreateManyInput = {
    id?: string
    actionType: string
    createdAt?: Date | string
    topicId: string
    userId: string
  }

  export type TopicQuickActionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TopicQuickActionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topicId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type TopicActionCreateInput = {
    id?: string
    type: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutTopicActionsInput
    topic: TopicCreateNestedOneWithoutActionsInput
  }

  export type TopicActionUncheckedCreateInput = {
    id?: string
    type: string
    userId: string
    topicId: string
    createdAt?: Date | string
  }

  export type TopicActionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTopicActionsNestedInput
    topic?: TopicUpdateOneRequiredWithoutActionsNestedInput
  }

  export type TopicActionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    topicId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TopicActionCreateManyInput = {
    id?: string
    type: string
    userId: string
    topicId: string
    createdAt?: Date | string
  }

  export type TopicActionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TopicActionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    topicId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectActionCreateInput = {
    id?: string
    type: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutProjectActionsInput
    project: ProjectCreateNestedOneWithoutActionsInput
  }

  export type ProjectActionUncheckedCreateInput = {
    id?: string
    type: string
    userId: string
    projectId: string
    createdAt?: Date | string
  }

  export type ProjectActionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProjectActionsNestedInput
    project?: ProjectUpdateOneRequiredWithoutActionsNestedInput
  }

  export type ProjectActionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectActionCreateManyInput = {
    id?: string
    type: string
    userId: string
    projectId: string
    createdAt?: Date | string
  }

  export type ProjectActionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectActionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectCreateInput = {
    id?: string
    category: string
    title: string
    description: string
    tags?: string | null
    teamSize?: number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: string | null
    website?: string | null
    github?: string | null
    viewCount?: number
    likeCount?: number
    commentCount?: number
    interestedCount?: number
    images?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutProjectsInput
    comments?: CommentCreateNestedManyWithoutProjectInput
    actions?: ProjectActionCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateInput = {
    id?: string
    category: string
    title: string
    description: string
    tags?: string | null
    teamSize?: number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: string | null
    website?: string | null
    github?: string | null
    viewCount?: number
    likeCount?: number
    commentCount?: number
    interestedCount?: number
    images?: string | null
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
    actions?: ProjectActionUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    teamSize?: NullableIntFieldUpdateOperationsInput | number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    interestedCount?: IntFieldUpdateOperationsInput | number
    images?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutProjectsNestedInput
    comments?: CommentUpdateManyWithoutProjectNestedInput
    actions?: ProjectActionUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    teamSize?: NullableIntFieldUpdateOperationsInput | number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    interestedCount?: IntFieldUpdateOperationsInput | number
    images?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
    actions?: ProjectActionUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateManyInput = {
    id?: string
    category: string
    title: string
    description: string
    tags?: string | null
    teamSize?: number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: string | null
    website?: string | null
    github?: string | null
    viewCount?: number
    likeCount?: number
    commentCount?: number
    interestedCount?: number
    images?: string | null
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    teamSize?: NullableIntFieldUpdateOperationsInput | number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    interestedCount?: IntFieldUpdateOperationsInput | number
    images?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    teamSize?: NullableIntFieldUpdateOperationsInput | number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    interestedCount?: IntFieldUpdateOperationsInput | number
    images?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityCreateInput = {
    id?: string
    title: string
    description: string
    location: string
    startTime: Date | string
    endTime?: Date | string | null
    maxParticipants?: number | null
    category: string
    tags?: string | null
    cover?: string | null
    images?: string | null
    participantsCount?: number
    likesCount?: number
    commentsCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutActivitiesInput
    participants?: ActivityParticipantCreateNestedManyWithoutActivityInput
    likes?: ActivityLikeCreateNestedManyWithoutActivityInput
    comments?: ActivityCommentCreateNestedManyWithoutActivityInput
  }

  export type ActivityUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    location: string
    startTime: Date | string
    endTime?: Date | string | null
    maxParticipants?: number | null
    category: string
    tags?: string | null
    cover?: string | null
    images?: string | null
    participantsCount?: number
    likesCount?: number
    commentsCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    participants?: ActivityParticipantUncheckedCreateNestedManyWithoutActivityInput
    likes?: ActivityLikeUncheckedCreateNestedManyWithoutActivityInput
    comments?: ActivityCommentUncheckedCreateNestedManyWithoutActivityInput
  }

  export type ActivityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    participantsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutActivitiesNestedInput
    participants?: ActivityParticipantUpdateManyWithoutActivityNestedInput
    likes?: ActivityLikeUpdateManyWithoutActivityNestedInput
    comments?: ActivityCommentUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    participantsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    participants?: ActivityParticipantUncheckedUpdateManyWithoutActivityNestedInput
    likes?: ActivityLikeUncheckedUpdateManyWithoutActivityNestedInput
    comments?: ActivityCommentUncheckedUpdateManyWithoutActivityNestedInput
  }

  export type ActivityCreateManyInput = {
    id?: string
    title: string
    description: string
    location: string
    startTime: Date | string
    endTime?: Date | string | null
    maxParticipants?: number | null
    category: string
    tags?: string | null
    cover?: string | null
    images?: string | null
    participantsCount?: number
    likesCount?: number
    commentsCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
  }

  export type ActivityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    participantsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    participantsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type ActivityParticipantCreateInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutActivityParticipantsInput
    activity: ActivityCreateNestedOneWithoutParticipantsInput
  }

  export type ActivityParticipantUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    userId: string
    activityId: string
  }

  export type ActivityParticipantUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutActivityParticipantsNestedInput
    activity?: ActivityUpdateOneRequiredWithoutParticipantsNestedInput
  }

  export type ActivityParticipantUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
  }

  export type ActivityParticipantCreateManyInput = {
    id?: string
    createdAt?: Date | string
    userId: string
    activityId: string
  }

  export type ActivityParticipantUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityParticipantUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
  }

  export type ActivityLikeCreateInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutActivityLikesInput
    activity: ActivityCreateNestedOneWithoutLikesInput
  }

  export type ActivityLikeUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    userId: string
    activityId: string
  }

  export type ActivityLikeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutActivityLikesNestedInput
    activity?: ActivityUpdateOneRequiredWithoutLikesNestedInput
  }

  export type ActivityLikeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
  }

  export type ActivityLikeCreateManyInput = {
    id?: string
    createdAt?: Date | string
    userId: string
    activityId: string
  }

  export type ActivityLikeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityLikeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
  }

  export type ActivityCommentCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutActivityCommentsInput
    activity: ActivityCreateNestedOneWithoutCommentsInput
  }

  export type ActivityCommentUncheckedCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    activityId: string
  }

  export type ActivityCommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutActivityCommentsNestedInput
    activity?: ActivityUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type ActivityCommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
  }

  export type ActivityCommentCreateManyInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    activityId: string
  }

  export type ActivityCommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityCommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
  }

  export type UserBindingCreateInput = {
    id?: string
    type: string
    bindValue: string
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserBindingsInput
  }

  export type UserBindingUncheckedCreateInput = {
    id?: string
    type: string
    bindValue: string
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type UserBindingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    bindValue?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserBindingsNestedInput
  }

  export type UserBindingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    bindValue?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserBindingCreateManyInput = {
    id?: string
    type: string
    bindValue: string
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type UserBindingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    bindValue?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBindingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    bindValue?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type VerificationCodeCreateInput = {
    id?: string
    email: string
    code: string
    type: string
    used?: boolean
    usedAt?: Date | string | null
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type VerificationCodeUncheckedCreateInput = {
    id?: string
    email: string
    code: string
    type: string
    used?: boolean
    usedAt?: Date | string | null
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type VerificationCodeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    used?: BoolFieldUpdateOperationsInput | boolean
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationCodeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    used?: BoolFieldUpdateOperationsInput | boolean
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationCodeCreateManyInput = {
    id?: string
    email: string
    code: string
    type: string
    used?: boolean
    usedAt?: Date | string | null
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type VerificationCodeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    used?: BoolFieldUpdateOperationsInput | boolean
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationCodeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    used?: BoolFieldUpdateOperationsInput | boolean
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoginLogCreateInput = {
    id?: string
    ipAddress?: string | null
    userAgent?: string | null
    loginMethod: string
    status: string
    failReason?: string | null
    loginTime?: Date | string
    user?: UserCreateNestedOneWithoutLoginLogsInput
  }

  export type LoginLogUncheckedCreateInput = {
    id?: string
    ipAddress?: string | null
    userAgent?: string | null
    loginMethod: string
    status: string
    failReason?: string | null
    loginTime?: Date | string
    userId?: string | null
  }

  export type LoginLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    loginMethod?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    failReason?: NullableStringFieldUpdateOperationsInput | string | null
    loginTime?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutLoginLogsNestedInput
  }

  export type LoginLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    loginMethod?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    failReason?: NullableStringFieldUpdateOperationsInput | string | null
    loginTime?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LoginLogCreateManyInput = {
    id?: string
    ipAddress?: string | null
    userAgent?: string | null
    loginMethod: string
    status: string
    failReason?: string | null
    loginTime?: Date | string
    userId?: string | null
  }

  export type LoginLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    loginMethod?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    failReason?: NullableStringFieldUpdateOperationsInput | string | null
    loginTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoginLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    loginMethod?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    failReason?: NullableStringFieldUpdateOperationsInput | string | null
    loginTime?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeedbackCreateInput = {
    id?: string
    type: string
    title: string
    content: string
    contact?: string | null
    images?: string | null
    platform?: string
    version?: string | null
    deviceInfo?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    status?: string
    processedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutFeedbacksInput
    reply?: FeedbackReplyCreateNestedManyWithoutFeedbackInput
  }

  export type FeedbackUncheckedCreateInput = {
    id?: string
    type: string
    title: string
    content: string
    contact?: string | null
    images?: string | null
    platform?: string
    version?: string | null
    deviceInfo?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    status?: string
    processedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    reply?: FeedbackReplyUncheckedCreateNestedManyWithoutFeedbackInput
  }

  export type FeedbackUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    platform?: StringFieldUpdateOperationsInput | string
    version?: NullableStringFieldUpdateOperationsInput | string | null
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFeedbacksNestedInput
    reply?: FeedbackReplyUpdateManyWithoutFeedbackNestedInput
  }

  export type FeedbackUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    platform?: StringFieldUpdateOperationsInput | string
    version?: NullableStringFieldUpdateOperationsInput | string | null
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    reply?: FeedbackReplyUncheckedUpdateManyWithoutFeedbackNestedInput
  }

  export type FeedbackCreateManyInput = {
    id?: string
    type: string
    title: string
    content: string
    contact?: string | null
    images?: string | null
    platform?: string
    version?: string | null
    deviceInfo?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    status?: string
    processedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type FeedbackUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    platform?: StringFieldUpdateOperationsInput | string
    version?: NullableStringFieldUpdateOperationsInput | string | null
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    platform?: StringFieldUpdateOperationsInput | string
    version?: NullableStringFieldUpdateOperationsInput | string | null
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackReplyCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    feedback: FeedbackCreateNestedOneWithoutReplyInput
    admin: UserCreateNestedOneWithoutFeedbackRepliesInput
  }

  export type FeedbackReplyUncheckedCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    feedbackId: string
    adminId: string
  }

  export type FeedbackReplyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedback?: FeedbackUpdateOneRequiredWithoutReplyNestedInput
    admin?: UserUpdateOneRequiredWithoutFeedbackRepliesNestedInput
  }

  export type FeedbackReplyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackId?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackReplyCreateManyInput = {
    id?: string
    content: string
    createdAt?: Date | string
    feedbackId: string
    adminId: string
  }

  export type FeedbackReplyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackReplyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackId?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
  }

  export type CreditLogCreateInput = {
    id?: string
    action: string
    amount: number
    reason?: string | null
    relatedType?: string | null
    relatedId?: string | null
    metadata?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutCreditLogsInput
  }

  export type CreditLogUncheckedCreateInput = {
    id?: string
    action: string
    amount: number
    reason?: string | null
    relatedType?: string | null
    relatedId?: string | null
    metadata?: string | null
    createdAt?: Date | string
    userId: string
  }

  export type CreditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    relatedType?: NullableStringFieldUpdateOperationsInput | string | null
    relatedId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCreditLogsNestedInput
  }

  export type CreditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    relatedType?: NullableStringFieldUpdateOperationsInput | string | null
    relatedId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CreditLogCreateManyInput = {
    id?: string
    action: string
    amount: number
    reason?: string | null
    relatedType?: string | null
    relatedId?: string | null
    metadata?: string | null
    createdAt?: Date | string
    userId: string
  }

  export type CreditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    relatedType?: NullableStringFieldUpdateOperationsInput | string | null
    relatedId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CreditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    relatedType?: NullableStringFieldUpdateOperationsInput | string | null
    relatedId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserLevelCreateInput = {
    id?: string
    level: number
    name: string
    minExp: number
    maxExp: number
    icon?: string | null
    color?: string | null
    privileges?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserLevelUncheckedCreateInput = {
    id?: string
    level: number
    name: string
    minExp: number
    maxExp: number
    icon?: string | null
    color?: string | null
    privileges?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserLevelUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    minExp?: IntFieldUpdateOperationsInput | number
    maxExp?: IntFieldUpdateOperationsInput | number
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    privileges?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserLevelUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    minExp?: IntFieldUpdateOperationsInput | number
    maxExp?: IntFieldUpdateOperationsInput | number
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    privileges?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserLevelCreateManyInput = {
    id?: string
    level: number
    name: string
    minExp: number
    maxExp: number
    icon?: string | null
    color?: string | null
    privileges?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserLevelUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    minExp?: IntFieldUpdateOperationsInput | number
    maxExp?: IntFieldUpdateOperationsInput | number
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    privileges?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserLevelUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    minExp?: IntFieldUpdateOperationsInput | number
    maxExp?: IntFieldUpdateOperationsInput | number
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    privileges?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBadgeCreateInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    icon?: string | null
    category: string
    rarity?: string
    condition?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userRecords?: UserBadgeRecordCreateNestedManyWithoutBadgeInput
  }

  export type UserBadgeUncheckedCreateInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    icon?: string | null
    category: string
    rarity?: string
    condition?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userRecords?: UserBadgeRecordUncheckedCreateNestedManyWithoutBadgeInput
  }

  export type UserBadgeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    rarity?: StringFieldUpdateOperationsInput | string
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRecords?: UserBadgeRecordUpdateManyWithoutBadgeNestedInput
  }

  export type UserBadgeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    rarity?: StringFieldUpdateOperationsInput | string
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRecords?: UserBadgeRecordUncheckedUpdateManyWithoutBadgeNestedInput
  }

  export type UserBadgeCreateManyInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    icon?: string | null
    category: string
    rarity?: string
    condition?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserBadgeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    rarity?: StringFieldUpdateOperationsInput | string
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBadgeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    rarity?: StringFieldUpdateOperationsInput | string
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBadgeRecordCreateInput = {
    id?: string
    progress?: number
    awardedAt?: Date | string
    metadata?: string | null
    user: UserCreateNestedOneWithoutBadgeRecordsInput
    badge: UserBadgeCreateNestedOneWithoutUserRecordsInput
  }

  export type UserBadgeRecordUncheckedCreateInput = {
    id?: string
    progress?: number
    awardedAt?: Date | string
    metadata?: string | null
    userId: string
    badgeId: string
  }

  export type UserBadgeRecordUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    awardedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutBadgeRecordsNestedInput
    badge?: UserBadgeUpdateOneRequiredWithoutUserRecordsNestedInput
  }

  export type UserBadgeRecordUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    awardedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    badgeId?: StringFieldUpdateOperationsInput | string
  }

  export type UserBadgeRecordCreateManyInput = {
    id?: string
    progress?: number
    awardedAt?: Date | string
    metadata?: string | null
    userId: string
    badgeId: string
  }

  export type UserBadgeRecordUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    awardedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserBadgeRecordUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    awardedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    badgeId?: StringFieldUpdateOperationsInput | string
  }

  export type DailyCheckInCreateInput = {
    id?: string
    checkInDate: Date | string
    credits?: number
    consecutiveDays?: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutCheckInsInput
  }

  export type DailyCheckInUncheckedCreateInput = {
    id?: string
    checkInDate: Date | string
    credits?: number
    consecutiveDays?: number
    createdAt?: Date | string
    userId: string
  }

  export type DailyCheckInUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    checkInDate?: DateTimeFieldUpdateOperationsInput | Date | string
    credits?: IntFieldUpdateOperationsInput | number
    consecutiveDays?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCheckInsNestedInput
  }

  export type DailyCheckInUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    checkInDate?: DateTimeFieldUpdateOperationsInput | Date | string
    credits?: IntFieldUpdateOperationsInput | number
    consecutiveDays?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type DailyCheckInCreateManyInput = {
    id?: string
    checkInDate: Date | string
    credits?: number
    consecutiveDays?: number
    createdAt?: Date | string
    userId: string
  }

  export type DailyCheckInUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    checkInDate?: DateTimeFieldUpdateOperationsInput | Date | string
    credits?: IntFieldUpdateOperationsInput | number
    consecutiveDays?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyCheckInUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    checkInDate?: DateTimeFieldUpdateOperationsInput | Date | string
    credits?: IntFieldUpdateOperationsInput | number
    consecutiveDays?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type RoleCreateInput = {
    id?: string
    name: string
    displayName: string
    description?: string | null
    level?: number
    type?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userRoles?: UserRoleCreateNestedManyWithoutRoleInput
    permissions?: RolePermissionCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateInput = {
    id?: string
    name: string
    displayName: string
    description?: string | null
    level?: number
    type?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutRoleInput
    permissions?: RolePermissionUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    level?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRoles?: UserRoleUpdateManyWithoutRoleNestedInput
    permissions?: RolePermissionUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    level?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRoles?: UserRoleUncheckedUpdateManyWithoutRoleNestedInput
    permissions?: RolePermissionUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RoleCreateManyInput = {
    id?: string
    name: string
    displayName: string
    description?: string | null
    level?: number
    type?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    level?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    level?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionCreateInput = {
    id?: string
    name: string
    displayName: string
    description?: string | null
    module: string
    action: string
    resource?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    roles?: RolePermissionCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUncheckedCreateInput = {
    id?: string
    name: string
    displayName: string
    description?: string | null
    module: string
    action: string
    resource?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    roles?: RolePermissionUncheckedCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    module?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roles?: RolePermissionUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    module?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roles?: RolePermissionUncheckedUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionCreateManyInput = {
    id?: string
    name: string
    displayName: string
    description?: string | null
    module: string
    action: string
    resource?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PermissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    module?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    module?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RolePermissionCreateInput = {
    id?: string
    createdAt?: Date | string
    role: RoleCreateNestedOneWithoutPermissionsInput
    permission: PermissionCreateNestedOneWithoutRolesInput
  }

  export type RolePermissionUncheckedCreateInput = {
    id?: string
    roleId: string
    permissionId: string
    createdAt?: Date | string
  }

  export type RolePermissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: RoleUpdateOneRequiredWithoutPermissionsNestedInput
    permission?: PermissionUpdateOneRequiredWithoutRolesNestedInput
  }

  export type RolePermissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RolePermissionCreateManyInput = {
    id?: string
    roleId: string
    permissionId: string
    createdAt?: Date | string
  }

  export type RolePermissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RolePermissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRoleCreateInput = {
    id?: string
    assignedBy?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutRolesInput
    role: RoleCreateNestedOneWithoutUserRolesInput
  }

  export type UserRoleUncheckedCreateInput = {
    id?: string
    userId: string
    roleId: string
    assignedBy?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
  }

  export type UserRoleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedBy?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRolesNestedInput
    role?: RoleUpdateOneRequiredWithoutUserRolesNestedInput
  }

  export type UserRoleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    assignedBy?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRoleCreateManyInput = {
    id?: string
    userId: string
    roleId: string
    assignedBy?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
  }

  export type UserRoleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedBy?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRoleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    assignedBy?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OperationLogCreateInput = {
    id?: string
    action: string
    module: string
    description?: string | null
    method: string
    path: string
    ip?: string | null
    userAgent?: string | null
    status: string
    errorMsg?: string | null
    requestData?: string | null
    responseData?: string | null
    duration?: number | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutOperationLogsInput
  }

  export type OperationLogUncheckedCreateInput = {
    id?: string
    userId: string
    action: string
    module: string
    description?: string | null
    method: string
    path: string
    ip?: string | null
    userAgent?: string | null
    status: string
    errorMsg?: string | null
    requestData?: string | null
    responseData?: string | null
    duration?: number | null
    createdAt?: Date | string
  }

  export type OperationLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    module?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    method?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    errorMsg?: NullableStringFieldUpdateOperationsInput | string | null
    requestData?: NullableStringFieldUpdateOperationsInput | string | null
    responseData?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutOperationLogsNestedInput
  }

  export type OperationLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    module?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    method?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    errorMsg?: NullableStringFieldUpdateOperationsInput | string | null
    requestData?: NullableStringFieldUpdateOperationsInput | string | null
    responseData?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OperationLogCreateManyInput = {
    id?: string
    userId: string
    action: string
    module: string
    description?: string | null
    method: string
    path: string
    ip?: string | null
    userAgent?: string | null
    status: string
    errorMsg?: string | null
    requestData?: string | null
    responseData?: string | null
    duration?: number | null
    createdAt?: Date | string
  }

  export type OperationLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    module?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    method?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    errorMsg?: NullableStringFieldUpdateOperationsInput | string | null
    requestData?: NullableStringFieldUpdateOperationsInput | string | null
    responseData?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OperationLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    module?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    method?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    errorMsg?: NullableStringFieldUpdateOperationsInput | string | null
    requestData?: NullableStringFieldUpdateOperationsInput | string | null
    responseData?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type TopicListRelationFilter = {
    every?: TopicWhereInput
    some?: TopicWhereInput
    none?: TopicWhereInput
  }

  export type ProjectListRelationFilter = {
    every?: ProjectWhereInput
    some?: ProjectWhereInput
    none?: ProjectWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type LikeListRelationFilter = {
    every?: LikeWhereInput
    some?: LikeWhereInput
    none?: LikeWhereInput
  }

  export type BookmarkListRelationFilter = {
    every?: BookmarkWhereInput
    some?: BookmarkWhereInput
    none?: BookmarkWhereInput
  }

  export type FollowListRelationFilter = {
    every?: FollowWhereInput
    some?: FollowWhereInput
    none?: FollowWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type UserActionListRelationFilter = {
    every?: UserActionWhereInput
    some?: UserActionWhereInput
    none?: UserActionWhereInput
  }

  export type TopicQuickActionListRelationFilter = {
    every?: TopicQuickActionWhereInput
    some?: TopicQuickActionWhereInput
    none?: TopicQuickActionWhereInput
  }

  export type TopicActionListRelationFilter = {
    every?: TopicActionWhereInput
    some?: TopicActionWhereInput
    none?: TopicActionWhereInput
  }

  export type ProjectActionListRelationFilter = {
    every?: ProjectActionWhereInput
    some?: ProjectActionWhereInput
    none?: ProjectActionWhereInput
  }

  export type ActivityListRelationFilter = {
    every?: ActivityWhereInput
    some?: ActivityWhereInput
    none?: ActivityWhereInput
  }

  export type ActivityParticipantListRelationFilter = {
    every?: ActivityParticipantWhereInput
    some?: ActivityParticipantWhereInput
    none?: ActivityParticipantWhereInput
  }

  export type ActivityLikeListRelationFilter = {
    every?: ActivityLikeWhereInput
    some?: ActivityLikeWhereInput
    none?: ActivityLikeWhereInput
  }

  export type ActivityCommentListRelationFilter = {
    every?: ActivityCommentWhereInput
    some?: ActivityCommentWhereInput
    none?: ActivityCommentWhereInput
  }

  export type UserBindingListRelationFilter = {
    every?: UserBindingWhereInput
    some?: UserBindingWhereInput
    none?: UserBindingWhereInput
  }

  export type LoginLogListRelationFilter = {
    every?: LoginLogWhereInput
    some?: LoginLogWhereInput
    none?: LoginLogWhereInput
  }

  export type FeedbackListRelationFilter = {
    every?: FeedbackWhereInput
    some?: FeedbackWhereInput
    none?: FeedbackWhereInput
  }

  export type FeedbackReplyListRelationFilter = {
    every?: FeedbackReplyWhereInput
    some?: FeedbackReplyWhereInput
    none?: FeedbackReplyWhereInput
  }

  export type CreditLogListRelationFilter = {
    every?: CreditLogWhereInput
    some?: CreditLogWhereInput
    none?: CreditLogWhereInput
  }

  export type UserBadgeRecordListRelationFilter = {
    every?: UserBadgeRecordWhereInput
    some?: UserBadgeRecordWhereInput
    none?: UserBadgeRecordWhereInput
  }

  export type DailyCheckInListRelationFilter = {
    every?: DailyCheckInWhereInput
    some?: DailyCheckInWhereInput
    none?: DailyCheckInWhereInput
  }

  export type UserRoleListRelationFilter = {
    every?: UserRoleWhereInput
    some?: UserRoleWhereInput
    none?: UserRoleWhereInput
  }

  export type OperationLogListRelationFilter = {
    every?: OperationLogWhereInput
    some?: OperationLogWhereInput
    none?: OperationLogWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type TopicOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LikeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BookmarkOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FollowOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserActionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TopicQuickActionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TopicActionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectActionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ActivityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ActivityParticipantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ActivityLikeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ActivityCommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserBindingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LoginLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FeedbackOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FeedbackReplyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CreditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserBadgeRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DailyCheckInOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserRoleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OperationLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    openid?: SortOrder
    unionid?: SortOrder
    sessionKey?: SortOrder
    nickname?: SortOrder
    avatar?: SortOrder
    gender?: SortOrder
    phone?: SortOrder
    bio?: SortOrder
    school?: SortOrder
    major?: SortOrder
    grade?: SortOrder
    verified?: SortOrder
    skills?: SortOrder
    interests?: SortOrder
    credits?: SortOrder
    level?: SortOrder
    exp?: SortOrder
    topicsCount?: SortOrder
    commentsCount?: SortOrder
    likesCount?: SortOrder
    fansCount?: SortOrder
    followsCount?: SortOrder
    status?: SortOrder
    isCertified?: SortOrder
    isVip?: SortOrder
    lastLoginAt?: SortOrder
    lastActiveAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    gender?: SortOrder
    credits?: SortOrder
    level?: SortOrder
    exp?: SortOrder
    topicsCount?: SortOrder
    commentsCount?: SortOrder
    likesCount?: SortOrder
    fansCount?: SortOrder
    followsCount?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    openid?: SortOrder
    unionid?: SortOrder
    sessionKey?: SortOrder
    nickname?: SortOrder
    avatar?: SortOrder
    gender?: SortOrder
    phone?: SortOrder
    bio?: SortOrder
    school?: SortOrder
    major?: SortOrder
    grade?: SortOrder
    verified?: SortOrder
    skills?: SortOrder
    interests?: SortOrder
    credits?: SortOrder
    level?: SortOrder
    exp?: SortOrder
    topicsCount?: SortOrder
    commentsCount?: SortOrder
    likesCount?: SortOrder
    fansCount?: SortOrder
    followsCount?: SortOrder
    status?: SortOrder
    isCertified?: SortOrder
    isVip?: SortOrder
    lastLoginAt?: SortOrder
    lastActiveAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    openid?: SortOrder
    unionid?: SortOrder
    sessionKey?: SortOrder
    nickname?: SortOrder
    avatar?: SortOrder
    gender?: SortOrder
    phone?: SortOrder
    bio?: SortOrder
    school?: SortOrder
    major?: SortOrder
    grade?: SortOrder
    verified?: SortOrder
    skills?: SortOrder
    interests?: SortOrder
    credits?: SortOrder
    level?: SortOrder
    exp?: SortOrder
    topicsCount?: SortOrder
    commentsCount?: SortOrder
    likesCount?: SortOrder
    fansCount?: SortOrder
    followsCount?: SortOrder
    status?: SortOrder
    isCertified?: SortOrder
    isVip?: SortOrder
    lastLoginAt?: SortOrder
    lastActiveAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    gender?: SortOrder
    credits?: SortOrder
    level?: SortOrder
    exp?: SortOrder
    topicsCount?: SortOrder
    commentsCount?: SortOrder
    likesCount?: SortOrder
    fansCount?: SortOrder
    followsCount?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type TopicCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    contentType?: SortOrder
    summary?: SortOrder
    category?: SortOrder
    tags?: SortOrder
    topicType?: SortOrder
    demandType?: SortOrder
    skillsNeeded?: SortOrder
    skillsProvided?: SortOrder
    threshold?: SortOrder
    wantToHearCount?: SortOrder
    canTellCount?: SortOrder
    status?: SortOrder
    teamSize?: SortOrder
    lookingForRoles?: SortOrder
    projectStage?: SortOrder
    website?: SortOrder
    github?: SortOrder
    interestedCount?: SortOrder
    duration?: SortOrder
    targetAudience?: SortOrder
    scheduledTime?: SortOrder
    deadline?: SortOrder
    budget?: SortOrder
    contactInfo?: SortOrder
    images?: SortOrder
    documents?: SortOrder
    videos?: SortOrder
    links?: SortOrder
    quickActions?: SortOrder
    visibility?: SortOrder
    viewsCount?: SortOrder
    likesCount?: SortOrder
    commentsCount?: SortOrder
    bookmarksCount?: SortOrder
    hotScore?: SortOrder
    trendingScore?: SortOrder
    isHot?: SortOrder
    publishedAt?: SortOrder
    lastActiveAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
  }

  export type TopicAvgOrderByAggregateInput = {
    threshold?: SortOrder
    wantToHearCount?: SortOrder
    canTellCount?: SortOrder
    teamSize?: SortOrder
    interestedCount?: SortOrder
    viewsCount?: SortOrder
    likesCount?: SortOrder
    commentsCount?: SortOrder
    bookmarksCount?: SortOrder
    hotScore?: SortOrder
    trendingScore?: SortOrder
  }

  export type TopicMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    contentType?: SortOrder
    summary?: SortOrder
    category?: SortOrder
    tags?: SortOrder
    topicType?: SortOrder
    demandType?: SortOrder
    skillsNeeded?: SortOrder
    skillsProvided?: SortOrder
    threshold?: SortOrder
    wantToHearCount?: SortOrder
    canTellCount?: SortOrder
    status?: SortOrder
    teamSize?: SortOrder
    projectStage?: SortOrder
    website?: SortOrder
    github?: SortOrder
    interestedCount?: SortOrder
    duration?: SortOrder
    targetAudience?: SortOrder
    scheduledTime?: SortOrder
    deadline?: SortOrder
    budget?: SortOrder
    contactInfo?: SortOrder
    images?: SortOrder
    documents?: SortOrder
    videos?: SortOrder
    links?: SortOrder
    quickActions?: SortOrder
    visibility?: SortOrder
    viewsCount?: SortOrder
    likesCount?: SortOrder
    commentsCount?: SortOrder
    bookmarksCount?: SortOrder
    hotScore?: SortOrder
    trendingScore?: SortOrder
    isHot?: SortOrder
    publishedAt?: SortOrder
    lastActiveAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
  }

  export type TopicMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    contentType?: SortOrder
    summary?: SortOrder
    category?: SortOrder
    tags?: SortOrder
    topicType?: SortOrder
    demandType?: SortOrder
    skillsNeeded?: SortOrder
    skillsProvided?: SortOrder
    threshold?: SortOrder
    wantToHearCount?: SortOrder
    canTellCount?: SortOrder
    status?: SortOrder
    teamSize?: SortOrder
    projectStage?: SortOrder
    website?: SortOrder
    github?: SortOrder
    interestedCount?: SortOrder
    duration?: SortOrder
    targetAudience?: SortOrder
    scheduledTime?: SortOrder
    deadline?: SortOrder
    budget?: SortOrder
    contactInfo?: SortOrder
    images?: SortOrder
    documents?: SortOrder
    videos?: SortOrder
    links?: SortOrder
    quickActions?: SortOrder
    visibility?: SortOrder
    viewsCount?: SortOrder
    likesCount?: SortOrder
    commentsCount?: SortOrder
    bookmarksCount?: SortOrder
    hotScore?: SortOrder
    trendingScore?: SortOrder
    isHot?: SortOrder
    publishedAt?: SortOrder
    lastActiveAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
  }

  export type TopicSumOrderByAggregateInput = {
    threshold?: SortOrder
    wantToHearCount?: SortOrder
    canTellCount?: SortOrder
    teamSize?: SortOrder
    interestedCount?: SortOrder
    viewsCount?: SortOrder
    likesCount?: SortOrder
    commentsCount?: SortOrder
    bookmarksCount?: SortOrder
    hotScore?: SortOrder
    trendingScore?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type TopicNullableRelationFilter = {
    is?: TopicWhereInput | null
    isNot?: TopicWhereInput | null
  }

  export type ProjectNullableRelationFilter = {
    is?: ProjectWhereInput | null
    isNot?: ProjectWhereInput | null
  }

  export type CommentNullableRelationFilter = {
    is?: CommentWhereInput | null
    isNot?: CommentWhereInput | null
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    images?: SortOrder
    parentId?: SortOrder
    rootId?: SortOrder
    repliesCount?: SortOrder
    likesCount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    topicId?: SortOrder
    projectId?: SortOrder
    authorId?: SortOrder
  }

  export type CommentAvgOrderByAggregateInput = {
    repliesCount?: SortOrder
    likesCount?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    images?: SortOrder
    parentId?: SortOrder
    rootId?: SortOrder
    repliesCount?: SortOrder
    likesCount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    topicId?: SortOrder
    projectId?: SortOrder
    authorId?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    images?: SortOrder
    parentId?: SortOrder
    rootId?: SortOrder
    repliesCount?: SortOrder
    likesCount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    topicId?: SortOrder
    projectId?: SortOrder
    authorId?: SortOrder
  }

  export type CommentSumOrderByAggregateInput = {
    repliesCount?: SortOrder
    likesCount?: SortOrder
  }

  export type LikeUserIdTargetTypeTargetIdCompoundUniqueInput = {
    userId: string
    targetType: string
    targetId: string
  }

  export type LikeCountOrderByAggregateInput = {
    id?: SortOrder
    targetType?: SortOrder
    targetId?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type LikeMaxOrderByAggregateInput = {
    id?: SortOrder
    targetType?: SortOrder
    targetId?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type LikeMinOrderByAggregateInput = {
    id?: SortOrder
    targetType?: SortOrder
    targetId?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type TopicRelationFilter = {
    is?: TopicWhereInput
    isNot?: TopicWhereInput
  }

  export type BookmarkUserIdTopicIdCompoundUniqueInput = {
    userId: string
    topicId: string
  }

  export type BookmarkCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    topicId?: SortOrder
  }

  export type BookmarkMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    topicId?: SortOrder
  }

  export type BookmarkMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    topicId?: SortOrder
  }

  export type FollowFollowerIdFollowingIdCompoundUniqueInput = {
    followerId: string
    followingId: string
  }

  export type FollowCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    followerId?: SortOrder
    followingId?: SortOrder
  }

  export type FollowMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    followerId?: SortOrder
    followingId?: SortOrder
  }

  export type FollowMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    followerId?: SortOrder
    followingId?: SortOrder
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrder
    link?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    actorId?: SortOrder
    targetType?: SortOrder
    targetId?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrder
    link?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    actorId?: SortOrder
    targetType?: SortOrder
    targetId?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrder
    link?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    actorId?: SortOrder
    targetType?: SortOrder
    targetId?: SortOrder
  }

  export type UserActionCountOrderByAggregateInput = {
    id?: SortOrder
    actionType?: SortOrder
    targetType?: SortOrder
    targetId?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type UserActionMaxOrderByAggregateInput = {
    id?: SortOrder
    actionType?: SortOrder
    targetType?: SortOrder
    targetId?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type UserActionMinOrderByAggregateInput = {
    id?: SortOrder
    actionType?: SortOrder
    targetType?: SortOrder
    targetId?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type TopicQuickActionTopicIdUserIdActionTypeCompoundUniqueInput = {
    topicId: string
    userId: string
    actionType: string
  }

  export type TopicQuickActionCountOrderByAggregateInput = {
    id?: SortOrder
    actionType?: SortOrder
    createdAt?: SortOrder
    topicId?: SortOrder
    userId?: SortOrder
  }

  export type TopicQuickActionMaxOrderByAggregateInput = {
    id?: SortOrder
    actionType?: SortOrder
    createdAt?: SortOrder
    topicId?: SortOrder
    userId?: SortOrder
  }

  export type TopicQuickActionMinOrderByAggregateInput = {
    id?: SortOrder
    actionType?: SortOrder
    createdAt?: SortOrder
    topicId?: SortOrder
    userId?: SortOrder
  }

  export type TopicActionUserIdTopicIdTypeCompoundUniqueInput = {
    userId: string
    topicId: string
    type: string
  }

  export type TopicActionCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    topicId?: SortOrder
    createdAt?: SortOrder
  }

  export type TopicActionMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    topicId?: SortOrder
    createdAt?: SortOrder
  }

  export type TopicActionMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    topicId?: SortOrder
    createdAt?: SortOrder
  }

  export type ProjectRelationFilter = {
    is?: ProjectWhereInput
    isNot?: ProjectWhereInput
  }

  export type ProjectActionUserIdProjectIdTypeCompoundUniqueInput = {
    userId: string
    projectId: string
    type: string
  }

  export type ProjectActionCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
  }

  export type ProjectActionMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
  }

  export type ProjectActionMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
  }

  export type ProjectCountOrderByAggregateInput = {
    id?: SortOrder
    category?: SortOrder
    title?: SortOrder
    description?: SortOrder
    tags?: SortOrder
    teamSize?: SortOrder
    lookingForRoles?: SortOrder
    projectStage?: SortOrder
    website?: SortOrder
    github?: SortOrder
    viewCount?: SortOrder
    likeCount?: SortOrder
    commentCount?: SortOrder
    interestedCount?: SortOrder
    images?: SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectAvgOrderByAggregateInput = {
    teamSize?: SortOrder
    viewCount?: SortOrder
    likeCount?: SortOrder
    commentCount?: SortOrder
    interestedCount?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    id?: SortOrder
    category?: SortOrder
    title?: SortOrder
    description?: SortOrder
    tags?: SortOrder
    teamSize?: SortOrder
    projectStage?: SortOrder
    website?: SortOrder
    github?: SortOrder
    viewCount?: SortOrder
    likeCount?: SortOrder
    commentCount?: SortOrder
    interestedCount?: SortOrder
    images?: SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    id?: SortOrder
    category?: SortOrder
    title?: SortOrder
    description?: SortOrder
    tags?: SortOrder
    teamSize?: SortOrder
    projectStage?: SortOrder
    website?: SortOrder
    github?: SortOrder
    viewCount?: SortOrder
    likeCount?: SortOrder
    commentCount?: SortOrder
    interestedCount?: SortOrder
    images?: SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectSumOrderByAggregateInput = {
    teamSize?: SortOrder
    viewCount?: SortOrder
    likeCount?: SortOrder
    commentCount?: SortOrder
    interestedCount?: SortOrder
  }

  export type ActivityCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    maxParticipants?: SortOrder
    category?: SortOrder
    tags?: SortOrder
    cover?: SortOrder
    images?: SortOrder
    participantsCount?: SortOrder
    likesCount?: SortOrder
    commentsCount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
  }

  export type ActivityAvgOrderByAggregateInput = {
    maxParticipants?: SortOrder
    participantsCount?: SortOrder
    likesCount?: SortOrder
    commentsCount?: SortOrder
  }

  export type ActivityMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    maxParticipants?: SortOrder
    category?: SortOrder
    tags?: SortOrder
    cover?: SortOrder
    images?: SortOrder
    participantsCount?: SortOrder
    likesCount?: SortOrder
    commentsCount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
  }

  export type ActivityMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    maxParticipants?: SortOrder
    category?: SortOrder
    tags?: SortOrder
    cover?: SortOrder
    images?: SortOrder
    participantsCount?: SortOrder
    likesCount?: SortOrder
    commentsCount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
  }

  export type ActivitySumOrderByAggregateInput = {
    maxParticipants?: SortOrder
    participantsCount?: SortOrder
    likesCount?: SortOrder
    commentsCount?: SortOrder
  }

  export type ActivityRelationFilter = {
    is?: ActivityWhereInput
    isNot?: ActivityWhereInput
  }

  export type ActivityParticipantUserIdActivityIdCompoundUniqueInput = {
    userId: string
    activityId: string
  }

  export type ActivityParticipantCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
  }

  export type ActivityParticipantMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
  }

  export type ActivityParticipantMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
  }

  export type ActivityLikeUserIdActivityIdCompoundUniqueInput = {
    userId: string
    activityId: string
  }

  export type ActivityLikeCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
  }

  export type ActivityLikeMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
  }

  export type ActivityLikeMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
  }

  export type ActivityCommentCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    activityId?: SortOrder
  }

  export type ActivityCommentMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    activityId?: SortOrder
  }

  export type ActivityCommentMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    activityId?: SortOrder
  }

  export type UserBindingTypeBindValueCompoundUniqueInput = {
    type: string
    bindValue: string
  }

  export type UserBindingCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    bindValue?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type UserBindingMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    bindValue?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type UserBindingMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    bindValue?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type VerificationCodeCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    code?: SortOrder
    type?: SortOrder
    used?: SortOrder
    usedAt?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type VerificationCodeMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    code?: SortOrder
    type?: SortOrder
    used?: SortOrder
    usedAt?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type VerificationCodeMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    code?: SortOrder
    type?: SortOrder
    used?: SortOrder
    usedAt?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type LoginLogCountOrderByAggregateInput = {
    id?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    loginMethod?: SortOrder
    status?: SortOrder
    failReason?: SortOrder
    loginTime?: SortOrder
    userId?: SortOrder
  }

  export type LoginLogMaxOrderByAggregateInput = {
    id?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    loginMethod?: SortOrder
    status?: SortOrder
    failReason?: SortOrder
    loginTime?: SortOrder
    userId?: SortOrder
  }

  export type LoginLogMinOrderByAggregateInput = {
    id?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    loginMethod?: SortOrder
    status?: SortOrder
    failReason?: SortOrder
    loginTime?: SortOrder
    userId?: SortOrder
  }

  export type FeedbackCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    contact?: SortOrder
    images?: SortOrder
    platform?: SortOrder
    version?: SortOrder
    deviceInfo?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    status?: SortOrder
    processedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type FeedbackMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    contact?: SortOrder
    images?: SortOrder
    platform?: SortOrder
    version?: SortOrder
    deviceInfo?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    status?: SortOrder
    processedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type FeedbackMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    contact?: SortOrder
    images?: SortOrder
    platform?: SortOrder
    version?: SortOrder
    deviceInfo?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    status?: SortOrder
    processedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type FeedbackRelationFilter = {
    is?: FeedbackWhereInput
    isNot?: FeedbackWhereInput
  }

  export type FeedbackReplyCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    feedbackId?: SortOrder
    adminId?: SortOrder
  }

  export type FeedbackReplyMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    feedbackId?: SortOrder
    adminId?: SortOrder
  }

  export type FeedbackReplyMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    feedbackId?: SortOrder
    adminId?: SortOrder
  }

  export type CreditLogCountOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    amount?: SortOrder
    reason?: SortOrder
    relatedType?: SortOrder
    relatedId?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type CreditLogAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type CreditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    amount?: SortOrder
    reason?: SortOrder
    relatedType?: SortOrder
    relatedId?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type CreditLogMinOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    amount?: SortOrder
    reason?: SortOrder
    relatedType?: SortOrder
    relatedId?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type CreditLogSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type UserLevelCountOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
    name?: SortOrder
    minExp?: SortOrder
    maxExp?: SortOrder
    icon?: SortOrder
    color?: SortOrder
    privileges?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserLevelAvgOrderByAggregateInput = {
    level?: SortOrder
    minExp?: SortOrder
    maxExp?: SortOrder
  }

  export type UserLevelMaxOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
    name?: SortOrder
    minExp?: SortOrder
    maxExp?: SortOrder
    icon?: SortOrder
    color?: SortOrder
    privileges?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserLevelMinOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
    name?: SortOrder
    minExp?: SortOrder
    maxExp?: SortOrder
    icon?: SortOrder
    color?: SortOrder
    privileges?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserLevelSumOrderByAggregateInput = {
    level?: SortOrder
    minExp?: SortOrder
    maxExp?: SortOrder
  }

  export type UserBadgeCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    category?: SortOrder
    rarity?: SortOrder
    condition?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserBadgeMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    category?: SortOrder
    rarity?: SortOrder
    condition?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserBadgeMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    category?: SortOrder
    rarity?: SortOrder
    condition?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserBadgeRelationFilter = {
    is?: UserBadgeWhereInput
    isNot?: UserBadgeWhereInput
  }

  export type UserBadgeRecordUserIdBadgeIdCompoundUniqueInput = {
    userId: string
    badgeId: string
  }

  export type UserBadgeRecordCountOrderByAggregateInput = {
    id?: SortOrder
    progress?: SortOrder
    awardedAt?: SortOrder
    metadata?: SortOrder
    userId?: SortOrder
    badgeId?: SortOrder
  }

  export type UserBadgeRecordAvgOrderByAggregateInput = {
    progress?: SortOrder
  }

  export type UserBadgeRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    progress?: SortOrder
    awardedAt?: SortOrder
    metadata?: SortOrder
    userId?: SortOrder
    badgeId?: SortOrder
  }

  export type UserBadgeRecordMinOrderByAggregateInput = {
    id?: SortOrder
    progress?: SortOrder
    awardedAt?: SortOrder
    metadata?: SortOrder
    userId?: SortOrder
    badgeId?: SortOrder
  }

  export type UserBadgeRecordSumOrderByAggregateInput = {
    progress?: SortOrder
  }

  export type DailyCheckInUserIdCheckInDateCompoundUniqueInput = {
    userId: string
    checkInDate: Date | string
  }

  export type DailyCheckInCountOrderByAggregateInput = {
    id?: SortOrder
    checkInDate?: SortOrder
    credits?: SortOrder
    consecutiveDays?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type DailyCheckInAvgOrderByAggregateInput = {
    credits?: SortOrder
    consecutiveDays?: SortOrder
  }

  export type DailyCheckInMaxOrderByAggregateInput = {
    id?: SortOrder
    checkInDate?: SortOrder
    credits?: SortOrder
    consecutiveDays?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type DailyCheckInMinOrderByAggregateInput = {
    id?: SortOrder
    checkInDate?: SortOrder
    credits?: SortOrder
    consecutiveDays?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type DailyCheckInSumOrderByAggregateInput = {
    credits?: SortOrder
    consecutiveDays?: SortOrder
  }

  export type RolePermissionListRelationFilter = {
    every?: RolePermissionWhereInput
    some?: RolePermissionWhereInput
    none?: RolePermissionWhereInput
  }

  export type RolePermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    displayName?: SortOrder
    description?: SortOrder
    level?: SortOrder
    type?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoleAvgOrderByAggregateInput = {
    level?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    displayName?: SortOrder
    description?: SortOrder
    level?: SortOrder
    type?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    displayName?: SortOrder
    description?: SortOrder
    level?: SortOrder
    type?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoleSumOrderByAggregateInput = {
    level?: SortOrder
  }

  export type PermissionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    displayName?: SortOrder
    description?: SortOrder
    module?: SortOrder
    action?: SortOrder
    resource?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    displayName?: SortOrder
    description?: SortOrder
    module?: SortOrder
    action?: SortOrder
    resource?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PermissionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    displayName?: SortOrder
    description?: SortOrder
    module?: SortOrder
    action?: SortOrder
    resource?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoleRelationFilter = {
    is?: RoleWhereInput
    isNot?: RoleWhereInput
  }

  export type PermissionRelationFilter = {
    is?: PermissionWhereInput
    isNot?: PermissionWhereInput
  }

  export type RolePermissionRoleIdPermissionIdCompoundUniqueInput = {
    roleId: string
    permissionId: string
  }

  export type RolePermissionCountOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
    permissionId?: SortOrder
    createdAt?: SortOrder
  }

  export type RolePermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
    permissionId?: SortOrder
    createdAt?: SortOrder
  }

  export type RolePermissionMinOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
    permissionId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserRoleUserIdRoleIdCompoundUniqueInput = {
    userId: string
    roleId: string
  }

  export type UserRoleCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    roleId?: SortOrder
    assignedBy?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type UserRoleMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    roleId?: SortOrder
    assignedBy?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type UserRoleMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    roleId?: SortOrder
    assignedBy?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type OperationLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    module?: SortOrder
    description?: SortOrder
    method?: SortOrder
    path?: SortOrder
    ip?: SortOrder
    userAgent?: SortOrder
    status?: SortOrder
    errorMsg?: SortOrder
    requestData?: SortOrder
    responseData?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
  }

  export type OperationLogAvgOrderByAggregateInput = {
    duration?: SortOrder
  }

  export type OperationLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    module?: SortOrder
    description?: SortOrder
    method?: SortOrder
    path?: SortOrder
    ip?: SortOrder
    userAgent?: SortOrder
    status?: SortOrder
    errorMsg?: SortOrder
    requestData?: SortOrder
    responseData?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
  }

  export type OperationLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    module?: SortOrder
    description?: SortOrder
    method?: SortOrder
    path?: SortOrder
    ip?: SortOrder
    userAgent?: SortOrder
    status?: SortOrder
    errorMsg?: SortOrder
    requestData?: SortOrder
    responseData?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
  }

  export type OperationLogSumOrderByAggregateInput = {
    duration?: SortOrder
  }

  export type TopicCreateNestedManyWithoutAuthorInput = {
    create?: XOR<TopicCreateWithoutAuthorInput, TopicUncheckedCreateWithoutAuthorInput> | TopicCreateWithoutAuthorInput[] | TopicUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: TopicCreateOrConnectWithoutAuthorInput | TopicCreateOrConnectWithoutAuthorInput[]
    createMany?: TopicCreateManyAuthorInputEnvelope
    connect?: TopicWhereUniqueInput | TopicWhereUniqueInput[]
  }

  export type ProjectCreateNestedManyWithoutAuthorInput = {
    create?: XOR<ProjectCreateWithoutAuthorInput, ProjectUncheckedCreateWithoutAuthorInput> | ProjectCreateWithoutAuthorInput[] | ProjectUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutAuthorInput | ProjectCreateOrConnectWithoutAuthorInput[]
    createMany?: ProjectCreateManyAuthorInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutAuthorInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type LikeCreateNestedManyWithoutUserInput = {
    create?: XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput> | LikeCreateWithoutUserInput[] | LikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutUserInput | LikeCreateOrConnectWithoutUserInput[]
    createMany?: LikeCreateManyUserInputEnvelope
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
  }

  export type BookmarkCreateNestedManyWithoutUserInput = {
    create?: XOR<BookmarkCreateWithoutUserInput, BookmarkUncheckedCreateWithoutUserInput> | BookmarkCreateWithoutUserInput[] | BookmarkUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutUserInput | BookmarkCreateOrConnectWithoutUserInput[]
    createMany?: BookmarkCreateManyUserInputEnvelope
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
  }

  export type FollowCreateNestedManyWithoutFollowerInput = {
    create?: XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput> | FollowCreateWithoutFollowerInput[] | FollowUncheckedCreateWithoutFollowerInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowerInput | FollowCreateOrConnectWithoutFollowerInput[]
    createMany?: FollowCreateManyFollowerInputEnvelope
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
  }

  export type FollowCreateNestedManyWithoutFollowingInput = {
    create?: XOR<FollowCreateWithoutFollowingInput, FollowUncheckedCreateWithoutFollowingInput> | FollowCreateWithoutFollowingInput[] | FollowUncheckedCreateWithoutFollowingInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowingInput | FollowCreateOrConnectWithoutFollowingInput[]
    createMany?: FollowCreateManyFollowingInputEnvelope
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutActorInput = {
    create?: XOR<NotificationCreateWithoutActorInput, NotificationUncheckedCreateWithoutActorInput> | NotificationCreateWithoutActorInput[] | NotificationUncheckedCreateWithoutActorInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutActorInput | NotificationCreateOrConnectWithoutActorInput[]
    createMany?: NotificationCreateManyActorInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type UserActionCreateNestedManyWithoutUserInput = {
    create?: XOR<UserActionCreateWithoutUserInput, UserActionUncheckedCreateWithoutUserInput> | UserActionCreateWithoutUserInput[] | UserActionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserActionCreateOrConnectWithoutUserInput | UserActionCreateOrConnectWithoutUserInput[]
    createMany?: UserActionCreateManyUserInputEnvelope
    connect?: UserActionWhereUniqueInput | UserActionWhereUniqueInput[]
  }

  export type TopicQuickActionCreateNestedManyWithoutUserInput = {
    create?: XOR<TopicQuickActionCreateWithoutUserInput, TopicQuickActionUncheckedCreateWithoutUserInput> | TopicQuickActionCreateWithoutUserInput[] | TopicQuickActionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TopicQuickActionCreateOrConnectWithoutUserInput | TopicQuickActionCreateOrConnectWithoutUserInput[]
    createMany?: TopicQuickActionCreateManyUserInputEnvelope
    connect?: TopicQuickActionWhereUniqueInput | TopicQuickActionWhereUniqueInput[]
  }

  export type TopicActionCreateNestedManyWithoutUserInput = {
    create?: XOR<TopicActionCreateWithoutUserInput, TopicActionUncheckedCreateWithoutUserInput> | TopicActionCreateWithoutUserInput[] | TopicActionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TopicActionCreateOrConnectWithoutUserInput | TopicActionCreateOrConnectWithoutUserInput[]
    createMany?: TopicActionCreateManyUserInputEnvelope
    connect?: TopicActionWhereUniqueInput | TopicActionWhereUniqueInput[]
  }

  export type ProjectActionCreateNestedManyWithoutUserInput = {
    create?: XOR<ProjectActionCreateWithoutUserInput, ProjectActionUncheckedCreateWithoutUserInput> | ProjectActionCreateWithoutUserInput[] | ProjectActionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectActionCreateOrConnectWithoutUserInput | ProjectActionCreateOrConnectWithoutUserInput[]
    createMany?: ProjectActionCreateManyUserInputEnvelope
    connect?: ProjectActionWhereUniqueInput | ProjectActionWhereUniqueInput[]
  }

  export type ActivityCreateNestedManyWithoutAuthorInput = {
    create?: XOR<ActivityCreateWithoutAuthorInput, ActivityUncheckedCreateWithoutAuthorInput> | ActivityCreateWithoutAuthorInput[] | ActivityUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutAuthorInput | ActivityCreateOrConnectWithoutAuthorInput[]
    createMany?: ActivityCreateManyAuthorInputEnvelope
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type ActivityParticipantCreateNestedManyWithoutUserInput = {
    create?: XOR<ActivityParticipantCreateWithoutUserInput, ActivityParticipantUncheckedCreateWithoutUserInput> | ActivityParticipantCreateWithoutUserInput[] | ActivityParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityParticipantCreateOrConnectWithoutUserInput | ActivityParticipantCreateOrConnectWithoutUserInput[]
    createMany?: ActivityParticipantCreateManyUserInputEnvelope
    connect?: ActivityParticipantWhereUniqueInput | ActivityParticipantWhereUniqueInput[]
  }

  export type ActivityLikeCreateNestedManyWithoutUserInput = {
    create?: XOR<ActivityLikeCreateWithoutUserInput, ActivityLikeUncheckedCreateWithoutUserInput> | ActivityLikeCreateWithoutUserInput[] | ActivityLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityLikeCreateOrConnectWithoutUserInput | ActivityLikeCreateOrConnectWithoutUserInput[]
    createMany?: ActivityLikeCreateManyUserInputEnvelope
    connect?: ActivityLikeWhereUniqueInput | ActivityLikeWhereUniqueInput[]
  }

  export type ActivityCommentCreateNestedManyWithoutAuthorInput = {
    create?: XOR<ActivityCommentCreateWithoutAuthorInput, ActivityCommentUncheckedCreateWithoutAuthorInput> | ActivityCommentCreateWithoutAuthorInput[] | ActivityCommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ActivityCommentCreateOrConnectWithoutAuthorInput | ActivityCommentCreateOrConnectWithoutAuthorInput[]
    createMany?: ActivityCommentCreateManyAuthorInputEnvelope
    connect?: ActivityCommentWhereUniqueInput | ActivityCommentWhereUniqueInput[]
  }

  export type UserBindingCreateNestedManyWithoutUserInput = {
    create?: XOR<UserBindingCreateWithoutUserInput, UserBindingUncheckedCreateWithoutUserInput> | UserBindingCreateWithoutUserInput[] | UserBindingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBindingCreateOrConnectWithoutUserInput | UserBindingCreateOrConnectWithoutUserInput[]
    createMany?: UserBindingCreateManyUserInputEnvelope
    connect?: UserBindingWhereUniqueInput | UserBindingWhereUniqueInput[]
  }

  export type LoginLogCreateNestedManyWithoutUserInput = {
    create?: XOR<LoginLogCreateWithoutUserInput, LoginLogUncheckedCreateWithoutUserInput> | LoginLogCreateWithoutUserInput[] | LoginLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LoginLogCreateOrConnectWithoutUserInput | LoginLogCreateOrConnectWithoutUserInput[]
    createMany?: LoginLogCreateManyUserInputEnvelope
    connect?: LoginLogWhereUniqueInput | LoginLogWhereUniqueInput[]
  }

  export type FeedbackCreateNestedManyWithoutUserInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type FeedbackReplyCreateNestedManyWithoutAdminInput = {
    create?: XOR<FeedbackReplyCreateWithoutAdminInput, FeedbackReplyUncheckedCreateWithoutAdminInput> | FeedbackReplyCreateWithoutAdminInput[] | FeedbackReplyUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: FeedbackReplyCreateOrConnectWithoutAdminInput | FeedbackReplyCreateOrConnectWithoutAdminInput[]
    createMany?: FeedbackReplyCreateManyAdminInputEnvelope
    connect?: FeedbackReplyWhereUniqueInput | FeedbackReplyWhereUniqueInput[]
  }

  export type CreditLogCreateNestedManyWithoutUserInput = {
    create?: XOR<CreditLogCreateWithoutUserInput, CreditLogUncheckedCreateWithoutUserInput> | CreditLogCreateWithoutUserInput[] | CreditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CreditLogCreateOrConnectWithoutUserInput | CreditLogCreateOrConnectWithoutUserInput[]
    createMany?: CreditLogCreateManyUserInputEnvelope
    connect?: CreditLogWhereUniqueInput | CreditLogWhereUniqueInput[]
  }

  export type UserBadgeRecordCreateNestedManyWithoutUserInput = {
    create?: XOR<UserBadgeRecordCreateWithoutUserInput, UserBadgeRecordUncheckedCreateWithoutUserInput> | UserBadgeRecordCreateWithoutUserInput[] | UserBadgeRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBadgeRecordCreateOrConnectWithoutUserInput | UserBadgeRecordCreateOrConnectWithoutUserInput[]
    createMany?: UserBadgeRecordCreateManyUserInputEnvelope
    connect?: UserBadgeRecordWhereUniqueInput | UserBadgeRecordWhereUniqueInput[]
  }

  export type DailyCheckInCreateNestedManyWithoutUserInput = {
    create?: XOR<DailyCheckInCreateWithoutUserInput, DailyCheckInUncheckedCreateWithoutUserInput> | DailyCheckInCreateWithoutUserInput[] | DailyCheckInUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DailyCheckInCreateOrConnectWithoutUserInput | DailyCheckInCreateOrConnectWithoutUserInput[]
    createMany?: DailyCheckInCreateManyUserInputEnvelope
    connect?: DailyCheckInWhereUniqueInput | DailyCheckInWhereUniqueInput[]
  }

  export type UserRoleCreateNestedManyWithoutUserInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type OperationLogCreateNestedManyWithoutUserInput = {
    create?: XOR<OperationLogCreateWithoutUserInput, OperationLogUncheckedCreateWithoutUserInput> | OperationLogCreateWithoutUserInput[] | OperationLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OperationLogCreateOrConnectWithoutUserInput | OperationLogCreateOrConnectWithoutUserInput[]
    createMany?: OperationLogCreateManyUserInputEnvelope
    connect?: OperationLogWhereUniqueInput | OperationLogWhereUniqueInput[]
  }

  export type TopicUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<TopicCreateWithoutAuthorInput, TopicUncheckedCreateWithoutAuthorInput> | TopicCreateWithoutAuthorInput[] | TopicUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: TopicCreateOrConnectWithoutAuthorInput | TopicCreateOrConnectWithoutAuthorInput[]
    createMany?: TopicCreateManyAuthorInputEnvelope
    connect?: TopicWhereUniqueInput | TopicWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<ProjectCreateWithoutAuthorInput, ProjectUncheckedCreateWithoutAuthorInput> | ProjectCreateWithoutAuthorInput[] | ProjectUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutAuthorInput | ProjectCreateOrConnectWithoutAuthorInput[]
    createMany?: ProjectCreateManyAuthorInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type LikeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput> | LikeCreateWithoutUserInput[] | LikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutUserInput | LikeCreateOrConnectWithoutUserInput[]
    createMany?: LikeCreateManyUserInputEnvelope
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
  }

  export type BookmarkUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BookmarkCreateWithoutUserInput, BookmarkUncheckedCreateWithoutUserInput> | BookmarkCreateWithoutUserInput[] | BookmarkUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutUserInput | BookmarkCreateOrConnectWithoutUserInput[]
    createMany?: BookmarkCreateManyUserInputEnvelope
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
  }

  export type FollowUncheckedCreateNestedManyWithoutFollowerInput = {
    create?: XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput> | FollowCreateWithoutFollowerInput[] | FollowUncheckedCreateWithoutFollowerInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowerInput | FollowCreateOrConnectWithoutFollowerInput[]
    createMany?: FollowCreateManyFollowerInputEnvelope
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
  }

  export type FollowUncheckedCreateNestedManyWithoutFollowingInput = {
    create?: XOR<FollowCreateWithoutFollowingInput, FollowUncheckedCreateWithoutFollowingInput> | FollowCreateWithoutFollowingInput[] | FollowUncheckedCreateWithoutFollowingInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowingInput | FollowCreateOrConnectWithoutFollowingInput[]
    createMany?: FollowCreateManyFollowingInputEnvelope
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutActorInput = {
    create?: XOR<NotificationCreateWithoutActorInput, NotificationUncheckedCreateWithoutActorInput> | NotificationCreateWithoutActorInput[] | NotificationUncheckedCreateWithoutActorInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutActorInput | NotificationCreateOrConnectWithoutActorInput[]
    createMany?: NotificationCreateManyActorInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type UserActionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserActionCreateWithoutUserInput, UserActionUncheckedCreateWithoutUserInput> | UserActionCreateWithoutUserInput[] | UserActionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserActionCreateOrConnectWithoutUserInput | UserActionCreateOrConnectWithoutUserInput[]
    createMany?: UserActionCreateManyUserInputEnvelope
    connect?: UserActionWhereUniqueInput | UserActionWhereUniqueInput[]
  }

  export type TopicQuickActionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TopicQuickActionCreateWithoutUserInput, TopicQuickActionUncheckedCreateWithoutUserInput> | TopicQuickActionCreateWithoutUserInput[] | TopicQuickActionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TopicQuickActionCreateOrConnectWithoutUserInput | TopicQuickActionCreateOrConnectWithoutUserInput[]
    createMany?: TopicQuickActionCreateManyUserInputEnvelope
    connect?: TopicQuickActionWhereUniqueInput | TopicQuickActionWhereUniqueInput[]
  }

  export type TopicActionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TopicActionCreateWithoutUserInput, TopicActionUncheckedCreateWithoutUserInput> | TopicActionCreateWithoutUserInput[] | TopicActionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TopicActionCreateOrConnectWithoutUserInput | TopicActionCreateOrConnectWithoutUserInput[]
    createMany?: TopicActionCreateManyUserInputEnvelope
    connect?: TopicActionWhereUniqueInput | TopicActionWhereUniqueInput[]
  }

  export type ProjectActionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProjectActionCreateWithoutUserInput, ProjectActionUncheckedCreateWithoutUserInput> | ProjectActionCreateWithoutUserInput[] | ProjectActionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectActionCreateOrConnectWithoutUserInput | ProjectActionCreateOrConnectWithoutUserInput[]
    createMany?: ProjectActionCreateManyUserInputEnvelope
    connect?: ProjectActionWhereUniqueInput | ProjectActionWhereUniqueInput[]
  }

  export type ActivityUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<ActivityCreateWithoutAuthorInput, ActivityUncheckedCreateWithoutAuthorInput> | ActivityCreateWithoutAuthorInput[] | ActivityUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutAuthorInput | ActivityCreateOrConnectWithoutAuthorInput[]
    createMany?: ActivityCreateManyAuthorInputEnvelope
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type ActivityParticipantUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ActivityParticipantCreateWithoutUserInput, ActivityParticipantUncheckedCreateWithoutUserInput> | ActivityParticipantCreateWithoutUserInput[] | ActivityParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityParticipantCreateOrConnectWithoutUserInput | ActivityParticipantCreateOrConnectWithoutUserInput[]
    createMany?: ActivityParticipantCreateManyUserInputEnvelope
    connect?: ActivityParticipantWhereUniqueInput | ActivityParticipantWhereUniqueInput[]
  }

  export type ActivityLikeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ActivityLikeCreateWithoutUserInput, ActivityLikeUncheckedCreateWithoutUserInput> | ActivityLikeCreateWithoutUserInput[] | ActivityLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityLikeCreateOrConnectWithoutUserInput | ActivityLikeCreateOrConnectWithoutUserInput[]
    createMany?: ActivityLikeCreateManyUserInputEnvelope
    connect?: ActivityLikeWhereUniqueInput | ActivityLikeWhereUniqueInput[]
  }

  export type ActivityCommentUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<ActivityCommentCreateWithoutAuthorInput, ActivityCommentUncheckedCreateWithoutAuthorInput> | ActivityCommentCreateWithoutAuthorInput[] | ActivityCommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ActivityCommentCreateOrConnectWithoutAuthorInput | ActivityCommentCreateOrConnectWithoutAuthorInput[]
    createMany?: ActivityCommentCreateManyAuthorInputEnvelope
    connect?: ActivityCommentWhereUniqueInput | ActivityCommentWhereUniqueInput[]
  }

  export type UserBindingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserBindingCreateWithoutUserInput, UserBindingUncheckedCreateWithoutUserInput> | UserBindingCreateWithoutUserInput[] | UserBindingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBindingCreateOrConnectWithoutUserInput | UserBindingCreateOrConnectWithoutUserInput[]
    createMany?: UserBindingCreateManyUserInputEnvelope
    connect?: UserBindingWhereUniqueInput | UserBindingWhereUniqueInput[]
  }

  export type LoginLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LoginLogCreateWithoutUserInput, LoginLogUncheckedCreateWithoutUserInput> | LoginLogCreateWithoutUserInput[] | LoginLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LoginLogCreateOrConnectWithoutUserInput | LoginLogCreateOrConnectWithoutUserInput[]
    createMany?: LoginLogCreateManyUserInputEnvelope
    connect?: LoginLogWhereUniqueInput | LoginLogWhereUniqueInput[]
  }

  export type FeedbackUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type FeedbackReplyUncheckedCreateNestedManyWithoutAdminInput = {
    create?: XOR<FeedbackReplyCreateWithoutAdminInput, FeedbackReplyUncheckedCreateWithoutAdminInput> | FeedbackReplyCreateWithoutAdminInput[] | FeedbackReplyUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: FeedbackReplyCreateOrConnectWithoutAdminInput | FeedbackReplyCreateOrConnectWithoutAdminInput[]
    createMany?: FeedbackReplyCreateManyAdminInputEnvelope
    connect?: FeedbackReplyWhereUniqueInput | FeedbackReplyWhereUniqueInput[]
  }

  export type CreditLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CreditLogCreateWithoutUserInput, CreditLogUncheckedCreateWithoutUserInput> | CreditLogCreateWithoutUserInput[] | CreditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CreditLogCreateOrConnectWithoutUserInput | CreditLogCreateOrConnectWithoutUserInput[]
    createMany?: CreditLogCreateManyUserInputEnvelope
    connect?: CreditLogWhereUniqueInput | CreditLogWhereUniqueInput[]
  }

  export type UserBadgeRecordUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserBadgeRecordCreateWithoutUserInput, UserBadgeRecordUncheckedCreateWithoutUserInput> | UserBadgeRecordCreateWithoutUserInput[] | UserBadgeRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBadgeRecordCreateOrConnectWithoutUserInput | UserBadgeRecordCreateOrConnectWithoutUserInput[]
    createMany?: UserBadgeRecordCreateManyUserInputEnvelope
    connect?: UserBadgeRecordWhereUniqueInput | UserBadgeRecordWhereUniqueInput[]
  }

  export type DailyCheckInUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<DailyCheckInCreateWithoutUserInput, DailyCheckInUncheckedCreateWithoutUserInput> | DailyCheckInCreateWithoutUserInput[] | DailyCheckInUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DailyCheckInCreateOrConnectWithoutUserInput | DailyCheckInCreateOrConnectWithoutUserInput[]
    createMany?: DailyCheckInCreateManyUserInputEnvelope
    connect?: DailyCheckInWhereUniqueInput | DailyCheckInWhereUniqueInput[]
  }

  export type UserRoleUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type OperationLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OperationLogCreateWithoutUserInput, OperationLogUncheckedCreateWithoutUserInput> | OperationLogCreateWithoutUserInput[] | OperationLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OperationLogCreateOrConnectWithoutUserInput | OperationLogCreateOrConnectWithoutUserInput[]
    createMany?: OperationLogCreateManyUserInputEnvelope
    connect?: OperationLogWhereUniqueInput | OperationLogWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type TopicUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<TopicCreateWithoutAuthorInput, TopicUncheckedCreateWithoutAuthorInput> | TopicCreateWithoutAuthorInput[] | TopicUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: TopicCreateOrConnectWithoutAuthorInput | TopicCreateOrConnectWithoutAuthorInput[]
    upsert?: TopicUpsertWithWhereUniqueWithoutAuthorInput | TopicUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: TopicCreateManyAuthorInputEnvelope
    set?: TopicWhereUniqueInput | TopicWhereUniqueInput[]
    disconnect?: TopicWhereUniqueInput | TopicWhereUniqueInput[]
    delete?: TopicWhereUniqueInput | TopicWhereUniqueInput[]
    connect?: TopicWhereUniqueInput | TopicWhereUniqueInput[]
    update?: TopicUpdateWithWhereUniqueWithoutAuthorInput | TopicUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: TopicUpdateManyWithWhereWithoutAuthorInput | TopicUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: TopicScalarWhereInput | TopicScalarWhereInput[]
  }

  export type ProjectUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<ProjectCreateWithoutAuthorInput, ProjectUncheckedCreateWithoutAuthorInput> | ProjectCreateWithoutAuthorInput[] | ProjectUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutAuthorInput | ProjectCreateOrConnectWithoutAuthorInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutAuthorInput | ProjectUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: ProjectCreateManyAuthorInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutAuthorInput | ProjectUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutAuthorInput | ProjectUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutAuthorInput | CommentUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutAuthorInput | CommentUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutAuthorInput | CommentUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type LikeUpdateManyWithoutUserNestedInput = {
    create?: XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput> | LikeCreateWithoutUserInput[] | LikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutUserInput | LikeCreateOrConnectWithoutUserInput[]
    upsert?: LikeUpsertWithWhereUniqueWithoutUserInput | LikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LikeCreateManyUserInputEnvelope
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    update?: LikeUpdateWithWhereUniqueWithoutUserInput | LikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LikeUpdateManyWithWhereWithoutUserInput | LikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[]
  }

  export type BookmarkUpdateManyWithoutUserNestedInput = {
    create?: XOR<BookmarkCreateWithoutUserInput, BookmarkUncheckedCreateWithoutUserInput> | BookmarkCreateWithoutUserInput[] | BookmarkUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutUserInput | BookmarkCreateOrConnectWithoutUserInput[]
    upsert?: BookmarkUpsertWithWhereUniqueWithoutUserInput | BookmarkUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BookmarkCreateManyUserInputEnvelope
    set?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    disconnect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    delete?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    update?: BookmarkUpdateWithWhereUniqueWithoutUserInput | BookmarkUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BookmarkUpdateManyWithWhereWithoutUserInput | BookmarkUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BookmarkScalarWhereInput | BookmarkScalarWhereInput[]
  }

  export type FollowUpdateManyWithoutFollowerNestedInput = {
    create?: XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput> | FollowCreateWithoutFollowerInput[] | FollowUncheckedCreateWithoutFollowerInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowerInput | FollowCreateOrConnectWithoutFollowerInput[]
    upsert?: FollowUpsertWithWhereUniqueWithoutFollowerInput | FollowUpsertWithWhereUniqueWithoutFollowerInput[]
    createMany?: FollowCreateManyFollowerInputEnvelope
    set?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    disconnect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    delete?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    update?: FollowUpdateWithWhereUniqueWithoutFollowerInput | FollowUpdateWithWhereUniqueWithoutFollowerInput[]
    updateMany?: FollowUpdateManyWithWhereWithoutFollowerInput | FollowUpdateManyWithWhereWithoutFollowerInput[]
    deleteMany?: FollowScalarWhereInput | FollowScalarWhereInput[]
  }

  export type FollowUpdateManyWithoutFollowingNestedInput = {
    create?: XOR<FollowCreateWithoutFollowingInput, FollowUncheckedCreateWithoutFollowingInput> | FollowCreateWithoutFollowingInput[] | FollowUncheckedCreateWithoutFollowingInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowingInput | FollowCreateOrConnectWithoutFollowingInput[]
    upsert?: FollowUpsertWithWhereUniqueWithoutFollowingInput | FollowUpsertWithWhereUniqueWithoutFollowingInput[]
    createMany?: FollowCreateManyFollowingInputEnvelope
    set?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    disconnect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    delete?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    update?: FollowUpdateWithWhereUniqueWithoutFollowingInput | FollowUpdateWithWhereUniqueWithoutFollowingInput[]
    updateMany?: FollowUpdateManyWithWhereWithoutFollowingInput | FollowUpdateManyWithWhereWithoutFollowingInput[]
    deleteMany?: FollowScalarWhereInput | FollowScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutActorNestedInput = {
    create?: XOR<NotificationCreateWithoutActorInput, NotificationUncheckedCreateWithoutActorInput> | NotificationCreateWithoutActorInput[] | NotificationUncheckedCreateWithoutActorInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutActorInput | NotificationCreateOrConnectWithoutActorInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutActorInput | NotificationUpsertWithWhereUniqueWithoutActorInput[]
    createMany?: NotificationCreateManyActorInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutActorInput | NotificationUpdateWithWhereUniqueWithoutActorInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutActorInput | NotificationUpdateManyWithWhereWithoutActorInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type UserActionUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserActionCreateWithoutUserInput, UserActionUncheckedCreateWithoutUserInput> | UserActionCreateWithoutUserInput[] | UserActionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserActionCreateOrConnectWithoutUserInput | UserActionCreateOrConnectWithoutUserInput[]
    upsert?: UserActionUpsertWithWhereUniqueWithoutUserInput | UserActionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserActionCreateManyUserInputEnvelope
    set?: UserActionWhereUniqueInput | UserActionWhereUniqueInput[]
    disconnect?: UserActionWhereUniqueInput | UserActionWhereUniqueInput[]
    delete?: UserActionWhereUniqueInput | UserActionWhereUniqueInput[]
    connect?: UserActionWhereUniqueInput | UserActionWhereUniqueInput[]
    update?: UserActionUpdateWithWhereUniqueWithoutUserInput | UserActionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserActionUpdateManyWithWhereWithoutUserInput | UserActionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserActionScalarWhereInput | UserActionScalarWhereInput[]
  }

  export type TopicQuickActionUpdateManyWithoutUserNestedInput = {
    create?: XOR<TopicQuickActionCreateWithoutUserInput, TopicQuickActionUncheckedCreateWithoutUserInput> | TopicQuickActionCreateWithoutUserInput[] | TopicQuickActionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TopicQuickActionCreateOrConnectWithoutUserInput | TopicQuickActionCreateOrConnectWithoutUserInput[]
    upsert?: TopicQuickActionUpsertWithWhereUniqueWithoutUserInput | TopicQuickActionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TopicQuickActionCreateManyUserInputEnvelope
    set?: TopicQuickActionWhereUniqueInput | TopicQuickActionWhereUniqueInput[]
    disconnect?: TopicQuickActionWhereUniqueInput | TopicQuickActionWhereUniqueInput[]
    delete?: TopicQuickActionWhereUniqueInput | TopicQuickActionWhereUniqueInput[]
    connect?: TopicQuickActionWhereUniqueInput | TopicQuickActionWhereUniqueInput[]
    update?: TopicQuickActionUpdateWithWhereUniqueWithoutUserInput | TopicQuickActionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TopicQuickActionUpdateManyWithWhereWithoutUserInput | TopicQuickActionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TopicQuickActionScalarWhereInput | TopicQuickActionScalarWhereInput[]
  }

  export type TopicActionUpdateManyWithoutUserNestedInput = {
    create?: XOR<TopicActionCreateWithoutUserInput, TopicActionUncheckedCreateWithoutUserInput> | TopicActionCreateWithoutUserInput[] | TopicActionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TopicActionCreateOrConnectWithoutUserInput | TopicActionCreateOrConnectWithoutUserInput[]
    upsert?: TopicActionUpsertWithWhereUniqueWithoutUserInput | TopicActionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TopicActionCreateManyUserInputEnvelope
    set?: TopicActionWhereUniqueInput | TopicActionWhereUniqueInput[]
    disconnect?: TopicActionWhereUniqueInput | TopicActionWhereUniqueInput[]
    delete?: TopicActionWhereUniqueInput | TopicActionWhereUniqueInput[]
    connect?: TopicActionWhereUniqueInput | TopicActionWhereUniqueInput[]
    update?: TopicActionUpdateWithWhereUniqueWithoutUserInput | TopicActionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TopicActionUpdateManyWithWhereWithoutUserInput | TopicActionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TopicActionScalarWhereInput | TopicActionScalarWhereInput[]
  }

  export type ProjectActionUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProjectActionCreateWithoutUserInput, ProjectActionUncheckedCreateWithoutUserInput> | ProjectActionCreateWithoutUserInput[] | ProjectActionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectActionCreateOrConnectWithoutUserInput | ProjectActionCreateOrConnectWithoutUserInput[]
    upsert?: ProjectActionUpsertWithWhereUniqueWithoutUserInput | ProjectActionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProjectActionCreateManyUserInputEnvelope
    set?: ProjectActionWhereUniqueInput | ProjectActionWhereUniqueInput[]
    disconnect?: ProjectActionWhereUniqueInput | ProjectActionWhereUniqueInput[]
    delete?: ProjectActionWhereUniqueInput | ProjectActionWhereUniqueInput[]
    connect?: ProjectActionWhereUniqueInput | ProjectActionWhereUniqueInput[]
    update?: ProjectActionUpdateWithWhereUniqueWithoutUserInput | ProjectActionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProjectActionUpdateManyWithWhereWithoutUserInput | ProjectActionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProjectActionScalarWhereInput | ProjectActionScalarWhereInput[]
  }

  export type ActivityUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<ActivityCreateWithoutAuthorInput, ActivityUncheckedCreateWithoutAuthorInput> | ActivityCreateWithoutAuthorInput[] | ActivityUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutAuthorInput | ActivityCreateOrConnectWithoutAuthorInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutAuthorInput | ActivityUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: ActivityCreateManyAuthorInputEnvelope
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutAuthorInput | ActivityUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutAuthorInput | ActivityUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type ActivityParticipantUpdateManyWithoutUserNestedInput = {
    create?: XOR<ActivityParticipantCreateWithoutUserInput, ActivityParticipantUncheckedCreateWithoutUserInput> | ActivityParticipantCreateWithoutUserInput[] | ActivityParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityParticipantCreateOrConnectWithoutUserInput | ActivityParticipantCreateOrConnectWithoutUserInput[]
    upsert?: ActivityParticipantUpsertWithWhereUniqueWithoutUserInput | ActivityParticipantUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ActivityParticipantCreateManyUserInputEnvelope
    set?: ActivityParticipantWhereUniqueInput | ActivityParticipantWhereUniqueInput[]
    disconnect?: ActivityParticipantWhereUniqueInput | ActivityParticipantWhereUniqueInput[]
    delete?: ActivityParticipantWhereUniqueInput | ActivityParticipantWhereUniqueInput[]
    connect?: ActivityParticipantWhereUniqueInput | ActivityParticipantWhereUniqueInput[]
    update?: ActivityParticipantUpdateWithWhereUniqueWithoutUserInput | ActivityParticipantUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ActivityParticipantUpdateManyWithWhereWithoutUserInput | ActivityParticipantUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ActivityParticipantScalarWhereInput | ActivityParticipantScalarWhereInput[]
  }

  export type ActivityLikeUpdateManyWithoutUserNestedInput = {
    create?: XOR<ActivityLikeCreateWithoutUserInput, ActivityLikeUncheckedCreateWithoutUserInput> | ActivityLikeCreateWithoutUserInput[] | ActivityLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityLikeCreateOrConnectWithoutUserInput | ActivityLikeCreateOrConnectWithoutUserInput[]
    upsert?: ActivityLikeUpsertWithWhereUniqueWithoutUserInput | ActivityLikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ActivityLikeCreateManyUserInputEnvelope
    set?: ActivityLikeWhereUniqueInput | ActivityLikeWhereUniqueInput[]
    disconnect?: ActivityLikeWhereUniqueInput | ActivityLikeWhereUniqueInput[]
    delete?: ActivityLikeWhereUniqueInput | ActivityLikeWhereUniqueInput[]
    connect?: ActivityLikeWhereUniqueInput | ActivityLikeWhereUniqueInput[]
    update?: ActivityLikeUpdateWithWhereUniqueWithoutUserInput | ActivityLikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ActivityLikeUpdateManyWithWhereWithoutUserInput | ActivityLikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ActivityLikeScalarWhereInput | ActivityLikeScalarWhereInput[]
  }

  export type ActivityCommentUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<ActivityCommentCreateWithoutAuthorInput, ActivityCommentUncheckedCreateWithoutAuthorInput> | ActivityCommentCreateWithoutAuthorInput[] | ActivityCommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ActivityCommentCreateOrConnectWithoutAuthorInput | ActivityCommentCreateOrConnectWithoutAuthorInput[]
    upsert?: ActivityCommentUpsertWithWhereUniqueWithoutAuthorInput | ActivityCommentUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: ActivityCommentCreateManyAuthorInputEnvelope
    set?: ActivityCommentWhereUniqueInput | ActivityCommentWhereUniqueInput[]
    disconnect?: ActivityCommentWhereUniqueInput | ActivityCommentWhereUniqueInput[]
    delete?: ActivityCommentWhereUniqueInput | ActivityCommentWhereUniqueInput[]
    connect?: ActivityCommentWhereUniqueInput | ActivityCommentWhereUniqueInput[]
    update?: ActivityCommentUpdateWithWhereUniqueWithoutAuthorInput | ActivityCommentUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: ActivityCommentUpdateManyWithWhereWithoutAuthorInput | ActivityCommentUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: ActivityCommentScalarWhereInput | ActivityCommentScalarWhereInput[]
  }

  export type UserBindingUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserBindingCreateWithoutUserInput, UserBindingUncheckedCreateWithoutUserInput> | UserBindingCreateWithoutUserInput[] | UserBindingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBindingCreateOrConnectWithoutUserInput | UserBindingCreateOrConnectWithoutUserInput[]
    upsert?: UserBindingUpsertWithWhereUniqueWithoutUserInput | UserBindingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserBindingCreateManyUserInputEnvelope
    set?: UserBindingWhereUniqueInput | UserBindingWhereUniqueInput[]
    disconnect?: UserBindingWhereUniqueInput | UserBindingWhereUniqueInput[]
    delete?: UserBindingWhereUniqueInput | UserBindingWhereUniqueInput[]
    connect?: UserBindingWhereUniqueInput | UserBindingWhereUniqueInput[]
    update?: UserBindingUpdateWithWhereUniqueWithoutUserInput | UserBindingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserBindingUpdateManyWithWhereWithoutUserInput | UserBindingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserBindingScalarWhereInput | UserBindingScalarWhereInput[]
  }

  export type LoginLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<LoginLogCreateWithoutUserInput, LoginLogUncheckedCreateWithoutUserInput> | LoginLogCreateWithoutUserInput[] | LoginLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LoginLogCreateOrConnectWithoutUserInput | LoginLogCreateOrConnectWithoutUserInput[]
    upsert?: LoginLogUpsertWithWhereUniqueWithoutUserInput | LoginLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LoginLogCreateManyUserInputEnvelope
    set?: LoginLogWhereUniqueInput | LoginLogWhereUniqueInput[]
    disconnect?: LoginLogWhereUniqueInput | LoginLogWhereUniqueInput[]
    delete?: LoginLogWhereUniqueInput | LoginLogWhereUniqueInput[]
    connect?: LoginLogWhereUniqueInput | LoginLogWhereUniqueInput[]
    update?: LoginLogUpdateWithWhereUniqueWithoutUserInput | LoginLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LoginLogUpdateManyWithWhereWithoutUserInput | LoginLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LoginLogScalarWhereInput | LoginLogScalarWhereInput[]
  }

  export type FeedbackUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutUserInput | FeedbackUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutUserInput | FeedbackUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutUserInput | FeedbackUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type FeedbackReplyUpdateManyWithoutAdminNestedInput = {
    create?: XOR<FeedbackReplyCreateWithoutAdminInput, FeedbackReplyUncheckedCreateWithoutAdminInput> | FeedbackReplyCreateWithoutAdminInput[] | FeedbackReplyUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: FeedbackReplyCreateOrConnectWithoutAdminInput | FeedbackReplyCreateOrConnectWithoutAdminInput[]
    upsert?: FeedbackReplyUpsertWithWhereUniqueWithoutAdminInput | FeedbackReplyUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: FeedbackReplyCreateManyAdminInputEnvelope
    set?: FeedbackReplyWhereUniqueInput | FeedbackReplyWhereUniqueInput[]
    disconnect?: FeedbackReplyWhereUniqueInput | FeedbackReplyWhereUniqueInput[]
    delete?: FeedbackReplyWhereUniqueInput | FeedbackReplyWhereUniqueInput[]
    connect?: FeedbackReplyWhereUniqueInput | FeedbackReplyWhereUniqueInput[]
    update?: FeedbackReplyUpdateWithWhereUniqueWithoutAdminInput | FeedbackReplyUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: FeedbackReplyUpdateManyWithWhereWithoutAdminInput | FeedbackReplyUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: FeedbackReplyScalarWhereInput | FeedbackReplyScalarWhereInput[]
  }

  export type CreditLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<CreditLogCreateWithoutUserInput, CreditLogUncheckedCreateWithoutUserInput> | CreditLogCreateWithoutUserInput[] | CreditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CreditLogCreateOrConnectWithoutUserInput | CreditLogCreateOrConnectWithoutUserInput[]
    upsert?: CreditLogUpsertWithWhereUniqueWithoutUserInput | CreditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CreditLogCreateManyUserInputEnvelope
    set?: CreditLogWhereUniqueInput | CreditLogWhereUniqueInput[]
    disconnect?: CreditLogWhereUniqueInput | CreditLogWhereUniqueInput[]
    delete?: CreditLogWhereUniqueInput | CreditLogWhereUniqueInput[]
    connect?: CreditLogWhereUniqueInput | CreditLogWhereUniqueInput[]
    update?: CreditLogUpdateWithWhereUniqueWithoutUserInput | CreditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CreditLogUpdateManyWithWhereWithoutUserInput | CreditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CreditLogScalarWhereInput | CreditLogScalarWhereInput[]
  }

  export type UserBadgeRecordUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserBadgeRecordCreateWithoutUserInput, UserBadgeRecordUncheckedCreateWithoutUserInput> | UserBadgeRecordCreateWithoutUserInput[] | UserBadgeRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBadgeRecordCreateOrConnectWithoutUserInput | UserBadgeRecordCreateOrConnectWithoutUserInput[]
    upsert?: UserBadgeRecordUpsertWithWhereUniqueWithoutUserInput | UserBadgeRecordUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserBadgeRecordCreateManyUserInputEnvelope
    set?: UserBadgeRecordWhereUniqueInput | UserBadgeRecordWhereUniqueInput[]
    disconnect?: UserBadgeRecordWhereUniqueInput | UserBadgeRecordWhereUniqueInput[]
    delete?: UserBadgeRecordWhereUniqueInput | UserBadgeRecordWhereUniqueInput[]
    connect?: UserBadgeRecordWhereUniqueInput | UserBadgeRecordWhereUniqueInput[]
    update?: UserBadgeRecordUpdateWithWhereUniqueWithoutUserInput | UserBadgeRecordUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserBadgeRecordUpdateManyWithWhereWithoutUserInput | UserBadgeRecordUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserBadgeRecordScalarWhereInput | UserBadgeRecordScalarWhereInput[]
  }

  export type DailyCheckInUpdateManyWithoutUserNestedInput = {
    create?: XOR<DailyCheckInCreateWithoutUserInput, DailyCheckInUncheckedCreateWithoutUserInput> | DailyCheckInCreateWithoutUserInput[] | DailyCheckInUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DailyCheckInCreateOrConnectWithoutUserInput | DailyCheckInCreateOrConnectWithoutUserInput[]
    upsert?: DailyCheckInUpsertWithWhereUniqueWithoutUserInput | DailyCheckInUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DailyCheckInCreateManyUserInputEnvelope
    set?: DailyCheckInWhereUniqueInput | DailyCheckInWhereUniqueInput[]
    disconnect?: DailyCheckInWhereUniqueInput | DailyCheckInWhereUniqueInput[]
    delete?: DailyCheckInWhereUniqueInput | DailyCheckInWhereUniqueInput[]
    connect?: DailyCheckInWhereUniqueInput | DailyCheckInWhereUniqueInput[]
    update?: DailyCheckInUpdateWithWhereUniqueWithoutUserInput | DailyCheckInUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DailyCheckInUpdateManyWithWhereWithoutUserInput | DailyCheckInUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DailyCheckInScalarWhereInput | DailyCheckInScalarWhereInput[]
  }

  export type UserRoleUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutUserInput | UserRoleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutUserInput | UserRoleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutUserInput | UserRoleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type OperationLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<OperationLogCreateWithoutUserInput, OperationLogUncheckedCreateWithoutUserInput> | OperationLogCreateWithoutUserInput[] | OperationLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OperationLogCreateOrConnectWithoutUserInput | OperationLogCreateOrConnectWithoutUserInput[]
    upsert?: OperationLogUpsertWithWhereUniqueWithoutUserInput | OperationLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OperationLogCreateManyUserInputEnvelope
    set?: OperationLogWhereUniqueInput | OperationLogWhereUniqueInput[]
    disconnect?: OperationLogWhereUniqueInput | OperationLogWhereUniqueInput[]
    delete?: OperationLogWhereUniqueInput | OperationLogWhereUniqueInput[]
    connect?: OperationLogWhereUniqueInput | OperationLogWhereUniqueInput[]
    update?: OperationLogUpdateWithWhereUniqueWithoutUserInput | OperationLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OperationLogUpdateManyWithWhereWithoutUserInput | OperationLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OperationLogScalarWhereInput | OperationLogScalarWhereInput[]
  }

  export type TopicUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<TopicCreateWithoutAuthorInput, TopicUncheckedCreateWithoutAuthorInput> | TopicCreateWithoutAuthorInput[] | TopicUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: TopicCreateOrConnectWithoutAuthorInput | TopicCreateOrConnectWithoutAuthorInput[]
    upsert?: TopicUpsertWithWhereUniqueWithoutAuthorInput | TopicUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: TopicCreateManyAuthorInputEnvelope
    set?: TopicWhereUniqueInput | TopicWhereUniqueInput[]
    disconnect?: TopicWhereUniqueInput | TopicWhereUniqueInput[]
    delete?: TopicWhereUniqueInput | TopicWhereUniqueInput[]
    connect?: TopicWhereUniqueInput | TopicWhereUniqueInput[]
    update?: TopicUpdateWithWhereUniqueWithoutAuthorInput | TopicUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: TopicUpdateManyWithWhereWithoutAuthorInput | TopicUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: TopicScalarWhereInput | TopicScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<ProjectCreateWithoutAuthorInput, ProjectUncheckedCreateWithoutAuthorInput> | ProjectCreateWithoutAuthorInput[] | ProjectUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutAuthorInput | ProjectCreateOrConnectWithoutAuthorInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutAuthorInput | ProjectUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: ProjectCreateManyAuthorInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutAuthorInput | ProjectUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutAuthorInput | ProjectUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutAuthorInput | CommentUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutAuthorInput | CommentUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutAuthorInput | CommentUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type LikeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput> | LikeCreateWithoutUserInput[] | LikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutUserInput | LikeCreateOrConnectWithoutUserInput[]
    upsert?: LikeUpsertWithWhereUniqueWithoutUserInput | LikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LikeCreateManyUserInputEnvelope
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    update?: LikeUpdateWithWhereUniqueWithoutUserInput | LikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LikeUpdateManyWithWhereWithoutUserInput | LikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[]
  }

  export type BookmarkUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BookmarkCreateWithoutUserInput, BookmarkUncheckedCreateWithoutUserInput> | BookmarkCreateWithoutUserInput[] | BookmarkUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutUserInput | BookmarkCreateOrConnectWithoutUserInput[]
    upsert?: BookmarkUpsertWithWhereUniqueWithoutUserInput | BookmarkUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BookmarkCreateManyUserInputEnvelope
    set?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    disconnect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    delete?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    update?: BookmarkUpdateWithWhereUniqueWithoutUserInput | BookmarkUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BookmarkUpdateManyWithWhereWithoutUserInput | BookmarkUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BookmarkScalarWhereInput | BookmarkScalarWhereInput[]
  }

  export type FollowUncheckedUpdateManyWithoutFollowerNestedInput = {
    create?: XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput> | FollowCreateWithoutFollowerInput[] | FollowUncheckedCreateWithoutFollowerInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowerInput | FollowCreateOrConnectWithoutFollowerInput[]
    upsert?: FollowUpsertWithWhereUniqueWithoutFollowerInput | FollowUpsertWithWhereUniqueWithoutFollowerInput[]
    createMany?: FollowCreateManyFollowerInputEnvelope
    set?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    disconnect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    delete?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    update?: FollowUpdateWithWhereUniqueWithoutFollowerInput | FollowUpdateWithWhereUniqueWithoutFollowerInput[]
    updateMany?: FollowUpdateManyWithWhereWithoutFollowerInput | FollowUpdateManyWithWhereWithoutFollowerInput[]
    deleteMany?: FollowScalarWhereInput | FollowScalarWhereInput[]
  }

  export type FollowUncheckedUpdateManyWithoutFollowingNestedInput = {
    create?: XOR<FollowCreateWithoutFollowingInput, FollowUncheckedCreateWithoutFollowingInput> | FollowCreateWithoutFollowingInput[] | FollowUncheckedCreateWithoutFollowingInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowingInput | FollowCreateOrConnectWithoutFollowingInput[]
    upsert?: FollowUpsertWithWhereUniqueWithoutFollowingInput | FollowUpsertWithWhereUniqueWithoutFollowingInput[]
    createMany?: FollowCreateManyFollowingInputEnvelope
    set?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    disconnect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    delete?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    update?: FollowUpdateWithWhereUniqueWithoutFollowingInput | FollowUpdateWithWhereUniqueWithoutFollowingInput[]
    updateMany?: FollowUpdateManyWithWhereWithoutFollowingInput | FollowUpdateManyWithWhereWithoutFollowingInput[]
    deleteMany?: FollowScalarWhereInput | FollowScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutActorNestedInput = {
    create?: XOR<NotificationCreateWithoutActorInput, NotificationUncheckedCreateWithoutActorInput> | NotificationCreateWithoutActorInput[] | NotificationUncheckedCreateWithoutActorInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutActorInput | NotificationCreateOrConnectWithoutActorInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutActorInput | NotificationUpsertWithWhereUniqueWithoutActorInput[]
    createMany?: NotificationCreateManyActorInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutActorInput | NotificationUpdateWithWhereUniqueWithoutActorInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutActorInput | NotificationUpdateManyWithWhereWithoutActorInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type UserActionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserActionCreateWithoutUserInput, UserActionUncheckedCreateWithoutUserInput> | UserActionCreateWithoutUserInput[] | UserActionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserActionCreateOrConnectWithoutUserInput | UserActionCreateOrConnectWithoutUserInput[]
    upsert?: UserActionUpsertWithWhereUniqueWithoutUserInput | UserActionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserActionCreateManyUserInputEnvelope
    set?: UserActionWhereUniqueInput | UserActionWhereUniqueInput[]
    disconnect?: UserActionWhereUniqueInput | UserActionWhereUniqueInput[]
    delete?: UserActionWhereUniqueInput | UserActionWhereUniqueInput[]
    connect?: UserActionWhereUniqueInput | UserActionWhereUniqueInput[]
    update?: UserActionUpdateWithWhereUniqueWithoutUserInput | UserActionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserActionUpdateManyWithWhereWithoutUserInput | UserActionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserActionScalarWhereInput | UserActionScalarWhereInput[]
  }

  export type TopicQuickActionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TopicQuickActionCreateWithoutUserInput, TopicQuickActionUncheckedCreateWithoutUserInput> | TopicQuickActionCreateWithoutUserInput[] | TopicQuickActionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TopicQuickActionCreateOrConnectWithoutUserInput | TopicQuickActionCreateOrConnectWithoutUserInput[]
    upsert?: TopicQuickActionUpsertWithWhereUniqueWithoutUserInput | TopicQuickActionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TopicQuickActionCreateManyUserInputEnvelope
    set?: TopicQuickActionWhereUniqueInput | TopicQuickActionWhereUniqueInput[]
    disconnect?: TopicQuickActionWhereUniqueInput | TopicQuickActionWhereUniqueInput[]
    delete?: TopicQuickActionWhereUniqueInput | TopicQuickActionWhereUniqueInput[]
    connect?: TopicQuickActionWhereUniqueInput | TopicQuickActionWhereUniqueInput[]
    update?: TopicQuickActionUpdateWithWhereUniqueWithoutUserInput | TopicQuickActionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TopicQuickActionUpdateManyWithWhereWithoutUserInput | TopicQuickActionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TopicQuickActionScalarWhereInput | TopicQuickActionScalarWhereInput[]
  }

  export type TopicActionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TopicActionCreateWithoutUserInput, TopicActionUncheckedCreateWithoutUserInput> | TopicActionCreateWithoutUserInput[] | TopicActionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TopicActionCreateOrConnectWithoutUserInput | TopicActionCreateOrConnectWithoutUserInput[]
    upsert?: TopicActionUpsertWithWhereUniqueWithoutUserInput | TopicActionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TopicActionCreateManyUserInputEnvelope
    set?: TopicActionWhereUniqueInput | TopicActionWhereUniqueInput[]
    disconnect?: TopicActionWhereUniqueInput | TopicActionWhereUniqueInput[]
    delete?: TopicActionWhereUniqueInput | TopicActionWhereUniqueInput[]
    connect?: TopicActionWhereUniqueInput | TopicActionWhereUniqueInput[]
    update?: TopicActionUpdateWithWhereUniqueWithoutUserInput | TopicActionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TopicActionUpdateManyWithWhereWithoutUserInput | TopicActionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TopicActionScalarWhereInput | TopicActionScalarWhereInput[]
  }

  export type ProjectActionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProjectActionCreateWithoutUserInput, ProjectActionUncheckedCreateWithoutUserInput> | ProjectActionCreateWithoutUserInput[] | ProjectActionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectActionCreateOrConnectWithoutUserInput | ProjectActionCreateOrConnectWithoutUserInput[]
    upsert?: ProjectActionUpsertWithWhereUniqueWithoutUserInput | ProjectActionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProjectActionCreateManyUserInputEnvelope
    set?: ProjectActionWhereUniqueInput | ProjectActionWhereUniqueInput[]
    disconnect?: ProjectActionWhereUniqueInput | ProjectActionWhereUniqueInput[]
    delete?: ProjectActionWhereUniqueInput | ProjectActionWhereUniqueInput[]
    connect?: ProjectActionWhereUniqueInput | ProjectActionWhereUniqueInput[]
    update?: ProjectActionUpdateWithWhereUniqueWithoutUserInput | ProjectActionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProjectActionUpdateManyWithWhereWithoutUserInput | ProjectActionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProjectActionScalarWhereInput | ProjectActionScalarWhereInput[]
  }

  export type ActivityUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<ActivityCreateWithoutAuthorInput, ActivityUncheckedCreateWithoutAuthorInput> | ActivityCreateWithoutAuthorInput[] | ActivityUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutAuthorInput | ActivityCreateOrConnectWithoutAuthorInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutAuthorInput | ActivityUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: ActivityCreateManyAuthorInputEnvelope
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutAuthorInput | ActivityUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutAuthorInput | ActivityUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type ActivityParticipantUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ActivityParticipantCreateWithoutUserInput, ActivityParticipantUncheckedCreateWithoutUserInput> | ActivityParticipantCreateWithoutUserInput[] | ActivityParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityParticipantCreateOrConnectWithoutUserInput | ActivityParticipantCreateOrConnectWithoutUserInput[]
    upsert?: ActivityParticipantUpsertWithWhereUniqueWithoutUserInput | ActivityParticipantUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ActivityParticipantCreateManyUserInputEnvelope
    set?: ActivityParticipantWhereUniqueInput | ActivityParticipantWhereUniqueInput[]
    disconnect?: ActivityParticipantWhereUniqueInput | ActivityParticipantWhereUniqueInput[]
    delete?: ActivityParticipantWhereUniqueInput | ActivityParticipantWhereUniqueInput[]
    connect?: ActivityParticipantWhereUniqueInput | ActivityParticipantWhereUniqueInput[]
    update?: ActivityParticipantUpdateWithWhereUniqueWithoutUserInput | ActivityParticipantUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ActivityParticipantUpdateManyWithWhereWithoutUserInput | ActivityParticipantUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ActivityParticipantScalarWhereInput | ActivityParticipantScalarWhereInput[]
  }

  export type ActivityLikeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ActivityLikeCreateWithoutUserInput, ActivityLikeUncheckedCreateWithoutUserInput> | ActivityLikeCreateWithoutUserInput[] | ActivityLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityLikeCreateOrConnectWithoutUserInput | ActivityLikeCreateOrConnectWithoutUserInput[]
    upsert?: ActivityLikeUpsertWithWhereUniqueWithoutUserInput | ActivityLikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ActivityLikeCreateManyUserInputEnvelope
    set?: ActivityLikeWhereUniqueInput | ActivityLikeWhereUniqueInput[]
    disconnect?: ActivityLikeWhereUniqueInput | ActivityLikeWhereUniqueInput[]
    delete?: ActivityLikeWhereUniqueInput | ActivityLikeWhereUniqueInput[]
    connect?: ActivityLikeWhereUniqueInput | ActivityLikeWhereUniqueInput[]
    update?: ActivityLikeUpdateWithWhereUniqueWithoutUserInput | ActivityLikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ActivityLikeUpdateManyWithWhereWithoutUserInput | ActivityLikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ActivityLikeScalarWhereInput | ActivityLikeScalarWhereInput[]
  }

  export type ActivityCommentUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<ActivityCommentCreateWithoutAuthorInput, ActivityCommentUncheckedCreateWithoutAuthorInput> | ActivityCommentCreateWithoutAuthorInput[] | ActivityCommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ActivityCommentCreateOrConnectWithoutAuthorInput | ActivityCommentCreateOrConnectWithoutAuthorInput[]
    upsert?: ActivityCommentUpsertWithWhereUniqueWithoutAuthorInput | ActivityCommentUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: ActivityCommentCreateManyAuthorInputEnvelope
    set?: ActivityCommentWhereUniqueInput | ActivityCommentWhereUniqueInput[]
    disconnect?: ActivityCommentWhereUniqueInput | ActivityCommentWhereUniqueInput[]
    delete?: ActivityCommentWhereUniqueInput | ActivityCommentWhereUniqueInput[]
    connect?: ActivityCommentWhereUniqueInput | ActivityCommentWhereUniqueInput[]
    update?: ActivityCommentUpdateWithWhereUniqueWithoutAuthorInput | ActivityCommentUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: ActivityCommentUpdateManyWithWhereWithoutAuthorInput | ActivityCommentUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: ActivityCommentScalarWhereInput | ActivityCommentScalarWhereInput[]
  }

  export type UserBindingUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserBindingCreateWithoutUserInput, UserBindingUncheckedCreateWithoutUserInput> | UserBindingCreateWithoutUserInput[] | UserBindingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBindingCreateOrConnectWithoutUserInput | UserBindingCreateOrConnectWithoutUserInput[]
    upsert?: UserBindingUpsertWithWhereUniqueWithoutUserInput | UserBindingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserBindingCreateManyUserInputEnvelope
    set?: UserBindingWhereUniqueInput | UserBindingWhereUniqueInput[]
    disconnect?: UserBindingWhereUniqueInput | UserBindingWhereUniqueInput[]
    delete?: UserBindingWhereUniqueInput | UserBindingWhereUniqueInput[]
    connect?: UserBindingWhereUniqueInput | UserBindingWhereUniqueInput[]
    update?: UserBindingUpdateWithWhereUniqueWithoutUserInput | UserBindingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserBindingUpdateManyWithWhereWithoutUserInput | UserBindingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserBindingScalarWhereInput | UserBindingScalarWhereInput[]
  }

  export type LoginLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LoginLogCreateWithoutUserInput, LoginLogUncheckedCreateWithoutUserInput> | LoginLogCreateWithoutUserInput[] | LoginLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LoginLogCreateOrConnectWithoutUserInput | LoginLogCreateOrConnectWithoutUserInput[]
    upsert?: LoginLogUpsertWithWhereUniqueWithoutUserInput | LoginLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LoginLogCreateManyUserInputEnvelope
    set?: LoginLogWhereUniqueInput | LoginLogWhereUniqueInput[]
    disconnect?: LoginLogWhereUniqueInput | LoginLogWhereUniqueInput[]
    delete?: LoginLogWhereUniqueInput | LoginLogWhereUniqueInput[]
    connect?: LoginLogWhereUniqueInput | LoginLogWhereUniqueInput[]
    update?: LoginLogUpdateWithWhereUniqueWithoutUserInput | LoginLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LoginLogUpdateManyWithWhereWithoutUserInput | LoginLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LoginLogScalarWhereInput | LoginLogScalarWhereInput[]
  }

  export type FeedbackUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutUserInput | FeedbackUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutUserInput | FeedbackUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutUserInput | FeedbackUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type FeedbackReplyUncheckedUpdateManyWithoutAdminNestedInput = {
    create?: XOR<FeedbackReplyCreateWithoutAdminInput, FeedbackReplyUncheckedCreateWithoutAdminInput> | FeedbackReplyCreateWithoutAdminInput[] | FeedbackReplyUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: FeedbackReplyCreateOrConnectWithoutAdminInput | FeedbackReplyCreateOrConnectWithoutAdminInput[]
    upsert?: FeedbackReplyUpsertWithWhereUniqueWithoutAdminInput | FeedbackReplyUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: FeedbackReplyCreateManyAdminInputEnvelope
    set?: FeedbackReplyWhereUniqueInput | FeedbackReplyWhereUniqueInput[]
    disconnect?: FeedbackReplyWhereUniqueInput | FeedbackReplyWhereUniqueInput[]
    delete?: FeedbackReplyWhereUniqueInput | FeedbackReplyWhereUniqueInput[]
    connect?: FeedbackReplyWhereUniqueInput | FeedbackReplyWhereUniqueInput[]
    update?: FeedbackReplyUpdateWithWhereUniqueWithoutAdminInput | FeedbackReplyUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: FeedbackReplyUpdateManyWithWhereWithoutAdminInput | FeedbackReplyUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: FeedbackReplyScalarWhereInput | FeedbackReplyScalarWhereInput[]
  }

  export type CreditLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CreditLogCreateWithoutUserInput, CreditLogUncheckedCreateWithoutUserInput> | CreditLogCreateWithoutUserInput[] | CreditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CreditLogCreateOrConnectWithoutUserInput | CreditLogCreateOrConnectWithoutUserInput[]
    upsert?: CreditLogUpsertWithWhereUniqueWithoutUserInput | CreditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CreditLogCreateManyUserInputEnvelope
    set?: CreditLogWhereUniqueInput | CreditLogWhereUniqueInput[]
    disconnect?: CreditLogWhereUniqueInput | CreditLogWhereUniqueInput[]
    delete?: CreditLogWhereUniqueInput | CreditLogWhereUniqueInput[]
    connect?: CreditLogWhereUniqueInput | CreditLogWhereUniqueInput[]
    update?: CreditLogUpdateWithWhereUniqueWithoutUserInput | CreditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CreditLogUpdateManyWithWhereWithoutUserInput | CreditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CreditLogScalarWhereInput | CreditLogScalarWhereInput[]
  }

  export type UserBadgeRecordUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserBadgeRecordCreateWithoutUserInput, UserBadgeRecordUncheckedCreateWithoutUserInput> | UserBadgeRecordCreateWithoutUserInput[] | UserBadgeRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBadgeRecordCreateOrConnectWithoutUserInput | UserBadgeRecordCreateOrConnectWithoutUserInput[]
    upsert?: UserBadgeRecordUpsertWithWhereUniqueWithoutUserInput | UserBadgeRecordUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserBadgeRecordCreateManyUserInputEnvelope
    set?: UserBadgeRecordWhereUniqueInput | UserBadgeRecordWhereUniqueInput[]
    disconnect?: UserBadgeRecordWhereUniqueInput | UserBadgeRecordWhereUniqueInput[]
    delete?: UserBadgeRecordWhereUniqueInput | UserBadgeRecordWhereUniqueInput[]
    connect?: UserBadgeRecordWhereUniqueInput | UserBadgeRecordWhereUniqueInput[]
    update?: UserBadgeRecordUpdateWithWhereUniqueWithoutUserInput | UserBadgeRecordUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserBadgeRecordUpdateManyWithWhereWithoutUserInput | UserBadgeRecordUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserBadgeRecordScalarWhereInput | UserBadgeRecordScalarWhereInput[]
  }

  export type DailyCheckInUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<DailyCheckInCreateWithoutUserInput, DailyCheckInUncheckedCreateWithoutUserInput> | DailyCheckInCreateWithoutUserInput[] | DailyCheckInUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DailyCheckInCreateOrConnectWithoutUserInput | DailyCheckInCreateOrConnectWithoutUserInput[]
    upsert?: DailyCheckInUpsertWithWhereUniqueWithoutUserInput | DailyCheckInUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DailyCheckInCreateManyUserInputEnvelope
    set?: DailyCheckInWhereUniqueInput | DailyCheckInWhereUniqueInput[]
    disconnect?: DailyCheckInWhereUniqueInput | DailyCheckInWhereUniqueInput[]
    delete?: DailyCheckInWhereUniqueInput | DailyCheckInWhereUniqueInput[]
    connect?: DailyCheckInWhereUniqueInput | DailyCheckInWhereUniqueInput[]
    update?: DailyCheckInUpdateWithWhereUniqueWithoutUserInput | DailyCheckInUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DailyCheckInUpdateManyWithWhereWithoutUserInput | DailyCheckInUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DailyCheckInScalarWhereInput | DailyCheckInScalarWhereInput[]
  }

  export type UserRoleUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutUserInput | UserRoleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutUserInput | UserRoleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutUserInput | UserRoleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type OperationLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OperationLogCreateWithoutUserInput, OperationLogUncheckedCreateWithoutUserInput> | OperationLogCreateWithoutUserInput[] | OperationLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OperationLogCreateOrConnectWithoutUserInput | OperationLogCreateOrConnectWithoutUserInput[]
    upsert?: OperationLogUpsertWithWhereUniqueWithoutUserInput | OperationLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OperationLogCreateManyUserInputEnvelope
    set?: OperationLogWhereUniqueInput | OperationLogWhereUniqueInput[]
    disconnect?: OperationLogWhereUniqueInput | OperationLogWhereUniqueInput[]
    delete?: OperationLogWhereUniqueInput | OperationLogWhereUniqueInput[]
    connect?: OperationLogWhereUniqueInput | OperationLogWhereUniqueInput[]
    update?: OperationLogUpdateWithWhereUniqueWithoutUserInput | OperationLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OperationLogUpdateManyWithWhereWithoutUserInput | OperationLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OperationLogScalarWhereInput | OperationLogScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutTopicsInput = {
    create?: XOR<UserCreateWithoutTopicsInput, UserUncheckedCreateWithoutTopicsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTopicsInput
    connect?: UserWhereUniqueInput
  }

  export type CommentCreateNestedManyWithoutTopicInput = {
    create?: XOR<CommentCreateWithoutTopicInput, CommentUncheckedCreateWithoutTopicInput> | CommentCreateWithoutTopicInput[] | CommentUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutTopicInput | CommentCreateOrConnectWithoutTopicInput[]
    createMany?: CommentCreateManyTopicInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type LikeCreateNestedManyWithoutTopicInput = {
    create?: XOR<LikeCreateWithoutTopicInput, LikeUncheckedCreateWithoutTopicInput> | LikeCreateWithoutTopicInput[] | LikeUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutTopicInput | LikeCreateOrConnectWithoutTopicInput[]
    createMany?: LikeCreateManyTopicInputEnvelope
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
  }

  export type BookmarkCreateNestedManyWithoutTopicInput = {
    create?: XOR<BookmarkCreateWithoutTopicInput, BookmarkUncheckedCreateWithoutTopicInput> | BookmarkCreateWithoutTopicInput[] | BookmarkUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutTopicInput | BookmarkCreateOrConnectWithoutTopicInput[]
    createMany?: BookmarkCreateManyTopicInputEnvelope
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutTopicInput = {
    create?: XOR<NotificationCreateWithoutTopicInput, NotificationUncheckedCreateWithoutTopicInput> | NotificationCreateWithoutTopicInput[] | NotificationUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutTopicInput | NotificationCreateOrConnectWithoutTopicInput[]
    createMany?: NotificationCreateManyTopicInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type UserActionCreateNestedManyWithoutTopicInput = {
    create?: XOR<UserActionCreateWithoutTopicInput, UserActionUncheckedCreateWithoutTopicInput> | UserActionCreateWithoutTopicInput[] | UserActionUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: UserActionCreateOrConnectWithoutTopicInput | UserActionCreateOrConnectWithoutTopicInput[]
    createMany?: UserActionCreateManyTopicInputEnvelope
    connect?: UserActionWhereUniqueInput | UserActionWhereUniqueInput[]
  }

  export type TopicQuickActionCreateNestedManyWithoutTopicInput = {
    create?: XOR<TopicQuickActionCreateWithoutTopicInput, TopicQuickActionUncheckedCreateWithoutTopicInput> | TopicQuickActionCreateWithoutTopicInput[] | TopicQuickActionUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: TopicQuickActionCreateOrConnectWithoutTopicInput | TopicQuickActionCreateOrConnectWithoutTopicInput[]
    createMany?: TopicQuickActionCreateManyTopicInputEnvelope
    connect?: TopicQuickActionWhereUniqueInput | TopicQuickActionWhereUniqueInput[]
  }

  export type TopicActionCreateNestedManyWithoutTopicInput = {
    create?: XOR<TopicActionCreateWithoutTopicInput, TopicActionUncheckedCreateWithoutTopicInput> | TopicActionCreateWithoutTopicInput[] | TopicActionUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: TopicActionCreateOrConnectWithoutTopicInput | TopicActionCreateOrConnectWithoutTopicInput[]
    createMany?: TopicActionCreateManyTopicInputEnvelope
    connect?: TopicActionWhereUniqueInput | TopicActionWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutTopicInput = {
    create?: XOR<CommentCreateWithoutTopicInput, CommentUncheckedCreateWithoutTopicInput> | CommentCreateWithoutTopicInput[] | CommentUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutTopicInput | CommentCreateOrConnectWithoutTopicInput[]
    createMany?: CommentCreateManyTopicInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type LikeUncheckedCreateNestedManyWithoutTopicInput = {
    create?: XOR<LikeCreateWithoutTopicInput, LikeUncheckedCreateWithoutTopicInput> | LikeCreateWithoutTopicInput[] | LikeUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutTopicInput | LikeCreateOrConnectWithoutTopicInput[]
    createMany?: LikeCreateManyTopicInputEnvelope
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
  }

  export type BookmarkUncheckedCreateNestedManyWithoutTopicInput = {
    create?: XOR<BookmarkCreateWithoutTopicInput, BookmarkUncheckedCreateWithoutTopicInput> | BookmarkCreateWithoutTopicInput[] | BookmarkUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutTopicInput | BookmarkCreateOrConnectWithoutTopicInput[]
    createMany?: BookmarkCreateManyTopicInputEnvelope
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutTopicInput = {
    create?: XOR<NotificationCreateWithoutTopicInput, NotificationUncheckedCreateWithoutTopicInput> | NotificationCreateWithoutTopicInput[] | NotificationUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutTopicInput | NotificationCreateOrConnectWithoutTopicInput[]
    createMany?: NotificationCreateManyTopicInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type UserActionUncheckedCreateNestedManyWithoutTopicInput = {
    create?: XOR<UserActionCreateWithoutTopicInput, UserActionUncheckedCreateWithoutTopicInput> | UserActionCreateWithoutTopicInput[] | UserActionUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: UserActionCreateOrConnectWithoutTopicInput | UserActionCreateOrConnectWithoutTopicInput[]
    createMany?: UserActionCreateManyTopicInputEnvelope
    connect?: UserActionWhereUniqueInput | UserActionWhereUniqueInput[]
  }

  export type TopicQuickActionUncheckedCreateNestedManyWithoutTopicInput = {
    create?: XOR<TopicQuickActionCreateWithoutTopicInput, TopicQuickActionUncheckedCreateWithoutTopicInput> | TopicQuickActionCreateWithoutTopicInput[] | TopicQuickActionUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: TopicQuickActionCreateOrConnectWithoutTopicInput | TopicQuickActionCreateOrConnectWithoutTopicInput[]
    createMany?: TopicQuickActionCreateManyTopicInputEnvelope
    connect?: TopicQuickActionWhereUniqueInput | TopicQuickActionWhereUniqueInput[]
  }

  export type TopicActionUncheckedCreateNestedManyWithoutTopicInput = {
    create?: XOR<TopicActionCreateWithoutTopicInput, TopicActionUncheckedCreateWithoutTopicInput> | TopicActionCreateWithoutTopicInput[] | TopicActionUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: TopicActionCreateOrConnectWithoutTopicInput | TopicActionCreateOrConnectWithoutTopicInput[]
    createMany?: TopicActionCreateManyTopicInputEnvelope
    connect?: TopicActionWhereUniqueInput | TopicActionWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutTopicsNestedInput = {
    create?: XOR<UserCreateWithoutTopicsInput, UserUncheckedCreateWithoutTopicsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTopicsInput
    upsert?: UserUpsertWithoutTopicsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTopicsInput, UserUpdateWithoutTopicsInput>, UserUncheckedUpdateWithoutTopicsInput>
  }

  export type CommentUpdateManyWithoutTopicNestedInput = {
    create?: XOR<CommentCreateWithoutTopicInput, CommentUncheckedCreateWithoutTopicInput> | CommentCreateWithoutTopicInput[] | CommentUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutTopicInput | CommentCreateOrConnectWithoutTopicInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutTopicInput | CommentUpsertWithWhereUniqueWithoutTopicInput[]
    createMany?: CommentCreateManyTopicInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutTopicInput | CommentUpdateWithWhereUniqueWithoutTopicInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutTopicInput | CommentUpdateManyWithWhereWithoutTopicInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type LikeUpdateManyWithoutTopicNestedInput = {
    create?: XOR<LikeCreateWithoutTopicInput, LikeUncheckedCreateWithoutTopicInput> | LikeCreateWithoutTopicInput[] | LikeUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutTopicInput | LikeCreateOrConnectWithoutTopicInput[]
    upsert?: LikeUpsertWithWhereUniqueWithoutTopicInput | LikeUpsertWithWhereUniqueWithoutTopicInput[]
    createMany?: LikeCreateManyTopicInputEnvelope
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    update?: LikeUpdateWithWhereUniqueWithoutTopicInput | LikeUpdateWithWhereUniqueWithoutTopicInput[]
    updateMany?: LikeUpdateManyWithWhereWithoutTopicInput | LikeUpdateManyWithWhereWithoutTopicInput[]
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[]
  }

  export type BookmarkUpdateManyWithoutTopicNestedInput = {
    create?: XOR<BookmarkCreateWithoutTopicInput, BookmarkUncheckedCreateWithoutTopicInput> | BookmarkCreateWithoutTopicInput[] | BookmarkUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutTopicInput | BookmarkCreateOrConnectWithoutTopicInput[]
    upsert?: BookmarkUpsertWithWhereUniqueWithoutTopicInput | BookmarkUpsertWithWhereUniqueWithoutTopicInput[]
    createMany?: BookmarkCreateManyTopicInputEnvelope
    set?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    disconnect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    delete?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    update?: BookmarkUpdateWithWhereUniqueWithoutTopicInput | BookmarkUpdateWithWhereUniqueWithoutTopicInput[]
    updateMany?: BookmarkUpdateManyWithWhereWithoutTopicInput | BookmarkUpdateManyWithWhereWithoutTopicInput[]
    deleteMany?: BookmarkScalarWhereInput | BookmarkScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutTopicNestedInput = {
    create?: XOR<NotificationCreateWithoutTopicInput, NotificationUncheckedCreateWithoutTopicInput> | NotificationCreateWithoutTopicInput[] | NotificationUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutTopicInput | NotificationCreateOrConnectWithoutTopicInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutTopicInput | NotificationUpsertWithWhereUniqueWithoutTopicInput[]
    createMany?: NotificationCreateManyTopicInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutTopicInput | NotificationUpdateWithWhereUniqueWithoutTopicInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutTopicInput | NotificationUpdateManyWithWhereWithoutTopicInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type UserActionUpdateManyWithoutTopicNestedInput = {
    create?: XOR<UserActionCreateWithoutTopicInput, UserActionUncheckedCreateWithoutTopicInput> | UserActionCreateWithoutTopicInput[] | UserActionUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: UserActionCreateOrConnectWithoutTopicInput | UserActionCreateOrConnectWithoutTopicInput[]
    upsert?: UserActionUpsertWithWhereUniqueWithoutTopicInput | UserActionUpsertWithWhereUniqueWithoutTopicInput[]
    createMany?: UserActionCreateManyTopicInputEnvelope
    set?: UserActionWhereUniqueInput | UserActionWhereUniqueInput[]
    disconnect?: UserActionWhereUniqueInput | UserActionWhereUniqueInput[]
    delete?: UserActionWhereUniqueInput | UserActionWhereUniqueInput[]
    connect?: UserActionWhereUniqueInput | UserActionWhereUniqueInput[]
    update?: UserActionUpdateWithWhereUniqueWithoutTopicInput | UserActionUpdateWithWhereUniqueWithoutTopicInput[]
    updateMany?: UserActionUpdateManyWithWhereWithoutTopicInput | UserActionUpdateManyWithWhereWithoutTopicInput[]
    deleteMany?: UserActionScalarWhereInput | UserActionScalarWhereInput[]
  }

  export type TopicQuickActionUpdateManyWithoutTopicNestedInput = {
    create?: XOR<TopicQuickActionCreateWithoutTopicInput, TopicQuickActionUncheckedCreateWithoutTopicInput> | TopicQuickActionCreateWithoutTopicInput[] | TopicQuickActionUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: TopicQuickActionCreateOrConnectWithoutTopicInput | TopicQuickActionCreateOrConnectWithoutTopicInput[]
    upsert?: TopicQuickActionUpsertWithWhereUniqueWithoutTopicInput | TopicQuickActionUpsertWithWhereUniqueWithoutTopicInput[]
    createMany?: TopicQuickActionCreateManyTopicInputEnvelope
    set?: TopicQuickActionWhereUniqueInput | TopicQuickActionWhereUniqueInput[]
    disconnect?: TopicQuickActionWhereUniqueInput | TopicQuickActionWhereUniqueInput[]
    delete?: TopicQuickActionWhereUniqueInput | TopicQuickActionWhereUniqueInput[]
    connect?: TopicQuickActionWhereUniqueInput | TopicQuickActionWhereUniqueInput[]
    update?: TopicQuickActionUpdateWithWhereUniqueWithoutTopicInput | TopicQuickActionUpdateWithWhereUniqueWithoutTopicInput[]
    updateMany?: TopicQuickActionUpdateManyWithWhereWithoutTopicInput | TopicQuickActionUpdateManyWithWhereWithoutTopicInput[]
    deleteMany?: TopicQuickActionScalarWhereInput | TopicQuickActionScalarWhereInput[]
  }

  export type TopicActionUpdateManyWithoutTopicNestedInput = {
    create?: XOR<TopicActionCreateWithoutTopicInput, TopicActionUncheckedCreateWithoutTopicInput> | TopicActionCreateWithoutTopicInput[] | TopicActionUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: TopicActionCreateOrConnectWithoutTopicInput | TopicActionCreateOrConnectWithoutTopicInput[]
    upsert?: TopicActionUpsertWithWhereUniqueWithoutTopicInput | TopicActionUpsertWithWhereUniqueWithoutTopicInput[]
    createMany?: TopicActionCreateManyTopicInputEnvelope
    set?: TopicActionWhereUniqueInput | TopicActionWhereUniqueInput[]
    disconnect?: TopicActionWhereUniqueInput | TopicActionWhereUniqueInput[]
    delete?: TopicActionWhereUniqueInput | TopicActionWhereUniqueInput[]
    connect?: TopicActionWhereUniqueInput | TopicActionWhereUniqueInput[]
    update?: TopicActionUpdateWithWhereUniqueWithoutTopicInput | TopicActionUpdateWithWhereUniqueWithoutTopicInput[]
    updateMany?: TopicActionUpdateManyWithWhereWithoutTopicInput | TopicActionUpdateManyWithWhereWithoutTopicInput[]
    deleteMany?: TopicActionScalarWhereInput | TopicActionScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutTopicNestedInput = {
    create?: XOR<CommentCreateWithoutTopicInput, CommentUncheckedCreateWithoutTopicInput> | CommentCreateWithoutTopicInput[] | CommentUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutTopicInput | CommentCreateOrConnectWithoutTopicInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutTopicInput | CommentUpsertWithWhereUniqueWithoutTopicInput[]
    createMany?: CommentCreateManyTopicInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutTopicInput | CommentUpdateWithWhereUniqueWithoutTopicInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutTopicInput | CommentUpdateManyWithWhereWithoutTopicInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type LikeUncheckedUpdateManyWithoutTopicNestedInput = {
    create?: XOR<LikeCreateWithoutTopicInput, LikeUncheckedCreateWithoutTopicInput> | LikeCreateWithoutTopicInput[] | LikeUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutTopicInput | LikeCreateOrConnectWithoutTopicInput[]
    upsert?: LikeUpsertWithWhereUniqueWithoutTopicInput | LikeUpsertWithWhereUniqueWithoutTopicInput[]
    createMany?: LikeCreateManyTopicInputEnvelope
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    update?: LikeUpdateWithWhereUniqueWithoutTopicInput | LikeUpdateWithWhereUniqueWithoutTopicInput[]
    updateMany?: LikeUpdateManyWithWhereWithoutTopicInput | LikeUpdateManyWithWhereWithoutTopicInput[]
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[]
  }

  export type BookmarkUncheckedUpdateManyWithoutTopicNestedInput = {
    create?: XOR<BookmarkCreateWithoutTopicInput, BookmarkUncheckedCreateWithoutTopicInput> | BookmarkCreateWithoutTopicInput[] | BookmarkUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutTopicInput | BookmarkCreateOrConnectWithoutTopicInput[]
    upsert?: BookmarkUpsertWithWhereUniqueWithoutTopicInput | BookmarkUpsertWithWhereUniqueWithoutTopicInput[]
    createMany?: BookmarkCreateManyTopicInputEnvelope
    set?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    disconnect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    delete?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    update?: BookmarkUpdateWithWhereUniqueWithoutTopicInput | BookmarkUpdateWithWhereUniqueWithoutTopicInput[]
    updateMany?: BookmarkUpdateManyWithWhereWithoutTopicInput | BookmarkUpdateManyWithWhereWithoutTopicInput[]
    deleteMany?: BookmarkScalarWhereInput | BookmarkScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutTopicNestedInput = {
    create?: XOR<NotificationCreateWithoutTopicInput, NotificationUncheckedCreateWithoutTopicInput> | NotificationCreateWithoutTopicInput[] | NotificationUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutTopicInput | NotificationCreateOrConnectWithoutTopicInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutTopicInput | NotificationUpsertWithWhereUniqueWithoutTopicInput[]
    createMany?: NotificationCreateManyTopicInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutTopicInput | NotificationUpdateWithWhereUniqueWithoutTopicInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutTopicInput | NotificationUpdateManyWithWhereWithoutTopicInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type UserActionUncheckedUpdateManyWithoutTopicNestedInput = {
    create?: XOR<UserActionCreateWithoutTopicInput, UserActionUncheckedCreateWithoutTopicInput> | UserActionCreateWithoutTopicInput[] | UserActionUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: UserActionCreateOrConnectWithoutTopicInput | UserActionCreateOrConnectWithoutTopicInput[]
    upsert?: UserActionUpsertWithWhereUniqueWithoutTopicInput | UserActionUpsertWithWhereUniqueWithoutTopicInput[]
    createMany?: UserActionCreateManyTopicInputEnvelope
    set?: UserActionWhereUniqueInput | UserActionWhereUniqueInput[]
    disconnect?: UserActionWhereUniqueInput | UserActionWhereUniqueInput[]
    delete?: UserActionWhereUniqueInput | UserActionWhereUniqueInput[]
    connect?: UserActionWhereUniqueInput | UserActionWhereUniqueInput[]
    update?: UserActionUpdateWithWhereUniqueWithoutTopicInput | UserActionUpdateWithWhereUniqueWithoutTopicInput[]
    updateMany?: UserActionUpdateManyWithWhereWithoutTopicInput | UserActionUpdateManyWithWhereWithoutTopicInput[]
    deleteMany?: UserActionScalarWhereInput | UserActionScalarWhereInput[]
  }

  export type TopicQuickActionUncheckedUpdateManyWithoutTopicNestedInput = {
    create?: XOR<TopicQuickActionCreateWithoutTopicInput, TopicQuickActionUncheckedCreateWithoutTopicInput> | TopicQuickActionCreateWithoutTopicInput[] | TopicQuickActionUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: TopicQuickActionCreateOrConnectWithoutTopicInput | TopicQuickActionCreateOrConnectWithoutTopicInput[]
    upsert?: TopicQuickActionUpsertWithWhereUniqueWithoutTopicInput | TopicQuickActionUpsertWithWhereUniqueWithoutTopicInput[]
    createMany?: TopicQuickActionCreateManyTopicInputEnvelope
    set?: TopicQuickActionWhereUniqueInput | TopicQuickActionWhereUniqueInput[]
    disconnect?: TopicQuickActionWhereUniqueInput | TopicQuickActionWhereUniqueInput[]
    delete?: TopicQuickActionWhereUniqueInput | TopicQuickActionWhereUniqueInput[]
    connect?: TopicQuickActionWhereUniqueInput | TopicQuickActionWhereUniqueInput[]
    update?: TopicQuickActionUpdateWithWhereUniqueWithoutTopicInput | TopicQuickActionUpdateWithWhereUniqueWithoutTopicInput[]
    updateMany?: TopicQuickActionUpdateManyWithWhereWithoutTopicInput | TopicQuickActionUpdateManyWithWhereWithoutTopicInput[]
    deleteMany?: TopicQuickActionScalarWhereInput | TopicQuickActionScalarWhereInput[]
  }

  export type TopicActionUncheckedUpdateManyWithoutTopicNestedInput = {
    create?: XOR<TopicActionCreateWithoutTopicInput, TopicActionUncheckedCreateWithoutTopicInput> | TopicActionCreateWithoutTopicInput[] | TopicActionUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: TopicActionCreateOrConnectWithoutTopicInput | TopicActionCreateOrConnectWithoutTopicInput[]
    upsert?: TopicActionUpsertWithWhereUniqueWithoutTopicInput | TopicActionUpsertWithWhereUniqueWithoutTopicInput[]
    createMany?: TopicActionCreateManyTopicInputEnvelope
    set?: TopicActionWhereUniqueInput | TopicActionWhereUniqueInput[]
    disconnect?: TopicActionWhereUniqueInput | TopicActionWhereUniqueInput[]
    delete?: TopicActionWhereUniqueInput | TopicActionWhereUniqueInput[]
    connect?: TopicActionWhereUniqueInput | TopicActionWhereUniqueInput[]
    update?: TopicActionUpdateWithWhereUniqueWithoutTopicInput | TopicActionUpdateWithWhereUniqueWithoutTopicInput[]
    updateMany?: TopicActionUpdateManyWithWhereWithoutTopicInput | TopicActionUpdateManyWithWhereWithoutTopicInput[]
    deleteMany?: TopicActionScalarWhereInput | TopicActionScalarWhereInput[]
  }

  export type TopicCreateNestedOneWithoutCommentsInput = {
    create?: XOR<TopicCreateWithoutCommentsInput, TopicUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: TopicCreateOrConnectWithoutCommentsInput
    connect?: TopicWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutCommentsInput = {
    create?: XOR<ProjectCreateWithoutCommentsInput, ProjectUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutCommentsInput
    connect?: ProjectWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCommentsInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type CommentCreateNestedOneWithoutRepliesInput = {
    create?: XOR<CommentCreateWithoutRepliesInput, CommentUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: CommentCreateOrConnectWithoutRepliesInput
    connect?: CommentWhereUniqueInput
  }

  export type CommentCreateNestedManyWithoutParentInput = {
    create?: XOR<CommentCreateWithoutParentInput, CommentUncheckedCreateWithoutParentInput> | CommentCreateWithoutParentInput[] | CommentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutParentInput | CommentCreateOrConnectWithoutParentInput[]
    createMany?: CommentCreateManyParentInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type LikeCreateNestedManyWithoutCommentInput = {
    create?: XOR<LikeCreateWithoutCommentInput, LikeUncheckedCreateWithoutCommentInput> | LikeCreateWithoutCommentInput[] | LikeUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutCommentInput | LikeCreateOrConnectWithoutCommentInput[]
    createMany?: LikeCreateManyCommentInputEnvelope
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutCommentInput = {
    create?: XOR<NotificationCreateWithoutCommentInput, NotificationUncheckedCreateWithoutCommentInput> | NotificationCreateWithoutCommentInput[] | NotificationUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutCommentInput | NotificationCreateOrConnectWithoutCommentInput[]
    createMany?: NotificationCreateManyCommentInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<CommentCreateWithoutParentInput, CommentUncheckedCreateWithoutParentInput> | CommentCreateWithoutParentInput[] | CommentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutParentInput | CommentCreateOrConnectWithoutParentInput[]
    createMany?: CommentCreateManyParentInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type LikeUncheckedCreateNestedManyWithoutCommentInput = {
    create?: XOR<LikeCreateWithoutCommentInput, LikeUncheckedCreateWithoutCommentInput> | LikeCreateWithoutCommentInput[] | LikeUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutCommentInput | LikeCreateOrConnectWithoutCommentInput[]
    createMany?: LikeCreateManyCommentInputEnvelope
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutCommentInput = {
    create?: XOR<NotificationCreateWithoutCommentInput, NotificationUncheckedCreateWithoutCommentInput> | NotificationCreateWithoutCommentInput[] | NotificationUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutCommentInput | NotificationCreateOrConnectWithoutCommentInput[]
    createMany?: NotificationCreateManyCommentInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type TopicUpdateOneWithoutCommentsNestedInput = {
    create?: XOR<TopicCreateWithoutCommentsInput, TopicUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: TopicCreateOrConnectWithoutCommentsInput
    upsert?: TopicUpsertWithoutCommentsInput
    disconnect?: TopicWhereInput | boolean
    delete?: TopicWhereInput | boolean
    connect?: TopicWhereUniqueInput
    update?: XOR<XOR<TopicUpdateToOneWithWhereWithoutCommentsInput, TopicUpdateWithoutCommentsInput>, TopicUncheckedUpdateWithoutCommentsInput>
  }

  export type ProjectUpdateOneWithoutCommentsNestedInput = {
    create?: XOR<ProjectCreateWithoutCommentsInput, ProjectUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutCommentsInput
    upsert?: ProjectUpsertWithoutCommentsInput
    disconnect?: ProjectWhereInput | boolean
    delete?: ProjectWhereInput | boolean
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutCommentsInput, ProjectUpdateWithoutCommentsInput>, ProjectUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    upsert?: UserUpsertWithoutCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommentsInput, UserUpdateWithoutCommentsInput>, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type CommentUpdateOneWithoutRepliesNestedInput = {
    create?: XOR<CommentCreateWithoutRepliesInput, CommentUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: CommentCreateOrConnectWithoutRepliesInput
    upsert?: CommentUpsertWithoutRepliesInput
    disconnect?: CommentWhereInput | boolean
    delete?: CommentWhereInput | boolean
    connect?: CommentWhereUniqueInput
    update?: XOR<XOR<CommentUpdateToOneWithWhereWithoutRepliesInput, CommentUpdateWithoutRepliesInput>, CommentUncheckedUpdateWithoutRepliesInput>
  }

  export type CommentUpdateManyWithoutParentNestedInput = {
    create?: XOR<CommentCreateWithoutParentInput, CommentUncheckedCreateWithoutParentInput> | CommentCreateWithoutParentInput[] | CommentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutParentInput | CommentCreateOrConnectWithoutParentInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutParentInput | CommentUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: CommentCreateManyParentInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutParentInput | CommentUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutParentInput | CommentUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type LikeUpdateManyWithoutCommentNestedInput = {
    create?: XOR<LikeCreateWithoutCommentInput, LikeUncheckedCreateWithoutCommentInput> | LikeCreateWithoutCommentInput[] | LikeUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutCommentInput | LikeCreateOrConnectWithoutCommentInput[]
    upsert?: LikeUpsertWithWhereUniqueWithoutCommentInput | LikeUpsertWithWhereUniqueWithoutCommentInput[]
    createMany?: LikeCreateManyCommentInputEnvelope
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    update?: LikeUpdateWithWhereUniqueWithoutCommentInput | LikeUpdateWithWhereUniqueWithoutCommentInput[]
    updateMany?: LikeUpdateManyWithWhereWithoutCommentInput | LikeUpdateManyWithWhereWithoutCommentInput[]
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutCommentNestedInput = {
    create?: XOR<NotificationCreateWithoutCommentInput, NotificationUncheckedCreateWithoutCommentInput> | NotificationCreateWithoutCommentInput[] | NotificationUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutCommentInput | NotificationCreateOrConnectWithoutCommentInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutCommentInput | NotificationUpsertWithWhereUniqueWithoutCommentInput[]
    createMany?: NotificationCreateManyCommentInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutCommentInput | NotificationUpdateWithWhereUniqueWithoutCommentInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutCommentInput | NotificationUpdateManyWithWhereWithoutCommentInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<CommentCreateWithoutParentInput, CommentUncheckedCreateWithoutParentInput> | CommentCreateWithoutParentInput[] | CommentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutParentInput | CommentCreateOrConnectWithoutParentInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutParentInput | CommentUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: CommentCreateManyParentInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutParentInput | CommentUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutParentInput | CommentUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type LikeUncheckedUpdateManyWithoutCommentNestedInput = {
    create?: XOR<LikeCreateWithoutCommentInput, LikeUncheckedCreateWithoutCommentInput> | LikeCreateWithoutCommentInput[] | LikeUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutCommentInput | LikeCreateOrConnectWithoutCommentInput[]
    upsert?: LikeUpsertWithWhereUniqueWithoutCommentInput | LikeUpsertWithWhereUniqueWithoutCommentInput[]
    createMany?: LikeCreateManyCommentInputEnvelope
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    update?: LikeUpdateWithWhereUniqueWithoutCommentInput | LikeUpdateWithWhereUniqueWithoutCommentInput[]
    updateMany?: LikeUpdateManyWithWhereWithoutCommentInput | LikeUpdateManyWithWhereWithoutCommentInput[]
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutCommentNestedInput = {
    create?: XOR<NotificationCreateWithoutCommentInput, NotificationUncheckedCreateWithoutCommentInput> | NotificationCreateWithoutCommentInput[] | NotificationUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutCommentInput | NotificationCreateOrConnectWithoutCommentInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutCommentInput | NotificationUpsertWithWhereUniqueWithoutCommentInput[]
    createMany?: NotificationCreateManyCommentInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutCommentInput | NotificationUpdateWithWhereUniqueWithoutCommentInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutCommentInput | NotificationUpdateManyWithWhereWithoutCommentInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutLikesInput = {
    create?: XOR<UserCreateWithoutLikesInput, UserUncheckedCreateWithoutLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutLikesInput
    connect?: UserWhereUniqueInput
  }

  export type TopicCreateNestedOneWithoutLikesInput = {
    create?: XOR<TopicCreateWithoutLikesInput, TopicUncheckedCreateWithoutLikesInput>
    connectOrCreate?: TopicCreateOrConnectWithoutLikesInput
    connect?: TopicWhereUniqueInput
  }

  export type CommentCreateNestedOneWithoutLikesInput = {
    create?: XOR<CommentCreateWithoutLikesInput, CommentUncheckedCreateWithoutLikesInput>
    connectOrCreate?: CommentCreateOrConnectWithoutLikesInput
    connect?: CommentWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<UserCreateWithoutLikesInput, UserUncheckedCreateWithoutLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutLikesInput
    upsert?: UserUpsertWithoutLikesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLikesInput, UserUpdateWithoutLikesInput>, UserUncheckedUpdateWithoutLikesInput>
  }

  export type TopicUpdateOneWithoutLikesNestedInput = {
    create?: XOR<TopicCreateWithoutLikesInput, TopicUncheckedCreateWithoutLikesInput>
    connectOrCreate?: TopicCreateOrConnectWithoutLikesInput
    upsert?: TopicUpsertWithoutLikesInput
    disconnect?: TopicWhereInput | boolean
    delete?: TopicWhereInput | boolean
    connect?: TopicWhereUniqueInput
    update?: XOR<XOR<TopicUpdateToOneWithWhereWithoutLikesInput, TopicUpdateWithoutLikesInput>, TopicUncheckedUpdateWithoutLikesInput>
  }

  export type CommentUpdateOneWithoutLikesNestedInput = {
    create?: XOR<CommentCreateWithoutLikesInput, CommentUncheckedCreateWithoutLikesInput>
    connectOrCreate?: CommentCreateOrConnectWithoutLikesInput
    upsert?: CommentUpsertWithoutLikesInput
    disconnect?: CommentWhereInput | boolean
    delete?: CommentWhereInput | boolean
    connect?: CommentWhereUniqueInput
    update?: XOR<XOR<CommentUpdateToOneWithWhereWithoutLikesInput, CommentUpdateWithoutLikesInput>, CommentUncheckedUpdateWithoutLikesInput>
  }

  export type UserCreateNestedOneWithoutBookmarksInput = {
    create?: XOR<UserCreateWithoutBookmarksInput, UserUncheckedCreateWithoutBookmarksInput>
    connectOrCreate?: UserCreateOrConnectWithoutBookmarksInput
    connect?: UserWhereUniqueInput
  }

  export type TopicCreateNestedOneWithoutBookmarksInput = {
    create?: XOR<TopicCreateWithoutBookmarksInput, TopicUncheckedCreateWithoutBookmarksInput>
    connectOrCreate?: TopicCreateOrConnectWithoutBookmarksInput
    connect?: TopicWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutBookmarksNestedInput = {
    create?: XOR<UserCreateWithoutBookmarksInput, UserUncheckedCreateWithoutBookmarksInput>
    connectOrCreate?: UserCreateOrConnectWithoutBookmarksInput
    upsert?: UserUpsertWithoutBookmarksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBookmarksInput, UserUpdateWithoutBookmarksInput>, UserUncheckedUpdateWithoutBookmarksInput>
  }

  export type TopicUpdateOneRequiredWithoutBookmarksNestedInput = {
    create?: XOR<TopicCreateWithoutBookmarksInput, TopicUncheckedCreateWithoutBookmarksInput>
    connectOrCreate?: TopicCreateOrConnectWithoutBookmarksInput
    upsert?: TopicUpsertWithoutBookmarksInput
    connect?: TopicWhereUniqueInput
    update?: XOR<XOR<TopicUpdateToOneWithWhereWithoutBookmarksInput, TopicUpdateWithoutBookmarksInput>, TopicUncheckedUpdateWithoutBookmarksInput>
  }

  export type UserCreateNestedOneWithoutFollowsInput = {
    create?: XOR<UserCreateWithoutFollowsInput, UserUncheckedCreateWithoutFollowsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutFollowersInput = {
    create?: XOR<UserCreateWithoutFollowersInput, UserUncheckedCreateWithoutFollowersInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowersInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFollowsNestedInput = {
    create?: XOR<UserCreateWithoutFollowsInput, UserUncheckedCreateWithoutFollowsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowsInput
    upsert?: UserUpsertWithoutFollowsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFollowsInput, UserUpdateWithoutFollowsInput>, UserUncheckedUpdateWithoutFollowsInput>
  }

  export type UserUpdateOneRequiredWithoutFollowersNestedInput = {
    create?: XOR<UserCreateWithoutFollowersInput, UserUncheckedCreateWithoutFollowersInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowersInput
    upsert?: UserUpsertWithoutFollowersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFollowersInput, UserUpdateWithoutFollowersInput>, UserUncheckedUpdateWithoutFollowersInput>
  }

  export type UserCreateNestedOneWithoutReceivedNotificationsInput = {
    create?: XOR<UserCreateWithoutReceivedNotificationsInput, UserUncheckedCreateWithoutReceivedNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSentNotificationsInput = {
    create?: XOR<UserCreateWithoutSentNotificationsInput, UserUncheckedCreateWithoutSentNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type TopicCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<TopicCreateWithoutNotificationsInput, TopicUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: TopicCreateOrConnectWithoutNotificationsInput
    connect?: TopicWhereUniqueInput
  }

  export type CommentCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<CommentCreateWithoutNotificationsInput, CommentUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: CommentCreateOrConnectWithoutNotificationsInput
    connect?: CommentWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutReceivedNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutReceivedNotificationsInput, UserUncheckedCreateWithoutReceivedNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedNotificationsInput
    upsert?: UserUpsertWithoutReceivedNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReceivedNotificationsInput, UserUpdateWithoutReceivedNotificationsInput>, UserUncheckedUpdateWithoutReceivedNotificationsInput>
  }

  export type UserUpdateOneWithoutSentNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutSentNotificationsInput, UserUncheckedCreateWithoutSentNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentNotificationsInput
    upsert?: UserUpsertWithoutSentNotificationsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSentNotificationsInput, UserUpdateWithoutSentNotificationsInput>, UserUncheckedUpdateWithoutSentNotificationsInput>
  }

  export type TopicUpdateOneWithoutNotificationsNestedInput = {
    create?: XOR<TopicCreateWithoutNotificationsInput, TopicUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: TopicCreateOrConnectWithoutNotificationsInput
    upsert?: TopicUpsertWithoutNotificationsInput
    disconnect?: TopicWhereInput | boolean
    delete?: TopicWhereInput | boolean
    connect?: TopicWhereUniqueInput
    update?: XOR<XOR<TopicUpdateToOneWithWhereWithoutNotificationsInput, TopicUpdateWithoutNotificationsInput>, TopicUncheckedUpdateWithoutNotificationsInput>
  }

  export type CommentUpdateOneWithoutNotificationsNestedInput = {
    create?: XOR<CommentCreateWithoutNotificationsInput, CommentUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: CommentCreateOrConnectWithoutNotificationsInput
    upsert?: CommentUpsertWithoutNotificationsInput
    disconnect?: CommentWhereInput | boolean
    delete?: CommentWhereInput | boolean
    connect?: CommentWhereUniqueInput
    update?: XOR<XOR<CommentUpdateToOneWithWhereWithoutNotificationsInput, CommentUpdateWithoutNotificationsInput>, CommentUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserCreateNestedOneWithoutUserActionsInput = {
    create?: XOR<UserCreateWithoutUserActionsInput, UserUncheckedCreateWithoutUserActionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserActionsInput
    connect?: UserWhereUniqueInput
  }

  export type TopicCreateNestedOneWithoutUserActionsInput = {
    create?: XOR<TopicCreateWithoutUserActionsInput, TopicUncheckedCreateWithoutUserActionsInput>
    connectOrCreate?: TopicCreateOrConnectWithoutUserActionsInput
    connect?: TopicWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserActionsNestedInput = {
    create?: XOR<UserCreateWithoutUserActionsInput, UserUncheckedCreateWithoutUserActionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserActionsInput
    upsert?: UserUpsertWithoutUserActionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserActionsInput, UserUpdateWithoutUserActionsInput>, UserUncheckedUpdateWithoutUserActionsInput>
  }

  export type TopicUpdateOneWithoutUserActionsNestedInput = {
    create?: XOR<TopicCreateWithoutUserActionsInput, TopicUncheckedCreateWithoutUserActionsInput>
    connectOrCreate?: TopicCreateOrConnectWithoutUserActionsInput
    upsert?: TopicUpsertWithoutUserActionsInput
    disconnect?: TopicWhereInput | boolean
    delete?: TopicWhereInput | boolean
    connect?: TopicWhereUniqueInput
    update?: XOR<XOR<TopicUpdateToOneWithWhereWithoutUserActionsInput, TopicUpdateWithoutUserActionsInput>, TopicUncheckedUpdateWithoutUserActionsInput>
  }

  export type TopicCreateNestedOneWithoutQuickActionsListInput = {
    create?: XOR<TopicCreateWithoutQuickActionsListInput, TopicUncheckedCreateWithoutQuickActionsListInput>
    connectOrCreate?: TopicCreateOrConnectWithoutQuickActionsListInput
    connect?: TopicWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTopicQuickActionsInput = {
    create?: XOR<UserCreateWithoutTopicQuickActionsInput, UserUncheckedCreateWithoutTopicQuickActionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTopicQuickActionsInput
    connect?: UserWhereUniqueInput
  }

  export type TopicUpdateOneRequiredWithoutQuickActionsListNestedInput = {
    create?: XOR<TopicCreateWithoutQuickActionsListInput, TopicUncheckedCreateWithoutQuickActionsListInput>
    connectOrCreate?: TopicCreateOrConnectWithoutQuickActionsListInput
    upsert?: TopicUpsertWithoutQuickActionsListInput
    connect?: TopicWhereUniqueInput
    update?: XOR<XOR<TopicUpdateToOneWithWhereWithoutQuickActionsListInput, TopicUpdateWithoutQuickActionsListInput>, TopicUncheckedUpdateWithoutQuickActionsListInput>
  }

  export type UserUpdateOneRequiredWithoutTopicQuickActionsNestedInput = {
    create?: XOR<UserCreateWithoutTopicQuickActionsInput, UserUncheckedCreateWithoutTopicQuickActionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTopicQuickActionsInput
    upsert?: UserUpsertWithoutTopicQuickActionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTopicQuickActionsInput, UserUpdateWithoutTopicQuickActionsInput>, UserUncheckedUpdateWithoutTopicQuickActionsInput>
  }

  export type UserCreateNestedOneWithoutTopicActionsInput = {
    create?: XOR<UserCreateWithoutTopicActionsInput, UserUncheckedCreateWithoutTopicActionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTopicActionsInput
    connect?: UserWhereUniqueInput
  }

  export type TopicCreateNestedOneWithoutActionsInput = {
    create?: XOR<TopicCreateWithoutActionsInput, TopicUncheckedCreateWithoutActionsInput>
    connectOrCreate?: TopicCreateOrConnectWithoutActionsInput
    connect?: TopicWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutTopicActionsNestedInput = {
    create?: XOR<UserCreateWithoutTopicActionsInput, UserUncheckedCreateWithoutTopicActionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTopicActionsInput
    upsert?: UserUpsertWithoutTopicActionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTopicActionsInput, UserUpdateWithoutTopicActionsInput>, UserUncheckedUpdateWithoutTopicActionsInput>
  }

  export type TopicUpdateOneRequiredWithoutActionsNestedInput = {
    create?: XOR<TopicCreateWithoutActionsInput, TopicUncheckedCreateWithoutActionsInput>
    connectOrCreate?: TopicCreateOrConnectWithoutActionsInput
    upsert?: TopicUpsertWithoutActionsInput
    connect?: TopicWhereUniqueInput
    update?: XOR<XOR<TopicUpdateToOneWithWhereWithoutActionsInput, TopicUpdateWithoutActionsInput>, TopicUncheckedUpdateWithoutActionsInput>
  }

  export type UserCreateNestedOneWithoutProjectActionsInput = {
    create?: XOR<UserCreateWithoutProjectActionsInput, UserUncheckedCreateWithoutProjectActionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectActionsInput
    connect?: UserWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutActionsInput = {
    create?: XOR<ProjectCreateWithoutActionsInput, ProjectUncheckedCreateWithoutActionsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutActionsInput
    connect?: ProjectWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutProjectActionsNestedInput = {
    create?: XOR<UserCreateWithoutProjectActionsInput, UserUncheckedCreateWithoutProjectActionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectActionsInput
    upsert?: UserUpsertWithoutProjectActionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProjectActionsInput, UserUpdateWithoutProjectActionsInput>, UserUncheckedUpdateWithoutProjectActionsInput>
  }

  export type ProjectUpdateOneRequiredWithoutActionsNestedInput = {
    create?: XOR<ProjectCreateWithoutActionsInput, ProjectUncheckedCreateWithoutActionsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutActionsInput
    upsert?: ProjectUpsertWithoutActionsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutActionsInput, ProjectUpdateWithoutActionsInput>, ProjectUncheckedUpdateWithoutActionsInput>
  }

  export type UserCreateNestedOneWithoutProjectsInput = {
    create?: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectsInput
    connect?: UserWhereUniqueInput
  }

  export type CommentCreateNestedManyWithoutProjectInput = {
    create?: XOR<CommentCreateWithoutProjectInput, CommentUncheckedCreateWithoutProjectInput> | CommentCreateWithoutProjectInput[] | CommentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutProjectInput | CommentCreateOrConnectWithoutProjectInput[]
    createMany?: CommentCreateManyProjectInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ProjectActionCreateNestedManyWithoutProjectInput = {
    create?: XOR<ProjectActionCreateWithoutProjectInput, ProjectActionUncheckedCreateWithoutProjectInput> | ProjectActionCreateWithoutProjectInput[] | ProjectActionUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectActionCreateOrConnectWithoutProjectInput | ProjectActionCreateOrConnectWithoutProjectInput[]
    createMany?: ProjectActionCreateManyProjectInputEnvelope
    connect?: ProjectActionWhereUniqueInput | ProjectActionWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<CommentCreateWithoutProjectInput, CommentUncheckedCreateWithoutProjectInput> | CommentCreateWithoutProjectInput[] | CommentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutProjectInput | CommentCreateOrConnectWithoutProjectInput[]
    createMany?: CommentCreateManyProjectInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ProjectActionUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<ProjectActionCreateWithoutProjectInput, ProjectActionUncheckedCreateWithoutProjectInput> | ProjectActionCreateWithoutProjectInput[] | ProjectActionUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectActionCreateOrConnectWithoutProjectInput | ProjectActionCreateOrConnectWithoutProjectInput[]
    createMany?: ProjectActionCreateManyProjectInputEnvelope
    connect?: ProjectActionWhereUniqueInput | ProjectActionWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutProjectsNestedInput = {
    create?: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectsInput
    upsert?: UserUpsertWithoutProjectsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProjectsInput, UserUpdateWithoutProjectsInput>, UserUncheckedUpdateWithoutProjectsInput>
  }

  export type CommentUpdateManyWithoutProjectNestedInput = {
    create?: XOR<CommentCreateWithoutProjectInput, CommentUncheckedCreateWithoutProjectInput> | CommentCreateWithoutProjectInput[] | CommentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutProjectInput | CommentCreateOrConnectWithoutProjectInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutProjectInput | CommentUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: CommentCreateManyProjectInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutProjectInput | CommentUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutProjectInput | CommentUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ProjectActionUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ProjectActionCreateWithoutProjectInput, ProjectActionUncheckedCreateWithoutProjectInput> | ProjectActionCreateWithoutProjectInput[] | ProjectActionUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectActionCreateOrConnectWithoutProjectInput | ProjectActionCreateOrConnectWithoutProjectInput[]
    upsert?: ProjectActionUpsertWithWhereUniqueWithoutProjectInput | ProjectActionUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ProjectActionCreateManyProjectInputEnvelope
    set?: ProjectActionWhereUniqueInput | ProjectActionWhereUniqueInput[]
    disconnect?: ProjectActionWhereUniqueInput | ProjectActionWhereUniqueInput[]
    delete?: ProjectActionWhereUniqueInput | ProjectActionWhereUniqueInput[]
    connect?: ProjectActionWhereUniqueInput | ProjectActionWhereUniqueInput[]
    update?: ProjectActionUpdateWithWhereUniqueWithoutProjectInput | ProjectActionUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ProjectActionUpdateManyWithWhereWithoutProjectInput | ProjectActionUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ProjectActionScalarWhereInput | ProjectActionScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<CommentCreateWithoutProjectInput, CommentUncheckedCreateWithoutProjectInput> | CommentCreateWithoutProjectInput[] | CommentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutProjectInput | CommentCreateOrConnectWithoutProjectInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutProjectInput | CommentUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: CommentCreateManyProjectInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutProjectInput | CommentUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutProjectInput | CommentUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ProjectActionUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ProjectActionCreateWithoutProjectInput, ProjectActionUncheckedCreateWithoutProjectInput> | ProjectActionCreateWithoutProjectInput[] | ProjectActionUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectActionCreateOrConnectWithoutProjectInput | ProjectActionCreateOrConnectWithoutProjectInput[]
    upsert?: ProjectActionUpsertWithWhereUniqueWithoutProjectInput | ProjectActionUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ProjectActionCreateManyProjectInputEnvelope
    set?: ProjectActionWhereUniqueInput | ProjectActionWhereUniqueInput[]
    disconnect?: ProjectActionWhereUniqueInput | ProjectActionWhereUniqueInput[]
    delete?: ProjectActionWhereUniqueInput | ProjectActionWhereUniqueInput[]
    connect?: ProjectActionWhereUniqueInput | ProjectActionWhereUniqueInput[]
    update?: ProjectActionUpdateWithWhereUniqueWithoutProjectInput | ProjectActionUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ProjectActionUpdateManyWithWhereWithoutProjectInput | ProjectActionUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ProjectActionScalarWhereInput | ProjectActionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutActivitiesInput = {
    create?: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivitiesInput
    connect?: UserWhereUniqueInput
  }

  export type ActivityParticipantCreateNestedManyWithoutActivityInput = {
    create?: XOR<ActivityParticipantCreateWithoutActivityInput, ActivityParticipantUncheckedCreateWithoutActivityInput> | ActivityParticipantCreateWithoutActivityInput[] | ActivityParticipantUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivityParticipantCreateOrConnectWithoutActivityInput | ActivityParticipantCreateOrConnectWithoutActivityInput[]
    createMany?: ActivityParticipantCreateManyActivityInputEnvelope
    connect?: ActivityParticipantWhereUniqueInput | ActivityParticipantWhereUniqueInput[]
  }

  export type ActivityLikeCreateNestedManyWithoutActivityInput = {
    create?: XOR<ActivityLikeCreateWithoutActivityInput, ActivityLikeUncheckedCreateWithoutActivityInput> | ActivityLikeCreateWithoutActivityInput[] | ActivityLikeUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivityLikeCreateOrConnectWithoutActivityInput | ActivityLikeCreateOrConnectWithoutActivityInput[]
    createMany?: ActivityLikeCreateManyActivityInputEnvelope
    connect?: ActivityLikeWhereUniqueInput | ActivityLikeWhereUniqueInput[]
  }

  export type ActivityCommentCreateNestedManyWithoutActivityInput = {
    create?: XOR<ActivityCommentCreateWithoutActivityInput, ActivityCommentUncheckedCreateWithoutActivityInput> | ActivityCommentCreateWithoutActivityInput[] | ActivityCommentUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivityCommentCreateOrConnectWithoutActivityInput | ActivityCommentCreateOrConnectWithoutActivityInput[]
    createMany?: ActivityCommentCreateManyActivityInputEnvelope
    connect?: ActivityCommentWhereUniqueInput | ActivityCommentWhereUniqueInput[]
  }

  export type ActivityParticipantUncheckedCreateNestedManyWithoutActivityInput = {
    create?: XOR<ActivityParticipantCreateWithoutActivityInput, ActivityParticipantUncheckedCreateWithoutActivityInput> | ActivityParticipantCreateWithoutActivityInput[] | ActivityParticipantUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivityParticipantCreateOrConnectWithoutActivityInput | ActivityParticipantCreateOrConnectWithoutActivityInput[]
    createMany?: ActivityParticipantCreateManyActivityInputEnvelope
    connect?: ActivityParticipantWhereUniqueInput | ActivityParticipantWhereUniqueInput[]
  }

  export type ActivityLikeUncheckedCreateNestedManyWithoutActivityInput = {
    create?: XOR<ActivityLikeCreateWithoutActivityInput, ActivityLikeUncheckedCreateWithoutActivityInput> | ActivityLikeCreateWithoutActivityInput[] | ActivityLikeUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivityLikeCreateOrConnectWithoutActivityInput | ActivityLikeCreateOrConnectWithoutActivityInput[]
    createMany?: ActivityLikeCreateManyActivityInputEnvelope
    connect?: ActivityLikeWhereUniqueInput | ActivityLikeWhereUniqueInput[]
  }

  export type ActivityCommentUncheckedCreateNestedManyWithoutActivityInput = {
    create?: XOR<ActivityCommentCreateWithoutActivityInput, ActivityCommentUncheckedCreateWithoutActivityInput> | ActivityCommentCreateWithoutActivityInput[] | ActivityCommentUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivityCommentCreateOrConnectWithoutActivityInput | ActivityCommentCreateOrConnectWithoutActivityInput[]
    createMany?: ActivityCommentCreateManyActivityInputEnvelope
    connect?: ActivityCommentWhereUniqueInput | ActivityCommentWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutActivitiesNestedInput = {
    create?: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivitiesInput
    upsert?: UserUpsertWithoutActivitiesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutActivitiesInput, UserUpdateWithoutActivitiesInput>, UserUncheckedUpdateWithoutActivitiesInput>
  }

  export type ActivityParticipantUpdateManyWithoutActivityNestedInput = {
    create?: XOR<ActivityParticipantCreateWithoutActivityInput, ActivityParticipantUncheckedCreateWithoutActivityInput> | ActivityParticipantCreateWithoutActivityInput[] | ActivityParticipantUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivityParticipantCreateOrConnectWithoutActivityInput | ActivityParticipantCreateOrConnectWithoutActivityInput[]
    upsert?: ActivityParticipantUpsertWithWhereUniqueWithoutActivityInput | ActivityParticipantUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: ActivityParticipantCreateManyActivityInputEnvelope
    set?: ActivityParticipantWhereUniqueInput | ActivityParticipantWhereUniqueInput[]
    disconnect?: ActivityParticipantWhereUniqueInput | ActivityParticipantWhereUniqueInput[]
    delete?: ActivityParticipantWhereUniqueInput | ActivityParticipantWhereUniqueInput[]
    connect?: ActivityParticipantWhereUniqueInput | ActivityParticipantWhereUniqueInput[]
    update?: ActivityParticipantUpdateWithWhereUniqueWithoutActivityInput | ActivityParticipantUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: ActivityParticipantUpdateManyWithWhereWithoutActivityInput | ActivityParticipantUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: ActivityParticipantScalarWhereInput | ActivityParticipantScalarWhereInput[]
  }

  export type ActivityLikeUpdateManyWithoutActivityNestedInput = {
    create?: XOR<ActivityLikeCreateWithoutActivityInput, ActivityLikeUncheckedCreateWithoutActivityInput> | ActivityLikeCreateWithoutActivityInput[] | ActivityLikeUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivityLikeCreateOrConnectWithoutActivityInput | ActivityLikeCreateOrConnectWithoutActivityInput[]
    upsert?: ActivityLikeUpsertWithWhereUniqueWithoutActivityInput | ActivityLikeUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: ActivityLikeCreateManyActivityInputEnvelope
    set?: ActivityLikeWhereUniqueInput | ActivityLikeWhereUniqueInput[]
    disconnect?: ActivityLikeWhereUniqueInput | ActivityLikeWhereUniqueInput[]
    delete?: ActivityLikeWhereUniqueInput | ActivityLikeWhereUniqueInput[]
    connect?: ActivityLikeWhereUniqueInput | ActivityLikeWhereUniqueInput[]
    update?: ActivityLikeUpdateWithWhereUniqueWithoutActivityInput | ActivityLikeUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: ActivityLikeUpdateManyWithWhereWithoutActivityInput | ActivityLikeUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: ActivityLikeScalarWhereInput | ActivityLikeScalarWhereInput[]
  }

  export type ActivityCommentUpdateManyWithoutActivityNestedInput = {
    create?: XOR<ActivityCommentCreateWithoutActivityInput, ActivityCommentUncheckedCreateWithoutActivityInput> | ActivityCommentCreateWithoutActivityInput[] | ActivityCommentUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivityCommentCreateOrConnectWithoutActivityInput | ActivityCommentCreateOrConnectWithoutActivityInput[]
    upsert?: ActivityCommentUpsertWithWhereUniqueWithoutActivityInput | ActivityCommentUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: ActivityCommentCreateManyActivityInputEnvelope
    set?: ActivityCommentWhereUniqueInput | ActivityCommentWhereUniqueInput[]
    disconnect?: ActivityCommentWhereUniqueInput | ActivityCommentWhereUniqueInput[]
    delete?: ActivityCommentWhereUniqueInput | ActivityCommentWhereUniqueInput[]
    connect?: ActivityCommentWhereUniqueInput | ActivityCommentWhereUniqueInput[]
    update?: ActivityCommentUpdateWithWhereUniqueWithoutActivityInput | ActivityCommentUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: ActivityCommentUpdateManyWithWhereWithoutActivityInput | ActivityCommentUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: ActivityCommentScalarWhereInput | ActivityCommentScalarWhereInput[]
  }

  export type ActivityParticipantUncheckedUpdateManyWithoutActivityNestedInput = {
    create?: XOR<ActivityParticipantCreateWithoutActivityInput, ActivityParticipantUncheckedCreateWithoutActivityInput> | ActivityParticipantCreateWithoutActivityInput[] | ActivityParticipantUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivityParticipantCreateOrConnectWithoutActivityInput | ActivityParticipantCreateOrConnectWithoutActivityInput[]
    upsert?: ActivityParticipantUpsertWithWhereUniqueWithoutActivityInput | ActivityParticipantUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: ActivityParticipantCreateManyActivityInputEnvelope
    set?: ActivityParticipantWhereUniqueInput | ActivityParticipantWhereUniqueInput[]
    disconnect?: ActivityParticipantWhereUniqueInput | ActivityParticipantWhereUniqueInput[]
    delete?: ActivityParticipantWhereUniqueInput | ActivityParticipantWhereUniqueInput[]
    connect?: ActivityParticipantWhereUniqueInput | ActivityParticipantWhereUniqueInput[]
    update?: ActivityParticipantUpdateWithWhereUniqueWithoutActivityInput | ActivityParticipantUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: ActivityParticipantUpdateManyWithWhereWithoutActivityInput | ActivityParticipantUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: ActivityParticipantScalarWhereInput | ActivityParticipantScalarWhereInput[]
  }

  export type ActivityLikeUncheckedUpdateManyWithoutActivityNestedInput = {
    create?: XOR<ActivityLikeCreateWithoutActivityInput, ActivityLikeUncheckedCreateWithoutActivityInput> | ActivityLikeCreateWithoutActivityInput[] | ActivityLikeUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivityLikeCreateOrConnectWithoutActivityInput | ActivityLikeCreateOrConnectWithoutActivityInput[]
    upsert?: ActivityLikeUpsertWithWhereUniqueWithoutActivityInput | ActivityLikeUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: ActivityLikeCreateManyActivityInputEnvelope
    set?: ActivityLikeWhereUniqueInput | ActivityLikeWhereUniqueInput[]
    disconnect?: ActivityLikeWhereUniqueInput | ActivityLikeWhereUniqueInput[]
    delete?: ActivityLikeWhereUniqueInput | ActivityLikeWhereUniqueInput[]
    connect?: ActivityLikeWhereUniqueInput | ActivityLikeWhereUniqueInput[]
    update?: ActivityLikeUpdateWithWhereUniqueWithoutActivityInput | ActivityLikeUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: ActivityLikeUpdateManyWithWhereWithoutActivityInput | ActivityLikeUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: ActivityLikeScalarWhereInput | ActivityLikeScalarWhereInput[]
  }

  export type ActivityCommentUncheckedUpdateManyWithoutActivityNestedInput = {
    create?: XOR<ActivityCommentCreateWithoutActivityInput, ActivityCommentUncheckedCreateWithoutActivityInput> | ActivityCommentCreateWithoutActivityInput[] | ActivityCommentUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivityCommentCreateOrConnectWithoutActivityInput | ActivityCommentCreateOrConnectWithoutActivityInput[]
    upsert?: ActivityCommentUpsertWithWhereUniqueWithoutActivityInput | ActivityCommentUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: ActivityCommentCreateManyActivityInputEnvelope
    set?: ActivityCommentWhereUniqueInput | ActivityCommentWhereUniqueInput[]
    disconnect?: ActivityCommentWhereUniqueInput | ActivityCommentWhereUniqueInput[]
    delete?: ActivityCommentWhereUniqueInput | ActivityCommentWhereUniqueInput[]
    connect?: ActivityCommentWhereUniqueInput | ActivityCommentWhereUniqueInput[]
    update?: ActivityCommentUpdateWithWhereUniqueWithoutActivityInput | ActivityCommentUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: ActivityCommentUpdateManyWithWhereWithoutActivityInput | ActivityCommentUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: ActivityCommentScalarWhereInput | ActivityCommentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutActivityParticipantsInput = {
    create?: XOR<UserCreateWithoutActivityParticipantsInput, UserUncheckedCreateWithoutActivityParticipantsInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivityParticipantsInput
    connect?: UserWhereUniqueInput
  }

  export type ActivityCreateNestedOneWithoutParticipantsInput = {
    create?: XOR<ActivityCreateWithoutParticipantsInput, ActivityUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: ActivityCreateOrConnectWithoutParticipantsInput
    connect?: ActivityWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutActivityParticipantsNestedInput = {
    create?: XOR<UserCreateWithoutActivityParticipantsInput, UserUncheckedCreateWithoutActivityParticipantsInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivityParticipantsInput
    upsert?: UserUpsertWithoutActivityParticipantsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutActivityParticipantsInput, UserUpdateWithoutActivityParticipantsInput>, UserUncheckedUpdateWithoutActivityParticipantsInput>
  }

  export type ActivityUpdateOneRequiredWithoutParticipantsNestedInput = {
    create?: XOR<ActivityCreateWithoutParticipantsInput, ActivityUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: ActivityCreateOrConnectWithoutParticipantsInput
    upsert?: ActivityUpsertWithoutParticipantsInput
    connect?: ActivityWhereUniqueInput
    update?: XOR<XOR<ActivityUpdateToOneWithWhereWithoutParticipantsInput, ActivityUpdateWithoutParticipantsInput>, ActivityUncheckedUpdateWithoutParticipantsInput>
  }

  export type UserCreateNestedOneWithoutActivityLikesInput = {
    create?: XOR<UserCreateWithoutActivityLikesInput, UserUncheckedCreateWithoutActivityLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivityLikesInput
    connect?: UserWhereUniqueInput
  }

  export type ActivityCreateNestedOneWithoutLikesInput = {
    create?: XOR<ActivityCreateWithoutLikesInput, ActivityUncheckedCreateWithoutLikesInput>
    connectOrCreate?: ActivityCreateOrConnectWithoutLikesInput
    connect?: ActivityWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutActivityLikesNestedInput = {
    create?: XOR<UserCreateWithoutActivityLikesInput, UserUncheckedCreateWithoutActivityLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivityLikesInput
    upsert?: UserUpsertWithoutActivityLikesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutActivityLikesInput, UserUpdateWithoutActivityLikesInput>, UserUncheckedUpdateWithoutActivityLikesInput>
  }

  export type ActivityUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<ActivityCreateWithoutLikesInput, ActivityUncheckedCreateWithoutLikesInput>
    connectOrCreate?: ActivityCreateOrConnectWithoutLikesInput
    upsert?: ActivityUpsertWithoutLikesInput
    connect?: ActivityWhereUniqueInput
    update?: XOR<XOR<ActivityUpdateToOneWithWhereWithoutLikesInput, ActivityUpdateWithoutLikesInput>, ActivityUncheckedUpdateWithoutLikesInput>
  }

  export type UserCreateNestedOneWithoutActivityCommentsInput = {
    create?: XOR<UserCreateWithoutActivityCommentsInput, UserUncheckedCreateWithoutActivityCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivityCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type ActivityCreateNestedOneWithoutCommentsInput = {
    create?: XOR<ActivityCreateWithoutCommentsInput, ActivityUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: ActivityCreateOrConnectWithoutCommentsInput
    connect?: ActivityWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutActivityCommentsNestedInput = {
    create?: XOR<UserCreateWithoutActivityCommentsInput, UserUncheckedCreateWithoutActivityCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivityCommentsInput
    upsert?: UserUpsertWithoutActivityCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutActivityCommentsInput, UserUpdateWithoutActivityCommentsInput>, UserUncheckedUpdateWithoutActivityCommentsInput>
  }

  export type ActivityUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<ActivityCreateWithoutCommentsInput, ActivityUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: ActivityCreateOrConnectWithoutCommentsInput
    upsert?: ActivityUpsertWithoutCommentsInput
    connect?: ActivityWhereUniqueInput
    update?: XOR<XOR<ActivityUpdateToOneWithWhereWithoutCommentsInput, ActivityUpdateWithoutCommentsInput>, ActivityUncheckedUpdateWithoutCommentsInput>
  }

  export type UserCreateNestedOneWithoutUserBindingsInput = {
    create?: XOR<UserCreateWithoutUserBindingsInput, UserUncheckedCreateWithoutUserBindingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserBindingsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserBindingsNestedInput = {
    create?: XOR<UserCreateWithoutUserBindingsInput, UserUncheckedCreateWithoutUserBindingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserBindingsInput
    upsert?: UserUpsertWithoutUserBindingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserBindingsInput, UserUpdateWithoutUserBindingsInput>, UserUncheckedUpdateWithoutUserBindingsInput>
  }

  export type UserCreateNestedOneWithoutLoginLogsInput = {
    create?: XOR<UserCreateWithoutLoginLogsInput, UserUncheckedCreateWithoutLoginLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLoginLogsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutLoginLogsNestedInput = {
    create?: XOR<UserCreateWithoutLoginLogsInput, UserUncheckedCreateWithoutLoginLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLoginLogsInput
    upsert?: UserUpsertWithoutLoginLogsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLoginLogsInput, UserUpdateWithoutLoginLogsInput>, UserUncheckedUpdateWithoutLoginLogsInput>
  }

  export type UserCreateNestedOneWithoutFeedbacksInput = {
    create?: XOR<UserCreateWithoutFeedbacksInput, UserUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbacksInput
    connect?: UserWhereUniqueInput
  }

  export type FeedbackReplyCreateNestedManyWithoutFeedbackInput = {
    create?: XOR<FeedbackReplyCreateWithoutFeedbackInput, FeedbackReplyUncheckedCreateWithoutFeedbackInput> | FeedbackReplyCreateWithoutFeedbackInput[] | FeedbackReplyUncheckedCreateWithoutFeedbackInput[]
    connectOrCreate?: FeedbackReplyCreateOrConnectWithoutFeedbackInput | FeedbackReplyCreateOrConnectWithoutFeedbackInput[]
    createMany?: FeedbackReplyCreateManyFeedbackInputEnvelope
    connect?: FeedbackReplyWhereUniqueInput | FeedbackReplyWhereUniqueInput[]
  }

  export type FeedbackReplyUncheckedCreateNestedManyWithoutFeedbackInput = {
    create?: XOR<FeedbackReplyCreateWithoutFeedbackInput, FeedbackReplyUncheckedCreateWithoutFeedbackInput> | FeedbackReplyCreateWithoutFeedbackInput[] | FeedbackReplyUncheckedCreateWithoutFeedbackInput[]
    connectOrCreate?: FeedbackReplyCreateOrConnectWithoutFeedbackInput | FeedbackReplyCreateOrConnectWithoutFeedbackInput[]
    createMany?: FeedbackReplyCreateManyFeedbackInputEnvelope
    connect?: FeedbackReplyWhereUniqueInput | FeedbackReplyWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutFeedbacksNestedInput = {
    create?: XOR<UserCreateWithoutFeedbacksInput, UserUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbacksInput
    upsert?: UserUpsertWithoutFeedbacksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFeedbacksInput, UserUpdateWithoutFeedbacksInput>, UserUncheckedUpdateWithoutFeedbacksInput>
  }

  export type FeedbackReplyUpdateManyWithoutFeedbackNestedInput = {
    create?: XOR<FeedbackReplyCreateWithoutFeedbackInput, FeedbackReplyUncheckedCreateWithoutFeedbackInput> | FeedbackReplyCreateWithoutFeedbackInput[] | FeedbackReplyUncheckedCreateWithoutFeedbackInput[]
    connectOrCreate?: FeedbackReplyCreateOrConnectWithoutFeedbackInput | FeedbackReplyCreateOrConnectWithoutFeedbackInput[]
    upsert?: FeedbackReplyUpsertWithWhereUniqueWithoutFeedbackInput | FeedbackReplyUpsertWithWhereUniqueWithoutFeedbackInput[]
    createMany?: FeedbackReplyCreateManyFeedbackInputEnvelope
    set?: FeedbackReplyWhereUniqueInput | FeedbackReplyWhereUniqueInput[]
    disconnect?: FeedbackReplyWhereUniqueInput | FeedbackReplyWhereUniqueInput[]
    delete?: FeedbackReplyWhereUniqueInput | FeedbackReplyWhereUniqueInput[]
    connect?: FeedbackReplyWhereUniqueInput | FeedbackReplyWhereUniqueInput[]
    update?: FeedbackReplyUpdateWithWhereUniqueWithoutFeedbackInput | FeedbackReplyUpdateWithWhereUniqueWithoutFeedbackInput[]
    updateMany?: FeedbackReplyUpdateManyWithWhereWithoutFeedbackInput | FeedbackReplyUpdateManyWithWhereWithoutFeedbackInput[]
    deleteMany?: FeedbackReplyScalarWhereInput | FeedbackReplyScalarWhereInput[]
  }

  export type FeedbackReplyUncheckedUpdateManyWithoutFeedbackNestedInput = {
    create?: XOR<FeedbackReplyCreateWithoutFeedbackInput, FeedbackReplyUncheckedCreateWithoutFeedbackInput> | FeedbackReplyCreateWithoutFeedbackInput[] | FeedbackReplyUncheckedCreateWithoutFeedbackInput[]
    connectOrCreate?: FeedbackReplyCreateOrConnectWithoutFeedbackInput | FeedbackReplyCreateOrConnectWithoutFeedbackInput[]
    upsert?: FeedbackReplyUpsertWithWhereUniqueWithoutFeedbackInput | FeedbackReplyUpsertWithWhereUniqueWithoutFeedbackInput[]
    createMany?: FeedbackReplyCreateManyFeedbackInputEnvelope
    set?: FeedbackReplyWhereUniqueInput | FeedbackReplyWhereUniqueInput[]
    disconnect?: FeedbackReplyWhereUniqueInput | FeedbackReplyWhereUniqueInput[]
    delete?: FeedbackReplyWhereUniqueInput | FeedbackReplyWhereUniqueInput[]
    connect?: FeedbackReplyWhereUniqueInput | FeedbackReplyWhereUniqueInput[]
    update?: FeedbackReplyUpdateWithWhereUniqueWithoutFeedbackInput | FeedbackReplyUpdateWithWhereUniqueWithoutFeedbackInput[]
    updateMany?: FeedbackReplyUpdateManyWithWhereWithoutFeedbackInput | FeedbackReplyUpdateManyWithWhereWithoutFeedbackInput[]
    deleteMany?: FeedbackReplyScalarWhereInput | FeedbackReplyScalarWhereInput[]
  }

  export type FeedbackCreateNestedOneWithoutReplyInput = {
    create?: XOR<FeedbackCreateWithoutReplyInput, FeedbackUncheckedCreateWithoutReplyInput>
    connectOrCreate?: FeedbackCreateOrConnectWithoutReplyInput
    connect?: FeedbackWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutFeedbackRepliesInput = {
    create?: XOR<UserCreateWithoutFeedbackRepliesInput, UserUncheckedCreateWithoutFeedbackRepliesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbackRepliesInput
    connect?: UserWhereUniqueInput
  }

  export type FeedbackUpdateOneRequiredWithoutReplyNestedInput = {
    create?: XOR<FeedbackCreateWithoutReplyInput, FeedbackUncheckedCreateWithoutReplyInput>
    connectOrCreate?: FeedbackCreateOrConnectWithoutReplyInput
    upsert?: FeedbackUpsertWithoutReplyInput
    connect?: FeedbackWhereUniqueInput
    update?: XOR<XOR<FeedbackUpdateToOneWithWhereWithoutReplyInput, FeedbackUpdateWithoutReplyInput>, FeedbackUncheckedUpdateWithoutReplyInput>
  }

  export type UserUpdateOneRequiredWithoutFeedbackRepliesNestedInput = {
    create?: XOR<UserCreateWithoutFeedbackRepliesInput, UserUncheckedCreateWithoutFeedbackRepliesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbackRepliesInput
    upsert?: UserUpsertWithoutFeedbackRepliesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFeedbackRepliesInput, UserUpdateWithoutFeedbackRepliesInput>, UserUncheckedUpdateWithoutFeedbackRepliesInput>
  }

  export type UserCreateNestedOneWithoutCreditLogsInput = {
    create?: XOR<UserCreateWithoutCreditLogsInput, UserUncheckedCreateWithoutCreditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreditLogsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCreditLogsNestedInput = {
    create?: XOR<UserCreateWithoutCreditLogsInput, UserUncheckedCreateWithoutCreditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreditLogsInput
    upsert?: UserUpsertWithoutCreditLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreditLogsInput, UserUpdateWithoutCreditLogsInput>, UserUncheckedUpdateWithoutCreditLogsInput>
  }

  export type UserBadgeRecordCreateNestedManyWithoutBadgeInput = {
    create?: XOR<UserBadgeRecordCreateWithoutBadgeInput, UserBadgeRecordUncheckedCreateWithoutBadgeInput> | UserBadgeRecordCreateWithoutBadgeInput[] | UserBadgeRecordUncheckedCreateWithoutBadgeInput[]
    connectOrCreate?: UserBadgeRecordCreateOrConnectWithoutBadgeInput | UserBadgeRecordCreateOrConnectWithoutBadgeInput[]
    createMany?: UserBadgeRecordCreateManyBadgeInputEnvelope
    connect?: UserBadgeRecordWhereUniqueInput | UserBadgeRecordWhereUniqueInput[]
  }

  export type UserBadgeRecordUncheckedCreateNestedManyWithoutBadgeInput = {
    create?: XOR<UserBadgeRecordCreateWithoutBadgeInput, UserBadgeRecordUncheckedCreateWithoutBadgeInput> | UserBadgeRecordCreateWithoutBadgeInput[] | UserBadgeRecordUncheckedCreateWithoutBadgeInput[]
    connectOrCreate?: UserBadgeRecordCreateOrConnectWithoutBadgeInput | UserBadgeRecordCreateOrConnectWithoutBadgeInput[]
    createMany?: UserBadgeRecordCreateManyBadgeInputEnvelope
    connect?: UserBadgeRecordWhereUniqueInput | UserBadgeRecordWhereUniqueInput[]
  }

  export type UserBadgeRecordUpdateManyWithoutBadgeNestedInput = {
    create?: XOR<UserBadgeRecordCreateWithoutBadgeInput, UserBadgeRecordUncheckedCreateWithoutBadgeInput> | UserBadgeRecordCreateWithoutBadgeInput[] | UserBadgeRecordUncheckedCreateWithoutBadgeInput[]
    connectOrCreate?: UserBadgeRecordCreateOrConnectWithoutBadgeInput | UserBadgeRecordCreateOrConnectWithoutBadgeInput[]
    upsert?: UserBadgeRecordUpsertWithWhereUniqueWithoutBadgeInput | UserBadgeRecordUpsertWithWhereUniqueWithoutBadgeInput[]
    createMany?: UserBadgeRecordCreateManyBadgeInputEnvelope
    set?: UserBadgeRecordWhereUniqueInput | UserBadgeRecordWhereUniqueInput[]
    disconnect?: UserBadgeRecordWhereUniqueInput | UserBadgeRecordWhereUniqueInput[]
    delete?: UserBadgeRecordWhereUniqueInput | UserBadgeRecordWhereUniqueInput[]
    connect?: UserBadgeRecordWhereUniqueInput | UserBadgeRecordWhereUniqueInput[]
    update?: UserBadgeRecordUpdateWithWhereUniqueWithoutBadgeInput | UserBadgeRecordUpdateWithWhereUniqueWithoutBadgeInput[]
    updateMany?: UserBadgeRecordUpdateManyWithWhereWithoutBadgeInput | UserBadgeRecordUpdateManyWithWhereWithoutBadgeInput[]
    deleteMany?: UserBadgeRecordScalarWhereInput | UserBadgeRecordScalarWhereInput[]
  }

  export type UserBadgeRecordUncheckedUpdateManyWithoutBadgeNestedInput = {
    create?: XOR<UserBadgeRecordCreateWithoutBadgeInput, UserBadgeRecordUncheckedCreateWithoutBadgeInput> | UserBadgeRecordCreateWithoutBadgeInput[] | UserBadgeRecordUncheckedCreateWithoutBadgeInput[]
    connectOrCreate?: UserBadgeRecordCreateOrConnectWithoutBadgeInput | UserBadgeRecordCreateOrConnectWithoutBadgeInput[]
    upsert?: UserBadgeRecordUpsertWithWhereUniqueWithoutBadgeInput | UserBadgeRecordUpsertWithWhereUniqueWithoutBadgeInput[]
    createMany?: UserBadgeRecordCreateManyBadgeInputEnvelope
    set?: UserBadgeRecordWhereUniqueInput | UserBadgeRecordWhereUniqueInput[]
    disconnect?: UserBadgeRecordWhereUniqueInput | UserBadgeRecordWhereUniqueInput[]
    delete?: UserBadgeRecordWhereUniqueInput | UserBadgeRecordWhereUniqueInput[]
    connect?: UserBadgeRecordWhereUniqueInput | UserBadgeRecordWhereUniqueInput[]
    update?: UserBadgeRecordUpdateWithWhereUniqueWithoutBadgeInput | UserBadgeRecordUpdateWithWhereUniqueWithoutBadgeInput[]
    updateMany?: UserBadgeRecordUpdateManyWithWhereWithoutBadgeInput | UserBadgeRecordUpdateManyWithWhereWithoutBadgeInput[]
    deleteMany?: UserBadgeRecordScalarWhereInput | UserBadgeRecordScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutBadgeRecordsInput = {
    create?: XOR<UserCreateWithoutBadgeRecordsInput, UserUncheckedCreateWithoutBadgeRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBadgeRecordsInput
    connect?: UserWhereUniqueInput
  }

  export type UserBadgeCreateNestedOneWithoutUserRecordsInput = {
    create?: XOR<UserBadgeCreateWithoutUserRecordsInput, UserBadgeUncheckedCreateWithoutUserRecordsInput>
    connectOrCreate?: UserBadgeCreateOrConnectWithoutUserRecordsInput
    connect?: UserBadgeWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutBadgeRecordsNestedInput = {
    create?: XOR<UserCreateWithoutBadgeRecordsInput, UserUncheckedCreateWithoutBadgeRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBadgeRecordsInput
    upsert?: UserUpsertWithoutBadgeRecordsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBadgeRecordsInput, UserUpdateWithoutBadgeRecordsInput>, UserUncheckedUpdateWithoutBadgeRecordsInput>
  }

  export type UserBadgeUpdateOneRequiredWithoutUserRecordsNestedInput = {
    create?: XOR<UserBadgeCreateWithoutUserRecordsInput, UserBadgeUncheckedCreateWithoutUserRecordsInput>
    connectOrCreate?: UserBadgeCreateOrConnectWithoutUserRecordsInput
    upsert?: UserBadgeUpsertWithoutUserRecordsInput
    connect?: UserBadgeWhereUniqueInput
    update?: XOR<XOR<UserBadgeUpdateToOneWithWhereWithoutUserRecordsInput, UserBadgeUpdateWithoutUserRecordsInput>, UserBadgeUncheckedUpdateWithoutUserRecordsInput>
  }

  export type UserCreateNestedOneWithoutCheckInsInput = {
    create?: XOR<UserCreateWithoutCheckInsInput, UserUncheckedCreateWithoutCheckInsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCheckInsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCheckInsNestedInput = {
    create?: XOR<UserCreateWithoutCheckInsInput, UserUncheckedCreateWithoutCheckInsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCheckInsInput
    upsert?: UserUpsertWithoutCheckInsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCheckInsInput, UserUpdateWithoutCheckInsInput>, UserUncheckedUpdateWithoutCheckInsInput>
  }

  export type UserRoleCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type RolePermissionCreateNestedManyWithoutRoleInput = {
    create?: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput> | RolePermissionCreateWithoutRoleInput[] | RolePermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutRoleInput | RolePermissionCreateOrConnectWithoutRoleInput[]
    createMany?: RolePermissionCreateManyRoleInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type UserRoleUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type RolePermissionUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput> | RolePermissionCreateWithoutRoleInput[] | RolePermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutRoleInput | RolePermissionCreateOrConnectWithoutRoleInput[]
    createMany?: RolePermissionCreateManyRoleInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type UserRoleUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutRoleInput | UserRoleUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutRoleInput | UserRoleUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutRoleInput | UserRoleUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type RolePermissionUpdateManyWithoutRoleNestedInput = {
    create?: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput> | RolePermissionCreateWithoutRoleInput[] | RolePermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutRoleInput | RolePermissionCreateOrConnectWithoutRoleInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutRoleInput | RolePermissionUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: RolePermissionCreateManyRoleInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutRoleInput | RolePermissionUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutRoleInput | RolePermissionUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type UserRoleUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutRoleInput | UserRoleUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutRoleInput | UserRoleUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutRoleInput | UserRoleUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type RolePermissionUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput> | RolePermissionCreateWithoutRoleInput[] | RolePermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutRoleInput | RolePermissionCreateOrConnectWithoutRoleInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutRoleInput | RolePermissionUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: RolePermissionCreateManyRoleInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutRoleInput | RolePermissionUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutRoleInput | RolePermissionUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type RolePermissionCreateNestedManyWithoutPermissionInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type RolePermissionUncheckedCreateNestedManyWithoutPermissionInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type RolePermissionUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutPermissionInput | RolePermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutPermissionInput | RolePermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutPermissionInput | RolePermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type RolePermissionUncheckedUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutPermissionInput | RolePermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutPermissionInput | RolePermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutPermissionInput | RolePermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type RoleCreateNestedOneWithoutPermissionsInput = {
    create?: XOR<RoleCreateWithoutPermissionsInput, RoleUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: RoleCreateOrConnectWithoutPermissionsInput
    connect?: RoleWhereUniqueInput
  }

  export type PermissionCreateNestedOneWithoutRolesInput = {
    create?: XOR<PermissionCreateWithoutRolesInput, PermissionUncheckedCreateWithoutRolesInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutRolesInput
    connect?: PermissionWhereUniqueInput
  }

  export type RoleUpdateOneRequiredWithoutPermissionsNestedInput = {
    create?: XOR<RoleCreateWithoutPermissionsInput, RoleUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: RoleCreateOrConnectWithoutPermissionsInput
    upsert?: RoleUpsertWithoutPermissionsInput
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutPermissionsInput, RoleUpdateWithoutPermissionsInput>, RoleUncheckedUpdateWithoutPermissionsInput>
  }

  export type PermissionUpdateOneRequiredWithoutRolesNestedInput = {
    create?: XOR<PermissionCreateWithoutRolesInput, PermissionUncheckedCreateWithoutRolesInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutRolesInput
    upsert?: PermissionUpsertWithoutRolesInput
    connect?: PermissionWhereUniqueInput
    update?: XOR<XOR<PermissionUpdateToOneWithWhereWithoutRolesInput, PermissionUpdateWithoutRolesInput>, PermissionUncheckedUpdateWithoutRolesInput>
  }

  export type UserCreateNestedOneWithoutRolesInput = {
    create?: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRolesInput
    connect?: UserWhereUniqueInput
  }

  export type RoleCreateNestedOneWithoutUserRolesInput = {
    create?: XOR<RoleCreateWithoutUserRolesInput, RoleUncheckedCreateWithoutUserRolesInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUserRolesInput
    connect?: RoleWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRolesNestedInput = {
    create?: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRolesInput
    upsert?: UserUpsertWithoutRolesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRolesInput, UserUpdateWithoutRolesInput>, UserUncheckedUpdateWithoutRolesInput>
  }

  export type RoleUpdateOneRequiredWithoutUserRolesNestedInput = {
    create?: XOR<RoleCreateWithoutUserRolesInput, RoleUncheckedCreateWithoutUserRolesInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUserRolesInput
    upsert?: RoleUpsertWithoutUserRolesInput
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutUserRolesInput, RoleUpdateWithoutUserRolesInput>, RoleUncheckedUpdateWithoutUserRolesInput>
  }

  export type UserCreateNestedOneWithoutOperationLogsInput = {
    create?: XOR<UserCreateWithoutOperationLogsInput, UserUncheckedCreateWithoutOperationLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOperationLogsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutOperationLogsNestedInput = {
    create?: XOR<UserCreateWithoutOperationLogsInput, UserUncheckedCreateWithoutOperationLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOperationLogsInput
    upsert?: UserUpsertWithoutOperationLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOperationLogsInput, UserUpdateWithoutOperationLogsInput>, UserUncheckedUpdateWithoutOperationLogsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type TopicCreateWithoutAuthorInput = {
    id?: string
    title: string
    content: string
    contentType?: string
    summary?: string | null
    category: string
    tags?: string | null
    topicType?: string
    demandType?: string | null
    skillsNeeded?: string | null
    skillsProvided?: string | null
    threshold?: number
    wantToHearCount?: number
    canTellCount?: number
    status?: string
    teamSize?: number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: string | null
    website?: string | null
    github?: string | null
    interestedCount?: number
    duration?: string | null
    targetAudience?: string | null
    scheduledTime?: Date | string | null
    deadline?: Date | string | null
    budget?: string | null
    contactInfo?: string | null
    images?: string | null
    documents?: string | null
    videos?: string | null
    links?: string | null
    quickActions?: string | null
    visibility?: string
    viewsCount?: number
    likesCount?: number
    commentsCount?: number
    bookmarksCount?: number
    hotScore?: number
    trendingScore?: number
    isHot?: boolean
    publishedAt?: Date | string | null
    lastActiveAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentCreateNestedManyWithoutTopicInput
    likes?: LikeCreateNestedManyWithoutTopicInput
    bookmarks?: BookmarkCreateNestedManyWithoutTopicInput
    notifications?: NotificationCreateNestedManyWithoutTopicInput
    userActions?: UserActionCreateNestedManyWithoutTopicInput
    quickActionsList?: TopicQuickActionCreateNestedManyWithoutTopicInput
    actions?: TopicActionCreateNestedManyWithoutTopicInput
  }

  export type TopicUncheckedCreateWithoutAuthorInput = {
    id?: string
    title: string
    content: string
    contentType?: string
    summary?: string | null
    category: string
    tags?: string | null
    topicType?: string
    demandType?: string | null
    skillsNeeded?: string | null
    skillsProvided?: string | null
    threshold?: number
    wantToHearCount?: number
    canTellCount?: number
    status?: string
    teamSize?: number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: string | null
    website?: string | null
    github?: string | null
    interestedCount?: number
    duration?: string | null
    targetAudience?: string | null
    scheduledTime?: Date | string | null
    deadline?: Date | string | null
    budget?: string | null
    contactInfo?: string | null
    images?: string | null
    documents?: string | null
    videos?: string | null
    links?: string | null
    quickActions?: string | null
    visibility?: string
    viewsCount?: number
    likesCount?: number
    commentsCount?: number
    bookmarksCount?: number
    hotScore?: number
    trendingScore?: number
    isHot?: boolean
    publishedAt?: Date | string | null
    lastActiveAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentUncheckedCreateNestedManyWithoutTopicInput
    likes?: LikeUncheckedCreateNestedManyWithoutTopicInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutTopicInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTopicInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutTopicInput
    quickActionsList?: TopicQuickActionUncheckedCreateNestedManyWithoutTopicInput
    actions?: TopicActionUncheckedCreateNestedManyWithoutTopicInput
  }

  export type TopicCreateOrConnectWithoutAuthorInput = {
    where: TopicWhereUniqueInput
    create: XOR<TopicCreateWithoutAuthorInput, TopicUncheckedCreateWithoutAuthorInput>
  }

  export type TopicCreateManyAuthorInputEnvelope = {
    data: TopicCreateManyAuthorInput | TopicCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type ProjectCreateWithoutAuthorInput = {
    id?: string
    category: string
    title: string
    description: string
    tags?: string | null
    teamSize?: number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: string | null
    website?: string | null
    github?: string | null
    viewCount?: number
    likeCount?: number
    commentCount?: number
    interestedCount?: number
    images?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentCreateNestedManyWithoutProjectInput
    actions?: ProjectActionCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutAuthorInput = {
    id?: string
    category: string
    title: string
    description: string
    tags?: string | null
    teamSize?: number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: string | null
    website?: string | null
    github?: string | null
    viewCount?: number
    likeCount?: number
    commentCount?: number
    interestedCount?: number
    images?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
    actions?: ProjectActionUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutAuthorInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutAuthorInput, ProjectUncheckedCreateWithoutAuthorInput>
  }

  export type ProjectCreateManyAuthorInputEnvelope = {
    data: ProjectCreateManyAuthorInput | ProjectCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutAuthorInput = {
    id?: string
    content: string
    images?: string | null
    rootId?: string | null
    repliesCount?: number
    likesCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    topic?: TopicCreateNestedOneWithoutCommentsInput
    project?: ProjectCreateNestedOneWithoutCommentsInput
    parent?: CommentCreateNestedOneWithoutRepliesInput
    replies?: CommentCreateNestedManyWithoutParentInput
    likes?: LikeCreateNestedManyWithoutCommentInput
    notifications?: NotificationCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutAuthorInput = {
    id?: string
    content: string
    images?: string | null
    parentId?: string | null
    rootId?: string | null
    repliesCount?: number
    likesCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    topicId?: string | null
    projectId?: string | null
    replies?: CommentUncheckedCreateNestedManyWithoutParentInput
    likes?: LikeUncheckedCreateNestedManyWithoutCommentInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutAuthorInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput>
  }

  export type CommentCreateManyAuthorInputEnvelope = {
    data: CommentCreateManyAuthorInput | CommentCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type LikeCreateWithoutUserInput = {
    id?: string
    targetType: string
    createdAt?: Date | string
    topic?: TopicCreateNestedOneWithoutLikesInput
    comment?: CommentCreateNestedOneWithoutLikesInput
  }

  export type LikeUncheckedCreateWithoutUserInput = {
    id?: string
    targetType: string
    targetId: string
    createdAt?: Date | string
  }

  export type LikeCreateOrConnectWithoutUserInput = {
    where: LikeWhereUniqueInput
    create: XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput>
  }

  export type LikeCreateManyUserInputEnvelope = {
    data: LikeCreateManyUserInput | LikeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BookmarkCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    topic: TopicCreateNestedOneWithoutBookmarksInput
  }

  export type BookmarkUncheckedCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    topicId: string
  }

  export type BookmarkCreateOrConnectWithoutUserInput = {
    where: BookmarkWhereUniqueInput
    create: XOR<BookmarkCreateWithoutUserInput, BookmarkUncheckedCreateWithoutUserInput>
  }

  export type BookmarkCreateManyUserInputEnvelope = {
    data: BookmarkCreateManyUserInput | BookmarkCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FollowCreateWithoutFollowerInput = {
    id?: string
    createdAt?: Date | string
    following: UserCreateNestedOneWithoutFollowersInput
  }

  export type FollowUncheckedCreateWithoutFollowerInput = {
    id?: string
    createdAt?: Date | string
    followingId: string
  }

  export type FollowCreateOrConnectWithoutFollowerInput = {
    where: FollowWhereUniqueInput
    create: XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput>
  }

  export type FollowCreateManyFollowerInputEnvelope = {
    data: FollowCreateManyFollowerInput | FollowCreateManyFollowerInput[]
    skipDuplicates?: boolean
  }

  export type FollowCreateWithoutFollowingInput = {
    id?: string
    createdAt?: Date | string
    follower: UserCreateNestedOneWithoutFollowsInput
  }

  export type FollowUncheckedCreateWithoutFollowingInput = {
    id?: string
    createdAt?: Date | string
    followerId: string
  }

  export type FollowCreateOrConnectWithoutFollowingInput = {
    where: FollowWhereUniqueInput
    create: XOR<FollowCreateWithoutFollowingInput, FollowUncheckedCreateWithoutFollowingInput>
  }

  export type FollowCreateManyFollowingInputEnvelope = {
    data: FollowCreateManyFollowingInput | FollowCreateManyFollowingInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutActorInput = {
    id?: string
    type: string
    title: string
    content: string
    isRead?: boolean
    readAt?: Date | string | null
    link?: string | null
    createdAt?: Date | string
    targetType: string
    user: UserCreateNestedOneWithoutReceivedNotificationsInput
    topic?: TopicCreateNestedOneWithoutNotificationsInput
    comment?: CommentCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutActorInput = {
    id?: string
    type: string
    title: string
    content: string
    isRead?: boolean
    readAt?: Date | string | null
    link?: string | null
    createdAt?: Date | string
    userId: string
    targetType: string
    targetId: string
  }

  export type NotificationCreateOrConnectWithoutActorInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutActorInput, NotificationUncheckedCreateWithoutActorInput>
  }

  export type NotificationCreateManyActorInputEnvelope = {
    data: NotificationCreateManyActorInput | NotificationCreateManyActorInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    id?: string
    type: string
    title: string
    content: string
    isRead?: boolean
    readAt?: Date | string | null
    link?: string | null
    createdAt?: Date | string
    targetType: string
    actor?: UserCreateNestedOneWithoutSentNotificationsInput
    topic?: TopicCreateNestedOneWithoutNotificationsInput
    comment?: CommentCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    title: string
    content: string
    isRead?: boolean
    readAt?: Date | string | null
    link?: string | null
    createdAt?: Date | string
    actorId?: string | null
    targetType: string
    targetId: string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserActionCreateWithoutUserInput = {
    id?: string
    actionType: string
    targetType: string
    metadata?: string | null
    createdAt?: Date | string
    topic?: TopicCreateNestedOneWithoutUserActionsInput
  }

  export type UserActionUncheckedCreateWithoutUserInput = {
    id?: string
    actionType: string
    targetType: string
    targetId: string
    metadata?: string | null
    createdAt?: Date | string
  }

  export type UserActionCreateOrConnectWithoutUserInput = {
    where: UserActionWhereUniqueInput
    create: XOR<UserActionCreateWithoutUserInput, UserActionUncheckedCreateWithoutUserInput>
  }

  export type UserActionCreateManyUserInputEnvelope = {
    data: UserActionCreateManyUserInput | UserActionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TopicQuickActionCreateWithoutUserInput = {
    id?: string
    actionType: string
    createdAt?: Date | string
    topic: TopicCreateNestedOneWithoutQuickActionsListInput
  }

  export type TopicQuickActionUncheckedCreateWithoutUserInput = {
    id?: string
    actionType: string
    createdAt?: Date | string
    topicId: string
  }

  export type TopicQuickActionCreateOrConnectWithoutUserInput = {
    where: TopicQuickActionWhereUniqueInput
    create: XOR<TopicQuickActionCreateWithoutUserInput, TopicQuickActionUncheckedCreateWithoutUserInput>
  }

  export type TopicQuickActionCreateManyUserInputEnvelope = {
    data: TopicQuickActionCreateManyUserInput | TopicQuickActionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TopicActionCreateWithoutUserInput = {
    id?: string
    type: string
    createdAt?: Date | string
    topic: TopicCreateNestedOneWithoutActionsInput
  }

  export type TopicActionUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    topicId: string
    createdAt?: Date | string
  }

  export type TopicActionCreateOrConnectWithoutUserInput = {
    where: TopicActionWhereUniqueInput
    create: XOR<TopicActionCreateWithoutUserInput, TopicActionUncheckedCreateWithoutUserInput>
  }

  export type TopicActionCreateManyUserInputEnvelope = {
    data: TopicActionCreateManyUserInput | TopicActionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProjectActionCreateWithoutUserInput = {
    id?: string
    type: string
    createdAt?: Date | string
    project: ProjectCreateNestedOneWithoutActionsInput
  }

  export type ProjectActionUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    projectId: string
    createdAt?: Date | string
  }

  export type ProjectActionCreateOrConnectWithoutUserInput = {
    where: ProjectActionWhereUniqueInput
    create: XOR<ProjectActionCreateWithoutUserInput, ProjectActionUncheckedCreateWithoutUserInput>
  }

  export type ProjectActionCreateManyUserInputEnvelope = {
    data: ProjectActionCreateManyUserInput | ProjectActionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ActivityCreateWithoutAuthorInput = {
    id?: string
    title: string
    description: string
    location: string
    startTime: Date | string
    endTime?: Date | string | null
    maxParticipants?: number | null
    category: string
    tags?: string | null
    cover?: string | null
    images?: string | null
    participantsCount?: number
    likesCount?: number
    commentsCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: ActivityParticipantCreateNestedManyWithoutActivityInput
    likes?: ActivityLikeCreateNestedManyWithoutActivityInput
    comments?: ActivityCommentCreateNestedManyWithoutActivityInput
  }

  export type ActivityUncheckedCreateWithoutAuthorInput = {
    id?: string
    title: string
    description: string
    location: string
    startTime: Date | string
    endTime?: Date | string | null
    maxParticipants?: number | null
    category: string
    tags?: string | null
    cover?: string | null
    images?: string | null
    participantsCount?: number
    likesCount?: number
    commentsCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: ActivityParticipantUncheckedCreateNestedManyWithoutActivityInput
    likes?: ActivityLikeUncheckedCreateNestedManyWithoutActivityInput
    comments?: ActivityCommentUncheckedCreateNestedManyWithoutActivityInput
  }

  export type ActivityCreateOrConnectWithoutAuthorInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutAuthorInput, ActivityUncheckedCreateWithoutAuthorInput>
  }

  export type ActivityCreateManyAuthorInputEnvelope = {
    data: ActivityCreateManyAuthorInput | ActivityCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type ActivityParticipantCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    activity: ActivityCreateNestedOneWithoutParticipantsInput
  }

  export type ActivityParticipantUncheckedCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    activityId: string
  }

  export type ActivityParticipantCreateOrConnectWithoutUserInput = {
    where: ActivityParticipantWhereUniqueInput
    create: XOR<ActivityParticipantCreateWithoutUserInput, ActivityParticipantUncheckedCreateWithoutUserInput>
  }

  export type ActivityParticipantCreateManyUserInputEnvelope = {
    data: ActivityParticipantCreateManyUserInput | ActivityParticipantCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ActivityLikeCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    activity: ActivityCreateNestedOneWithoutLikesInput
  }

  export type ActivityLikeUncheckedCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    activityId: string
  }

  export type ActivityLikeCreateOrConnectWithoutUserInput = {
    where: ActivityLikeWhereUniqueInput
    create: XOR<ActivityLikeCreateWithoutUserInput, ActivityLikeUncheckedCreateWithoutUserInput>
  }

  export type ActivityLikeCreateManyUserInputEnvelope = {
    data: ActivityLikeCreateManyUserInput | ActivityLikeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ActivityCommentCreateWithoutAuthorInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    activity: ActivityCreateNestedOneWithoutCommentsInput
  }

  export type ActivityCommentUncheckedCreateWithoutAuthorInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    activityId: string
  }

  export type ActivityCommentCreateOrConnectWithoutAuthorInput = {
    where: ActivityCommentWhereUniqueInput
    create: XOR<ActivityCommentCreateWithoutAuthorInput, ActivityCommentUncheckedCreateWithoutAuthorInput>
  }

  export type ActivityCommentCreateManyAuthorInputEnvelope = {
    data: ActivityCommentCreateManyAuthorInput | ActivityCommentCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type UserBindingCreateWithoutUserInput = {
    id?: string
    type: string
    bindValue: string
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserBindingUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    bindValue: string
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserBindingCreateOrConnectWithoutUserInput = {
    where: UserBindingWhereUniqueInput
    create: XOR<UserBindingCreateWithoutUserInput, UserBindingUncheckedCreateWithoutUserInput>
  }

  export type UserBindingCreateManyUserInputEnvelope = {
    data: UserBindingCreateManyUserInput | UserBindingCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type LoginLogCreateWithoutUserInput = {
    id?: string
    ipAddress?: string | null
    userAgent?: string | null
    loginMethod: string
    status: string
    failReason?: string | null
    loginTime?: Date | string
  }

  export type LoginLogUncheckedCreateWithoutUserInput = {
    id?: string
    ipAddress?: string | null
    userAgent?: string | null
    loginMethod: string
    status: string
    failReason?: string | null
    loginTime?: Date | string
  }

  export type LoginLogCreateOrConnectWithoutUserInput = {
    where: LoginLogWhereUniqueInput
    create: XOR<LoginLogCreateWithoutUserInput, LoginLogUncheckedCreateWithoutUserInput>
  }

  export type LoginLogCreateManyUserInputEnvelope = {
    data: LoginLogCreateManyUserInput | LoginLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FeedbackCreateWithoutUserInput = {
    id?: string
    type: string
    title: string
    content: string
    contact?: string | null
    images?: string | null
    platform?: string
    version?: string | null
    deviceInfo?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    status?: string
    processedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reply?: FeedbackReplyCreateNestedManyWithoutFeedbackInput
  }

  export type FeedbackUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    title: string
    content: string
    contact?: string | null
    images?: string | null
    platform?: string
    version?: string | null
    deviceInfo?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    status?: string
    processedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reply?: FeedbackReplyUncheckedCreateNestedManyWithoutFeedbackInput
  }

  export type FeedbackCreateOrConnectWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput>
  }

  export type FeedbackCreateManyUserInputEnvelope = {
    data: FeedbackCreateManyUserInput | FeedbackCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FeedbackReplyCreateWithoutAdminInput = {
    id?: string
    content: string
    createdAt?: Date | string
    feedback: FeedbackCreateNestedOneWithoutReplyInput
  }

  export type FeedbackReplyUncheckedCreateWithoutAdminInput = {
    id?: string
    content: string
    createdAt?: Date | string
    feedbackId: string
  }

  export type FeedbackReplyCreateOrConnectWithoutAdminInput = {
    where: FeedbackReplyWhereUniqueInput
    create: XOR<FeedbackReplyCreateWithoutAdminInput, FeedbackReplyUncheckedCreateWithoutAdminInput>
  }

  export type FeedbackReplyCreateManyAdminInputEnvelope = {
    data: FeedbackReplyCreateManyAdminInput | FeedbackReplyCreateManyAdminInput[]
    skipDuplicates?: boolean
  }

  export type CreditLogCreateWithoutUserInput = {
    id?: string
    action: string
    amount: number
    reason?: string | null
    relatedType?: string | null
    relatedId?: string | null
    metadata?: string | null
    createdAt?: Date | string
  }

  export type CreditLogUncheckedCreateWithoutUserInput = {
    id?: string
    action: string
    amount: number
    reason?: string | null
    relatedType?: string | null
    relatedId?: string | null
    metadata?: string | null
    createdAt?: Date | string
  }

  export type CreditLogCreateOrConnectWithoutUserInput = {
    where: CreditLogWhereUniqueInput
    create: XOR<CreditLogCreateWithoutUserInput, CreditLogUncheckedCreateWithoutUserInput>
  }

  export type CreditLogCreateManyUserInputEnvelope = {
    data: CreditLogCreateManyUserInput | CreditLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserBadgeRecordCreateWithoutUserInput = {
    id?: string
    progress?: number
    awardedAt?: Date | string
    metadata?: string | null
    badge: UserBadgeCreateNestedOneWithoutUserRecordsInput
  }

  export type UserBadgeRecordUncheckedCreateWithoutUserInput = {
    id?: string
    progress?: number
    awardedAt?: Date | string
    metadata?: string | null
    badgeId: string
  }

  export type UserBadgeRecordCreateOrConnectWithoutUserInput = {
    where: UserBadgeRecordWhereUniqueInput
    create: XOR<UserBadgeRecordCreateWithoutUserInput, UserBadgeRecordUncheckedCreateWithoutUserInput>
  }

  export type UserBadgeRecordCreateManyUserInputEnvelope = {
    data: UserBadgeRecordCreateManyUserInput | UserBadgeRecordCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DailyCheckInCreateWithoutUserInput = {
    id?: string
    checkInDate: Date | string
    credits?: number
    consecutiveDays?: number
    createdAt?: Date | string
  }

  export type DailyCheckInUncheckedCreateWithoutUserInput = {
    id?: string
    checkInDate: Date | string
    credits?: number
    consecutiveDays?: number
    createdAt?: Date | string
  }

  export type DailyCheckInCreateOrConnectWithoutUserInput = {
    where: DailyCheckInWhereUniqueInput
    create: XOR<DailyCheckInCreateWithoutUserInput, DailyCheckInUncheckedCreateWithoutUserInput>
  }

  export type DailyCheckInCreateManyUserInputEnvelope = {
    data: DailyCheckInCreateManyUserInput | DailyCheckInCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserRoleCreateWithoutUserInput = {
    id?: string
    assignedBy?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    role: RoleCreateNestedOneWithoutUserRolesInput
  }

  export type UserRoleUncheckedCreateWithoutUserInput = {
    id?: string
    roleId: string
    assignedBy?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
  }

  export type UserRoleCreateOrConnectWithoutUserInput = {
    where: UserRoleWhereUniqueInput
    create: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput>
  }

  export type UserRoleCreateManyUserInputEnvelope = {
    data: UserRoleCreateManyUserInput | UserRoleCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type OperationLogCreateWithoutUserInput = {
    id?: string
    action: string
    module: string
    description?: string | null
    method: string
    path: string
    ip?: string | null
    userAgent?: string | null
    status: string
    errorMsg?: string | null
    requestData?: string | null
    responseData?: string | null
    duration?: number | null
    createdAt?: Date | string
  }

  export type OperationLogUncheckedCreateWithoutUserInput = {
    id?: string
    action: string
    module: string
    description?: string | null
    method: string
    path: string
    ip?: string | null
    userAgent?: string | null
    status: string
    errorMsg?: string | null
    requestData?: string | null
    responseData?: string | null
    duration?: number | null
    createdAt?: Date | string
  }

  export type OperationLogCreateOrConnectWithoutUserInput = {
    where: OperationLogWhereUniqueInput
    create: XOR<OperationLogCreateWithoutUserInput, OperationLogUncheckedCreateWithoutUserInput>
  }

  export type OperationLogCreateManyUserInputEnvelope = {
    data: OperationLogCreateManyUserInput | OperationLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TopicUpsertWithWhereUniqueWithoutAuthorInput = {
    where: TopicWhereUniqueInput
    update: XOR<TopicUpdateWithoutAuthorInput, TopicUncheckedUpdateWithoutAuthorInput>
    create: XOR<TopicCreateWithoutAuthorInput, TopicUncheckedCreateWithoutAuthorInput>
  }

  export type TopicUpdateWithWhereUniqueWithoutAuthorInput = {
    where: TopicWhereUniqueInput
    data: XOR<TopicUpdateWithoutAuthorInput, TopicUncheckedUpdateWithoutAuthorInput>
  }

  export type TopicUpdateManyWithWhereWithoutAuthorInput = {
    where: TopicScalarWhereInput
    data: XOR<TopicUpdateManyMutationInput, TopicUncheckedUpdateManyWithoutAuthorInput>
  }

  export type TopicScalarWhereInput = {
    AND?: TopicScalarWhereInput | TopicScalarWhereInput[]
    OR?: TopicScalarWhereInput[]
    NOT?: TopicScalarWhereInput | TopicScalarWhereInput[]
    id?: StringFilter<"Topic"> | string
    title?: StringFilter<"Topic"> | string
    content?: StringFilter<"Topic"> | string
    contentType?: StringFilter<"Topic"> | string
    summary?: StringNullableFilter<"Topic"> | string | null
    category?: StringFilter<"Topic"> | string
    tags?: StringNullableFilter<"Topic"> | string | null
    topicType?: StringFilter<"Topic"> | string
    demandType?: StringNullableFilter<"Topic"> | string | null
    skillsNeeded?: StringNullableFilter<"Topic"> | string | null
    skillsProvided?: StringNullableFilter<"Topic"> | string | null
    threshold?: IntFilter<"Topic"> | number
    wantToHearCount?: IntFilter<"Topic"> | number
    canTellCount?: IntFilter<"Topic"> | number
    status?: StringFilter<"Topic"> | string
    teamSize?: IntNullableFilter<"Topic"> | number | null
    lookingForRoles?: JsonNullableFilter<"Topic">
    projectStage?: StringNullableFilter<"Topic"> | string | null
    website?: StringNullableFilter<"Topic"> | string | null
    github?: StringNullableFilter<"Topic"> | string | null
    interestedCount?: IntFilter<"Topic"> | number
    duration?: StringNullableFilter<"Topic"> | string | null
    targetAudience?: StringNullableFilter<"Topic"> | string | null
    scheduledTime?: DateTimeNullableFilter<"Topic"> | Date | string | null
    deadline?: DateTimeNullableFilter<"Topic"> | Date | string | null
    budget?: StringNullableFilter<"Topic"> | string | null
    contactInfo?: StringNullableFilter<"Topic"> | string | null
    images?: StringNullableFilter<"Topic"> | string | null
    documents?: StringNullableFilter<"Topic"> | string | null
    videos?: StringNullableFilter<"Topic"> | string | null
    links?: StringNullableFilter<"Topic"> | string | null
    quickActions?: StringNullableFilter<"Topic"> | string | null
    visibility?: StringFilter<"Topic"> | string
    viewsCount?: IntFilter<"Topic"> | number
    likesCount?: IntFilter<"Topic"> | number
    commentsCount?: IntFilter<"Topic"> | number
    bookmarksCount?: IntFilter<"Topic"> | number
    hotScore?: FloatFilter<"Topic"> | number
    trendingScore?: FloatFilter<"Topic"> | number
    isHot?: BoolFilter<"Topic"> | boolean
    publishedAt?: DateTimeNullableFilter<"Topic"> | Date | string | null
    lastActiveAt?: DateTimeFilter<"Topic"> | Date | string
    createdAt?: DateTimeFilter<"Topic"> | Date | string
    updatedAt?: DateTimeFilter<"Topic"> | Date | string
    authorId?: StringFilter<"Topic"> | string
  }

  export type ProjectUpsertWithWhereUniqueWithoutAuthorInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutAuthorInput, ProjectUncheckedUpdateWithoutAuthorInput>
    create: XOR<ProjectCreateWithoutAuthorInput, ProjectUncheckedCreateWithoutAuthorInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutAuthorInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutAuthorInput, ProjectUncheckedUpdateWithoutAuthorInput>
  }

  export type ProjectUpdateManyWithWhereWithoutAuthorInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutAuthorInput>
  }

  export type ProjectScalarWhereInput = {
    AND?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    OR?: ProjectScalarWhereInput[]
    NOT?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    id?: StringFilter<"Project"> | string
    category?: StringFilter<"Project"> | string
    title?: StringFilter<"Project"> | string
    description?: StringFilter<"Project"> | string
    tags?: StringNullableFilter<"Project"> | string | null
    teamSize?: IntNullableFilter<"Project"> | number | null
    lookingForRoles?: JsonNullableFilter<"Project">
    projectStage?: StringNullableFilter<"Project"> | string | null
    website?: StringNullableFilter<"Project"> | string | null
    github?: StringNullableFilter<"Project"> | string | null
    viewCount?: IntFilter<"Project"> | number
    likeCount?: IntFilter<"Project"> | number
    commentCount?: IntFilter<"Project"> | number
    interestedCount?: IntFilter<"Project"> | number
    images?: StringNullableFilter<"Project"> | string | null
    authorId?: StringFilter<"Project"> | string
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
  }

  export type CommentUpsertWithWhereUniqueWithoutAuthorInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutAuthorInput, CommentUncheckedUpdateWithoutAuthorInput>
    create: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutAuthorInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutAuthorInput, CommentUncheckedUpdateWithoutAuthorInput>
  }

  export type CommentUpdateManyWithWhereWithoutAuthorInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutAuthorInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    id?: StringFilter<"Comment"> | string
    content?: StringFilter<"Comment"> | string
    images?: StringNullableFilter<"Comment"> | string | null
    parentId?: StringNullableFilter<"Comment"> | string | null
    rootId?: StringNullableFilter<"Comment"> | string | null
    repliesCount?: IntFilter<"Comment"> | number
    likesCount?: IntFilter<"Comment"> | number
    status?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    topicId?: StringNullableFilter<"Comment"> | string | null
    projectId?: StringNullableFilter<"Comment"> | string | null
    authorId?: StringFilter<"Comment"> | string
  }

  export type LikeUpsertWithWhereUniqueWithoutUserInput = {
    where: LikeWhereUniqueInput
    update: XOR<LikeUpdateWithoutUserInput, LikeUncheckedUpdateWithoutUserInput>
    create: XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput>
  }

  export type LikeUpdateWithWhereUniqueWithoutUserInput = {
    where: LikeWhereUniqueInput
    data: XOR<LikeUpdateWithoutUserInput, LikeUncheckedUpdateWithoutUserInput>
  }

  export type LikeUpdateManyWithWhereWithoutUserInput = {
    where: LikeScalarWhereInput
    data: XOR<LikeUpdateManyMutationInput, LikeUncheckedUpdateManyWithoutUserInput>
  }

  export type LikeScalarWhereInput = {
    AND?: LikeScalarWhereInput | LikeScalarWhereInput[]
    OR?: LikeScalarWhereInput[]
    NOT?: LikeScalarWhereInput | LikeScalarWhereInput[]
    id?: StringFilter<"Like"> | string
    targetType?: StringFilter<"Like"> | string
    targetId?: StringFilter<"Like"> | string
    createdAt?: DateTimeFilter<"Like"> | Date | string
    userId?: StringFilter<"Like"> | string
  }

  export type BookmarkUpsertWithWhereUniqueWithoutUserInput = {
    where: BookmarkWhereUniqueInput
    update: XOR<BookmarkUpdateWithoutUserInput, BookmarkUncheckedUpdateWithoutUserInput>
    create: XOR<BookmarkCreateWithoutUserInput, BookmarkUncheckedCreateWithoutUserInput>
  }

  export type BookmarkUpdateWithWhereUniqueWithoutUserInput = {
    where: BookmarkWhereUniqueInput
    data: XOR<BookmarkUpdateWithoutUserInput, BookmarkUncheckedUpdateWithoutUserInput>
  }

  export type BookmarkUpdateManyWithWhereWithoutUserInput = {
    where: BookmarkScalarWhereInput
    data: XOR<BookmarkUpdateManyMutationInput, BookmarkUncheckedUpdateManyWithoutUserInput>
  }

  export type BookmarkScalarWhereInput = {
    AND?: BookmarkScalarWhereInput | BookmarkScalarWhereInput[]
    OR?: BookmarkScalarWhereInput[]
    NOT?: BookmarkScalarWhereInput | BookmarkScalarWhereInput[]
    id?: StringFilter<"Bookmark"> | string
    createdAt?: DateTimeFilter<"Bookmark"> | Date | string
    userId?: StringFilter<"Bookmark"> | string
    topicId?: StringFilter<"Bookmark"> | string
  }

  export type FollowUpsertWithWhereUniqueWithoutFollowerInput = {
    where: FollowWhereUniqueInput
    update: XOR<FollowUpdateWithoutFollowerInput, FollowUncheckedUpdateWithoutFollowerInput>
    create: XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput>
  }

  export type FollowUpdateWithWhereUniqueWithoutFollowerInput = {
    where: FollowWhereUniqueInput
    data: XOR<FollowUpdateWithoutFollowerInput, FollowUncheckedUpdateWithoutFollowerInput>
  }

  export type FollowUpdateManyWithWhereWithoutFollowerInput = {
    where: FollowScalarWhereInput
    data: XOR<FollowUpdateManyMutationInput, FollowUncheckedUpdateManyWithoutFollowerInput>
  }

  export type FollowScalarWhereInput = {
    AND?: FollowScalarWhereInput | FollowScalarWhereInput[]
    OR?: FollowScalarWhereInput[]
    NOT?: FollowScalarWhereInput | FollowScalarWhereInput[]
    id?: StringFilter<"Follow"> | string
    createdAt?: DateTimeFilter<"Follow"> | Date | string
    followerId?: StringFilter<"Follow"> | string
    followingId?: StringFilter<"Follow"> | string
  }

  export type FollowUpsertWithWhereUniqueWithoutFollowingInput = {
    where: FollowWhereUniqueInput
    update: XOR<FollowUpdateWithoutFollowingInput, FollowUncheckedUpdateWithoutFollowingInput>
    create: XOR<FollowCreateWithoutFollowingInput, FollowUncheckedCreateWithoutFollowingInput>
  }

  export type FollowUpdateWithWhereUniqueWithoutFollowingInput = {
    where: FollowWhereUniqueInput
    data: XOR<FollowUpdateWithoutFollowingInput, FollowUncheckedUpdateWithoutFollowingInput>
  }

  export type FollowUpdateManyWithWhereWithoutFollowingInput = {
    where: FollowScalarWhereInput
    data: XOR<FollowUpdateManyMutationInput, FollowUncheckedUpdateManyWithoutFollowingInput>
  }

  export type NotificationUpsertWithWhereUniqueWithoutActorInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutActorInput, NotificationUncheckedUpdateWithoutActorInput>
    create: XOR<NotificationCreateWithoutActorInput, NotificationUncheckedCreateWithoutActorInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutActorInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutActorInput, NotificationUncheckedUpdateWithoutActorInput>
  }

  export type NotificationUpdateManyWithWhereWithoutActorInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutActorInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    type?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    content?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    link?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    userId?: StringFilter<"Notification"> | string
    actorId?: StringNullableFilter<"Notification"> | string | null
    targetType?: StringFilter<"Notification"> | string
    targetId?: StringFilter<"Notification"> | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type UserActionUpsertWithWhereUniqueWithoutUserInput = {
    where: UserActionWhereUniqueInput
    update: XOR<UserActionUpdateWithoutUserInput, UserActionUncheckedUpdateWithoutUserInput>
    create: XOR<UserActionCreateWithoutUserInput, UserActionUncheckedCreateWithoutUserInput>
  }

  export type UserActionUpdateWithWhereUniqueWithoutUserInput = {
    where: UserActionWhereUniqueInput
    data: XOR<UserActionUpdateWithoutUserInput, UserActionUncheckedUpdateWithoutUserInput>
  }

  export type UserActionUpdateManyWithWhereWithoutUserInput = {
    where: UserActionScalarWhereInput
    data: XOR<UserActionUpdateManyMutationInput, UserActionUncheckedUpdateManyWithoutUserInput>
  }

  export type UserActionScalarWhereInput = {
    AND?: UserActionScalarWhereInput | UserActionScalarWhereInput[]
    OR?: UserActionScalarWhereInput[]
    NOT?: UserActionScalarWhereInput | UserActionScalarWhereInput[]
    id?: StringFilter<"UserAction"> | string
    actionType?: StringFilter<"UserAction"> | string
    targetType?: StringFilter<"UserAction"> | string
    targetId?: StringFilter<"UserAction"> | string
    metadata?: StringNullableFilter<"UserAction"> | string | null
    createdAt?: DateTimeFilter<"UserAction"> | Date | string
    userId?: StringFilter<"UserAction"> | string
  }

  export type TopicQuickActionUpsertWithWhereUniqueWithoutUserInput = {
    where: TopicQuickActionWhereUniqueInput
    update: XOR<TopicQuickActionUpdateWithoutUserInput, TopicQuickActionUncheckedUpdateWithoutUserInput>
    create: XOR<TopicQuickActionCreateWithoutUserInput, TopicQuickActionUncheckedCreateWithoutUserInput>
  }

  export type TopicQuickActionUpdateWithWhereUniqueWithoutUserInput = {
    where: TopicQuickActionWhereUniqueInput
    data: XOR<TopicQuickActionUpdateWithoutUserInput, TopicQuickActionUncheckedUpdateWithoutUserInput>
  }

  export type TopicQuickActionUpdateManyWithWhereWithoutUserInput = {
    where: TopicQuickActionScalarWhereInput
    data: XOR<TopicQuickActionUpdateManyMutationInput, TopicQuickActionUncheckedUpdateManyWithoutUserInput>
  }

  export type TopicQuickActionScalarWhereInput = {
    AND?: TopicQuickActionScalarWhereInput | TopicQuickActionScalarWhereInput[]
    OR?: TopicQuickActionScalarWhereInput[]
    NOT?: TopicQuickActionScalarWhereInput | TopicQuickActionScalarWhereInput[]
    id?: StringFilter<"TopicQuickAction"> | string
    actionType?: StringFilter<"TopicQuickAction"> | string
    createdAt?: DateTimeFilter<"TopicQuickAction"> | Date | string
    topicId?: StringFilter<"TopicQuickAction"> | string
    userId?: StringFilter<"TopicQuickAction"> | string
  }

  export type TopicActionUpsertWithWhereUniqueWithoutUserInput = {
    where: TopicActionWhereUniqueInput
    update: XOR<TopicActionUpdateWithoutUserInput, TopicActionUncheckedUpdateWithoutUserInput>
    create: XOR<TopicActionCreateWithoutUserInput, TopicActionUncheckedCreateWithoutUserInput>
  }

  export type TopicActionUpdateWithWhereUniqueWithoutUserInput = {
    where: TopicActionWhereUniqueInput
    data: XOR<TopicActionUpdateWithoutUserInput, TopicActionUncheckedUpdateWithoutUserInput>
  }

  export type TopicActionUpdateManyWithWhereWithoutUserInput = {
    where: TopicActionScalarWhereInput
    data: XOR<TopicActionUpdateManyMutationInput, TopicActionUncheckedUpdateManyWithoutUserInput>
  }

  export type TopicActionScalarWhereInput = {
    AND?: TopicActionScalarWhereInput | TopicActionScalarWhereInput[]
    OR?: TopicActionScalarWhereInput[]
    NOT?: TopicActionScalarWhereInput | TopicActionScalarWhereInput[]
    id?: StringFilter<"TopicAction"> | string
    type?: StringFilter<"TopicAction"> | string
    userId?: StringFilter<"TopicAction"> | string
    topicId?: StringFilter<"TopicAction"> | string
    createdAt?: DateTimeFilter<"TopicAction"> | Date | string
  }

  export type ProjectActionUpsertWithWhereUniqueWithoutUserInput = {
    where: ProjectActionWhereUniqueInput
    update: XOR<ProjectActionUpdateWithoutUserInput, ProjectActionUncheckedUpdateWithoutUserInput>
    create: XOR<ProjectActionCreateWithoutUserInput, ProjectActionUncheckedCreateWithoutUserInput>
  }

  export type ProjectActionUpdateWithWhereUniqueWithoutUserInput = {
    where: ProjectActionWhereUniqueInput
    data: XOR<ProjectActionUpdateWithoutUserInput, ProjectActionUncheckedUpdateWithoutUserInput>
  }

  export type ProjectActionUpdateManyWithWhereWithoutUserInput = {
    where: ProjectActionScalarWhereInput
    data: XOR<ProjectActionUpdateManyMutationInput, ProjectActionUncheckedUpdateManyWithoutUserInput>
  }

  export type ProjectActionScalarWhereInput = {
    AND?: ProjectActionScalarWhereInput | ProjectActionScalarWhereInput[]
    OR?: ProjectActionScalarWhereInput[]
    NOT?: ProjectActionScalarWhereInput | ProjectActionScalarWhereInput[]
    id?: StringFilter<"ProjectAction"> | string
    type?: StringFilter<"ProjectAction"> | string
    userId?: StringFilter<"ProjectAction"> | string
    projectId?: StringFilter<"ProjectAction"> | string
    createdAt?: DateTimeFilter<"ProjectAction"> | Date | string
  }

  export type ActivityUpsertWithWhereUniqueWithoutAuthorInput = {
    where: ActivityWhereUniqueInput
    update: XOR<ActivityUpdateWithoutAuthorInput, ActivityUncheckedUpdateWithoutAuthorInput>
    create: XOR<ActivityCreateWithoutAuthorInput, ActivityUncheckedCreateWithoutAuthorInput>
  }

  export type ActivityUpdateWithWhereUniqueWithoutAuthorInput = {
    where: ActivityWhereUniqueInput
    data: XOR<ActivityUpdateWithoutAuthorInput, ActivityUncheckedUpdateWithoutAuthorInput>
  }

  export type ActivityUpdateManyWithWhereWithoutAuthorInput = {
    where: ActivityScalarWhereInput
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyWithoutAuthorInput>
  }

  export type ActivityScalarWhereInput = {
    AND?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
    OR?: ActivityScalarWhereInput[]
    NOT?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
    id?: StringFilter<"Activity"> | string
    title?: StringFilter<"Activity"> | string
    description?: StringFilter<"Activity"> | string
    location?: StringFilter<"Activity"> | string
    startTime?: DateTimeFilter<"Activity"> | Date | string
    endTime?: DateTimeNullableFilter<"Activity"> | Date | string | null
    maxParticipants?: IntNullableFilter<"Activity"> | number | null
    category?: StringFilter<"Activity"> | string
    tags?: StringNullableFilter<"Activity"> | string | null
    cover?: StringNullableFilter<"Activity"> | string | null
    images?: StringNullableFilter<"Activity"> | string | null
    participantsCount?: IntFilter<"Activity"> | number
    likesCount?: IntFilter<"Activity"> | number
    commentsCount?: IntFilter<"Activity"> | number
    status?: StringFilter<"Activity"> | string
    createdAt?: DateTimeFilter<"Activity"> | Date | string
    updatedAt?: DateTimeFilter<"Activity"> | Date | string
    authorId?: StringFilter<"Activity"> | string
  }

  export type ActivityParticipantUpsertWithWhereUniqueWithoutUserInput = {
    where: ActivityParticipantWhereUniqueInput
    update: XOR<ActivityParticipantUpdateWithoutUserInput, ActivityParticipantUncheckedUpdateWithoutUserInput>
    create: XOR<ActivityParticipantCreateWithoutUserInput, ActivityParticipantUncheckedCreateWithoutUserInput>
  }

  export type ActivityParticipantUpdateWithWhereUniqueWithoutUserInput = {
    where: ActivityParticipantWhereUniqueInput
    data: XOR<ActivityParticipantUpdateWithoutUserInput, ActivityParticipantUncheckedUpdateWithoutUserInput>
  }

  export type ActivityParticipantUpdateManyWithWhereWithoutUserInput = {
    where: ActivityParticipantScalarWhereInput
    data: XOR<ActivityParticipantUpdateManyMutationInput, ActivityParticipantUncheckedUpdateManyWithoutUserInput>
  }

  export type ActivityParticipantScalarWhereInput = {
    AND?: ActivityParticipantScalarWhereInput | ActivityParticipantScalarWhereInput[]
    OR?: ActivityParticipantScalarWhereInput[]
    NOT?: ActivityParticipantScalarWhereInput | ActivityParticipantScalarWhereInput[]
    id?: StringFilter<"ActivityParticipant"> | string
    createdAt?: DateTimeFilter<"ActivityParticipant"> | Date | string
    userId?: StringFilter<"ActivityParticipant"> | string
    activityId?: StringFilter<"ActivityParticipant"> | string
  }

  export type ActivityLikeUpsertWithWhereUniqueWithoutUserInput = {
    where: ActivityLikeWhereUniqueInput
    update: XOR<ActivityLikeUpdateWithoutUserInput, ActivityLikeUncheckedUpdateWithoutUserInput>
    create: XOR<ActivityLikeCreateWithoutUserInput, ActivityLikeUncheckedCreateWithoutUserInput>
  }

  export type ActivityLikeUpdateWithWhereUniqueWithoutUserInput = {
    where: ActivityLikeWhereUniqueInput
    data: XOR<ActivityLikeUpdateWithoutUserInput, ActivityLikeUncheckedUpdateWithoutUserInput>
  }

  export type ActivityLikeUpdateManyWithWhereWithoutUserInput = {
    where: ActivityLikeScalarWhereInput
    data: XOR<ActivityLikeUpdateManyMutationInput, ActivityLikeUncheckedUpdateManyWithoutUserInput>
  }

  export type ActivityLikeScalarWhereInput = {
    AND?: ActivityLikeScalarWhereInput | ActivityLikeScalarWhereInput[]
    OR?: ActivityLikeScalarWhereInput[]
    NOT?: ActivityLikeScalarWhereInput | ActivityLikeScalarWhereInput[]
    id?: StringFilter<"ActivityLike"> | string
    createdAt?: DateTimeFilter<"ActivityLike"> | Date | string
    userId?: StringFilter<"ActivityLike"> | string
    activityId?: StringFilter<"ActivityLike"> | string
  }

  export type ActivityCommentUpsertWithWhereUniqueWithoutAuthorInput = {
    where: ActivityCommentWhereUniqueInput
    update: XOR<ActivityCommentUpdateWithoutAuthorInput, ActivityCommentUncheckedUpdateWithoutAuthorInput>
    create: XOR<ActivityCommentCreateWithoutAuthorInput, ActivityCommentUncheckedCreateWithoutAuthorInput>
  }

  export type ActivityCommentUpdateWithWhereUniqueWithoutAuthorInput = {
    where: ActivityCommentWhereUniqueInput
    data: XOR<ActivityCommentUpdateWithoutAuthorInput, ActivityCommentUncheckedUpdateWithoutAuthorInput>
  }

  export type ActivityCommentUpdateManyWithWhereWithoutAuthorInput = {
    where: ActivityCommentScalarWhereInput
    data: XOR<ActivityCommentUpdateManyMutationInput, ActivityCommentUncheckedUpdateManyWithoutAuthorInput>
  }

  export type ActivityCommentScalarWhereInput = {
    AND?: ActivityCommentScalarWhereInput | ActivityCommentScalarWhereInput[]
    OR?: ActivityCommentScalarWhereInput[]
    NOT?: ActivityCommentScalarWhereInput | ActivityCommentScalarWhereInput[]
    id?: StringFilter<"ActivityComment"> | string
    content?: StringFilter<"ActivityComment"> | string
    createdAt?: DateTimeFilter<"ActivityComment"> | Date | string
    updatedAt?: DateTimeFilter<"ActivityComment"> | Date | string
    authorId?: StringFilter<"ActivityComment"> | string
    activityId?: StringFilter<"ActivityComment"> | string
  }

  export type UserBindingUpsertWithWhereUniqueWithoutUserInput = {
    where: UserBindingWhereUniqueInput
    update: XOR<UserBindingUpdateWithoutUserInput, UserBindingUncheckedUpdateWithoutUserInput>
    create: XOR<UserBindingCreateWithoutUserInput, UserBindingUncheckedCreateWithoutUserInput>
  }

  export type UserBindingUpdateWithWhereUniqueWithoutUserInput = {
    where: UserBindingWhereUniqueInput
    data: XOR<UserBindingUpdateWithoutUserInput, UserBindingUncheckedUpdateWithoutUserInput>
  }

  export type UserBindingUpdateManyWithWhereWithoutUserInput = {
    where: UserBindingScalarWhereInput
    data: XOR<UserBindingUpdateManyMutationInput, UserBindingUncheckedUpdateManyWithoutUserInput>
  }

  export type UserBindingScalarWhereInput = {
    AND?: UserBindingScalarWhereInput | UserBindingScalarWhereInput[]
    OR?: UserBindingScalarWhereInput[]
    NOT?: UserBindingScalarWhereInput | UserBindingScalarWhereInput[]
    id?: StringFilter<"UserBinding"> | string
    type?: StringFilter<"UserBinding"> | string
    bindValue?: StringFilter<"UserBinding"> | string
    metadata?: StringNullableFilter<"UserBinding"> | string | null
    createdAt?: DateTimeFilter<"UserBinding"> | Date | string
    updatedAt?: DateTimeFilter<"UserBinding"> | Date | string
    userId?: StringFilter<"UserBinding"> | string
  }

  export type LoginLogUpsertWithWhereUniqueWithoutUserInput = {
    where: LoginLogWhereUniqueInput
    update: XOR<LoginLogUpdateWithoutUserInput, LoginLogUncheckedUpdateWithoutUserInput>
    create: XOR<LoginLogCreateWithoutUserInput, LoginLogUncheckedCreateWithoutUserInput>
  }

  export type LoginLogUpdateWithWhereUniqueWithoutUserInput = {
    where: LoginLogWhereUniqueInput
    data: XOR<LoginLogUpdateWithoutUserInput, LoginLogUncheckedUpdateWithoutUserInput>
  }

  export type LoginLogUpdateManyWithWhereWithoutUserInput = {
    where: LoginLogScalarWhereInput
    data: XOR<LoginLogUpdateManyMutationInput, LoginLogUncheckedUpdateManyWithoutUserInput>
  }

  export type LoginLogScalarWhereInput = {
    AND?: LoginLogScalarWhereInput | LoginLogScalarWhereInput[]
    OR?: LoginLogScalarWhereInput[]
    NOT?: LoginLogScalarWhereInput | LoginLogScalarWhereInput[]
    id?: StringFilter<"LoginLog"> | string
    ipAddress?: StringNullableFilter<"LoginLog"> | string | null
    userAgent?: StringNullableFilter<"LoginLog"> | string | null
    loginMethod?: StringFilter<"LoginLog"> | string
    status?: StringFilter<"LoginLog"> | string
    failReason?: StringNullableFilter<"LoginLog"> | string | null
    loginTime?: DateTimeFilter<"LoginLog"> | Date | string
    userId?: StringNullableFilter<"LoginLog"> | string | null
  }

  export type FeedbackUpsertWithWhereUniqueWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutUserInput, FeedbackUncheckedUpdateWithoutUserInput>
    create: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutUserInput, FeedbackUncheckedUpdateWithoutUserInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutUserInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutUserInput>
  }

  export type FeedbackScalarWhereInput = {
    AND?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    OR?: FeedbackScalarWhereInput[]
    NOT?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    id?: StringFilter<"Feedback"> | string
    type?: StringFilter<"Feedback"> | string
    title?: StringFilter<"Feedback"> | string
    content?: StringFilter<"Feedback"> | string
    contact?: StringNullableFilter<"Feedback"> | string | null
    images?: StringNullableFilter<"Feedback"> | string | null
    platform?: StringFilter<"Feedback"> | string
    version?: StringNullableFilter<"Feedback"> | string | null
    deviceInfo?: StringNullableFilter<"Feedback"> | string | null
    ipAddress?: StringNullableFilter<"Feedback"> | string | null
    userAgent?: StringNullableFilter<"Feedback"> | string | null
    status?: StringFilter<"Feedback"> | string
    processedAt?: DateTimeNullableFilter<"Feedback"> | Date | string | null
    createdAt?: DateTimeFilter<"Feedback"> | Date | string
    updatedAt?: DateTimeFilter<"Feedback"> | Date | string
    userId?: StringFilter<"Feedback"> | string
  }

  export type FeedbackReplyUpsertWithWhereUniqueWithoutAdminInput = {
    where: FeedbackReplyWhereUniqueInput
    update: XOR<FeedbackReplyUpdateWithoutAdminInput, FeedbackReplyUncheckedUpdateWithoutAdminInput>
    create: XOR<FeedbackReplyCreateWithoutAdminInput, FeedbackReplyUncheckedCreateWithoutAdminInput>
  }

  export type FeedbackReplyUpdateWithWhereUniqueWithoutAdminInput = {
    where: FeedbackReplyWhereUniqueInput
    data: XOR<FeedbackReplyUpdateWithoutAdminInput, FeedbackReplyUncheckedUpdateWithoutAdminInput>
  }

  export type FeedbackReplyUpdateManyWithWhereWithoutAdminInput = {
    where: FeedbackReplyScalarWhereInput
    data: XOR<FeedbackReplyUpdateManyMutationInput, FeedbackReplyUncheckedUpdateManyWithoutAdminInput>
  }

  export type FeedbackReplyScalarWhereInput = {
    AND?: FeedbackReplyScalarWhereInput | FeedbackReplyScalarWhereInput[]
    OR?: FeedbackReplyScalarWhereInput[]
    NOT?: FeedbackReplyScalarWhereInput | FeedbackReplyScalarWhereInput[]
    id?: StringFilter<"FeedbackReply"> | string
    content?: StringFilter<"FeedbackReply"> | string
    createdAt?: DateTimeFilter<"FeedbackReply"> | Date | string
    feedbackId?: StringFilter<"FeedbackReply"> | string
    adminId?: StringFilter<"FeedbackReply"> | string
  }

  export type CreditLogUpsertWithWhereUniqueWithoutUserInput = {
    where: CreditLogWhereUniqueInput
    update: XOR<CreditLogUpdateWithoutUserInput, CreditLogUncheckedUpdateWithoutUserInput>
    create: XOR<CreditLogCreateWithoutUserInput, CreditLogUncheckedCreateWithoutUserInput>
  }

  export type CreditLogUpdateWithWhereUniqueWithoutUserInput = {
    where: CreditLogWhereUniqueInput
    data: XOR<CreditLogUpdateWithoutUserInput, CreditLogUncheckedUpdateWithoutUserInput>
  }

  export type CreditLogUpdateManyWithWhereWithoutUserInput = {
    where: CreditLogScalarWhereInput
    data: XOR<CreditLogUpdateManyMutationInput, CreditLogUncheckedUpdateManyWithoutUserInput>
  }

  export type CreditLogScalarWhereInput = {
    AND?: CreditLogScalarWhereInput | CreditLogScalarWhereInput[]
    OR?: CreditLogScalarWhereInput[]
    NOT?: CreditLogScalarWhereInput | CreditLogScalarWhereInput[]
    id?: StringFilter<"CreditLog"> | string
    action?: StringFilter<"CreditLog"> | string
    amount?: IntFilter<"CreditLog"> | number
    reason?: StringNullableFilter<"CreditLog"> | string | null
    relatedType?: StringNullableFilter<"CreditLog"> | string | null
    relatedId?: StringNullableFilter<"CreditLog"> | string | null
    metadata?: StringNullableFilter<"CreditLog"> | string | null
    createdAt?: DateTimeFilter<"CreditLog"> | Date | string
    userId?: StringFilter<"CreditLog"> | string
  }

  export type UserBadgeRecordUpsertWithWhereUniqueWithoutUserInput = {
    where: UserBadgeRecordWhereUniqueInput
    update: XOR<UserBadgeRecordUpdateWithoutUserInput, UserBadgeRecordUncheckedUpdateWithoutUserInput>
    create: XOR<UserBadgeRecordCreateWithoutUserInput, UserBadgeRecordUncheckedCreateWithoutUserInput>
  }

  export type UserBadgeRecordUpdateWithWhereUniqueWithoutUserInput = {
    where: UserBadgeRecordWhereUniqueInput
    data: XOR<UserBadgeRecordUpdateWithoutUserInput, UserBadgeRecordUncheckedUpdateWithoutUserInput>
  }

  export type UserBadgeRecordUpdateManyWithWhereWithoutUserInput = {
    where: UserBadgeRecordScalarWhereInput
    data: XOR<UserBadgeRecordUpdateManyMutationInput, UserBadgeRecordUncheckedUpdateManyWithoutUserInput>
  }

  export type UserBadgeRecordScalarWhereInput = {
    AND?: UserBadgeRecordScalarWhereInput | UserBadgeRecordScalarWhereInput[]
    OR?: UserBadgeRecordScalarWhereInput[]
    NOT?: UserBadgeRecordScalarWhereInput | UserBadgeRecordScalarWhereInput[]
    id?: StringFilter<"UserBadgeRecord"> | string
    progress?: IntFilter<"UserBadgeRecord"> | number
    awardedAt?: DateTimeFilter<"UserBadgeRecord"> | Date | string
    metadata?: StringNullableFilter<"UserBadgeRecord"> | string | null
    userId?: StringFilter<"UserBadgeRecord"> | string
    badgeId?: StringFilter<"UserBadgeRecord"> | string
  }

  export type DailyCheckInUpsertWithWhereUniqueWithoutUserInput = {
    where: DailyCheckInWhereUniqueInput
    update: XOR<DailyCheckInUpdateWithoutUserInput, DailyCheckInUncheckedUpdateWithoutUserInput>
    create: XOR<DailyCheckInCreateWithoutUserInput, DailyCheckInUncheckedCreateWithoutUserInput>
  }

  export type DailyCheckInUpdateWithWhereUniqueWithoutUserInput = {
    where: DailyCheckInWhereUniqueInput
    data: XOR<DailyCheckInUpdateWithoutUserInput, DailyCheckInUncheckedUpdateWithoutUserInput>
  }

  export type DailyCheckInUpdateManyWithWhereWithoutUserInput = {
    where: DailyCheckInScalarWhereInput
    data: XOR<DailyCheckInUpdateManyMutationInput, DailyCheckInUncheckedUpdateManyWithoutUserInput>
  }

  export type DailyCheckInScalarWhereInput = {
    AND?: DailyCheckInScalarWhereInput | DailyCheckInScalarWhereInput[]
    OR?: DailyCheckInScalarWhereInput[]
    NOT?: DailyCheckInScalarWhereInput | DailyCheckInScalarWhereInput[]
    id?: StringFilter<"DailyCheckIn"> | string
    checkInDate?: DateTimeFilter<"DailyCheckIn"> | Date | string
    credits?: IntFilter<"DailyCheckIn"> | number
    consecutiveDays?: IntFilter<"DailyCheckIn"> | number
    createdAt?: DateTimeFilter<"DailyCheckIn"> | Date | string
    userId?: StringFilter<"DailyCheckIn"> | string
  }

  export type UserRoleUpsertWithWhereUniqueWithoutUserInput = {
    where: UserRoleWhereUniqueInput
    update: XOR<UserRoleUpdateWithoutUserInput, UserRoleUncheckedUpdateWithoutUserInput>
    create: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput>
  }

  export type UserRoleUpdateWithWhereUniqueWithoutUserInput = {
    where: UserRoleWhereUniqueInput
    data: XOR<UserRoleUpdateWithoutUserInput, UserRoleUncheckedUpdateWithoutUserInput>
  }

  export type UserRoleUpdateManyWithWhereWithoutUserInput = {
    where: UserRoleScalarWhereInput
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyWithoutUserInput>
  }

  export type UserRoleScalarWhereInput = {
    AND?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
    OR?: UserRoleScalarWhereInput[]
    NOT?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
    id?: StringFilter<"UserRole"> | string
    userId?: StringFilter<"UserRole"> | string
    roleId?: StringFilter<"UserRole"> | string
    assignedBy?: StringNullableFilter<"UserRole"> | string | null
    expiresAt?: DateTimeNullableFilter<"UserRole"> | Date | string | null
    createdAt?: DateTimeFilter<"UserRole"> | Date | string
  }

  export type OperationLogUpsertWithWhereUniqueWithoutUserInput = {
    where: OperationLogWhereUniqueInput
    update: XOR<OperationLogUpdateWithoutUserInput, OperationLogUncheckedUpdateWithoutUserInput>
    create: XOR<OperationLogCreateWithoutUserInput, OperationLogUncheckedCreateWithoutUserInput>
  }

  export type OperationLogUpdateWithWhereUniqueWithoutUserInput = {
    where: OperationLogWhereUniqueInput
    data: XOR<OperationLogUpdateWithoutUserInput, OperationLogUncheckedUpdateWithoutUserInput>
  }

  export type OperationLogUpdateManyWithWhereWithoutUserInput = {
    where: OperationLogScalarWhereInput
    data: XOR<OperationLogUpdateManyMutationInput, OperationLogUncheckedUpdateManyWithoutUserInput>
  }

  export type OperationLogScalarWhereInput = {
    AND?: OperationLogScalarWhereInput | OperationLogScalarWhereInput[]
    OR?: OperationLogScalarWhereInput[]
    NOT?: OperationLogScalarWhereInput | OperationLogScalarWhereInput[]
    id?: StringFilter<"OperationLog"> | string
    userId?: StringFilter<"OperationLog"> | string
    action?: StringFilter<"OperationLog"> | string
    module?: StringFilter<"OperationLog"> | string
    description?: StringNullableFilter<"OperationLog"> | string | null
    method?: StringFilter<"OperationLog"> | string
    path?: StringFilter<"OperationLog"> | string
    ip?: StringNullableFilter<"OperationLog"> | string | null
    userAgent?: StringNullableFilter<"OperationLog"> | string | null
    status?: StringFilter<"OperationLog"> | string
    errorMsg?: StringNullableFilter<"OperationLog"> | string | null
    requestData?: StringNullableFilter<"OperationLog"> | string | null
    responseData?: StringNullableFilter<"OperationLog"> | string | null
    duration?: IntNullableFilter<"OperationLog"> | number | null
    createdAt?: DateTimeFilter<"OperationLog"> | Date | string
  }

  export type UserCreateWithoutTopicsInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    likes?: LikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    follows?: FollowCreateNestedManyWithoutFollowerInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionCreateNestedManyWithoutUserInput
    topicActions?: TopicActionCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionCreateNestedManyWithoutUserInput
    activities?: ActivityCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTopicsInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    follows?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionUncheckedCreateNestedManyWithoutUserInput
    topicActions?: TopicActionUncheckedCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityUncheckedCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantUncheckedCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeUncheckedCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentUncheckedCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingUncheckedCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyUncheckedCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogUncheckedCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordUncheckedCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTopicsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTopicsInput, UserUncheckedCreateWithoutTopicsInput>
  }

  export type CommentCreateWithoutTopicInput = {
    id?: string
    content: string
    images?: string | null
    rootId?: string | null
    repliesCount?: number
    likesCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    project?: ProjectCreateNestedOneWithoutCommentsInput
    author: UserCreateNestedOneWithoutCommentsInput
    parent?: CommentCreateNestedOneWithoutRepliesInput
    replies?: CommentCreateNestedManyWithoutParentInput
    likes?: LikeCreateNestedManyWithoutCommentInput
    notifications?: NotificationCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutTopicInput = {
    id?: string
    content: string
    images?: string | null
    parentId?: string | null
    rootId?: string | null
    repliesCount?: number
    likesCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId?: string | null
    authorId: string
    replies?: CommentUncheckedCreateNestedManyWithoutParentInput
    likes?: LikeUncheckedCreateNestedManyWithoutCommentInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutTopicInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutTopicInput, CommentUncheckedCreateWithoutTopicInput>
  }

  export type CommentCreateManyTopicInputEnvelope = {
    data: CommentCreateManyTopicInput | CommentCreateManyTopicInput[]
    skipDuplicates?: boolean
  }

  export type LikeCreateWithoutTopicInput = {
    id?: string
    targetType: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutLikesInput
    comment?: CommentCreateNestedOneWithoutLikesInput
  }

  export type LikeUncheckedCreateWithoutTopicInput = {
    id?: string
    targetType: string
    createdAt?: Date | string
    userId: string
  }

  export type LikeCreateOrConnectWithoutTopicInput = {
    where: LikeWhereUniqueInput
    create: XOR<LikeCreateWithoutTopicInput, LikeUncheckedCreateWithoutTopicInput>
  }

  export type LikeCreateManyTopicInputEnvelope = {
    data: LikeCreateManyTopicInput | LikeCreateManyTopicInput[]
    skipDuplicates?: boolean
  }

  export type BookmarkCreateWithoutTopicInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutBookmarksInput
  }

  export type BookmarkUncheckedCreateWithoutTopicInput = {
    id?: string
    createdAt?: Date | string
    userId: string
  }

  export type BookmarkCreateOrConnectWithoutTopicInput = {
    where: BookmarkWhereUniqueInput
    create: XOR<BookmarkCreateWithoutTopicInput, BookmarkUncheckedCreateWithoutTopicInput>
  }

  export type BookmarkCreateManyTopicInputEnvelope = {
    data: BookmarkCreateManyTopicInput | BookmarkCreateManyTopicInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutTopicInput = {
    id?: string
    type: string
    title: string
    content: string
    isRead?: boolean
    readAt?: Date | string | null
    link?: string | null
    createdAt?: Date | string
    targetType: string
    user: UserCreateNestedOneWithoutReceivedNotificationsInput
    actor?: UserCreateNestedOneWithoutSentNotificationsInput
    comment?: CommentCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutTopicInput = {
    id?: string
    type: string
    title: string
    content: string
    isRead?: boolean
    readAt?: Date | string | null
    link?: string | null
    createdAt?: Date | string
    userId: string
    actorId?: string | null
    targetType: string
  }

  export type NotificationCreateOrConnectWithoutTopicInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutTopicInput, NotificationUncheckedCreateWithoutTopicInput>
  }

  export type NotificationCreateManyTopicInputEnvelope = {
    data: NotificationCreateManyTopicInput | NotificationCreateManyTopicInput[]
    skipDuplicates?: boolean
  }

  export type UserActionCreateWithoutTopicInput = {
    id?: string
    actionType: string
    targetType: string
    metadata?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutUserActionsInput
  }

  export type UserActionUncheckedCreateWithoutTopicInput = {
    id?: string
    actionType: string
    targetType: string
    metadata?: string | null
    createdAt?: Date | string
    userId: string
  }

  export type UserActionCreateOrConnectWithoutTopicInput = {
    where: UserActionWhereUniqueInput
    create: XOR<UserActionCreateWithoutTopicInput, UserActionUncheckedCreateWithoutTopicInput>
  }

  export type UserActionCreateManyTopicInputEnvelope = {
    data: UserActionCreateManyTopicInput | UserActionCreateManyTopicInput[]
    skipDuplicates?: boolean
  }

  export type TopicQuickActionCreateWithoutTopicInput = {
    id?: string
    actionType: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutTopicQuickActionsInput
  }

  export type TopicQuickActionUncheckedCreateWithoutTopicInput = {
    id?: string
    actionType: string
    createdAt?: Date | string
    userId: string
  }

  export type TopicQuickActionCreateOrConnectWithoutTopicInput = {
    where: TopicQuickActionWhereUniqueInput
    create: XOR<TopicQuickActionCreateWithoutTopicInput, TopicQuickActionUncheckedCreateWithoutTopicInput>
  }

  export type TopicQuickActionCreateManyTopicInputEnvelope = {
    data: TopicQuickActionCreateManyTopicInput | TopicQuickActionCreateManyTopicInput[]
    skipDuplicates?: boolean
  }

  export type TopicActionCreateWithoutTopicInput = {
    id?: string
    type: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutTopicActionsInput
  }

  export type TopicActionUncheckedCreateWithoutTopicInput = {
    id?: string
    type: string
    userId: string
    createdAt?: Date | string
  }

  export type TopicActionCreateOrConnectWithoutTopicInput = {
    where: TopicActionWhereUniqueInput
    create: XOR<TopicActionCreateWithoutTopicInput, TopicActionUncheckedCreateWithoutTopicInput>
  }

  export type TopicActionCreateManyTopicInputEnvelope = {
    data: TopicActionCreateManyTopicInput | TopicActionCreateManyTopicInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutTopicsInput = {
    update: XOR<UserUpdateWithoutTopicsInput, UserUncheckedUpdateWithoutTopicsInput>
    create: XOR<UserCreateWithoutTopicsInput, UserUncheckedCreateWithoutTopicsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTopicsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTopicsInput, UserUncheckedUpdateWithoutTopicsInput>
  }

  export type UserUpdateWithoutTopicsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    follows?: FollowUpdateManyWithoutFollowerNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    userActions?: UserActionUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUpdateManyWithoutUserNestedInput
    activities?: ActivityUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTopicsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    follows?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUncheckedUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUncheckedUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUncheckedUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUncheckedUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUncheckedUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUncheckedUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUncheckedUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUncheckedUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUncheckedUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CommentUpsertWithWhereUniqueWithoutTopicInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutTopicInput, CommentUncheckedUpdateWithoutTopicInput>
    create: XOR<CommentCreateWithoutTopicInput, CommentUncheckedCreateWithoutTopicInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutTopicInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutTopicInput, CommentUncheckedUpdateWithoutTopicInput>
  }

  export type CommentUpdateManyWithWhereWithoutTopicInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutTopicInput>
  }

  export type LikeUpsertWithWhereUniqueWithoutTopicInput = {
    where: LikeWhereUniqueInput
    update: XOR<LikeUpdateWithoutTopicInput, LikeUncheckedUpdateWithoutTopicInput>
    create: XOR<LikeCreateWithoutTopicInput, LikeUncheckedCreateWithoutTopicInput>
  }

  export type LikeUpdateWithWhereUniqueWithoutTopicInput = {
    where: LikeWhereUniqueInput
    data: XOR<LikeUpdateWithoutTopicInput, LikeUncheckedUpdateWithoutTopicInput>
  }

  export type LikeUpdateManyWithWhereWithoutTopicInput = {
    where: LikeScalarWhereInput
    data: XOR<LikeUpdateManyMutationInput, LikeUncheckedUpdateManyWithoutTopicInput>
  }

  export type BookmarkUpsertWithWhereUniqueWithoutTopicInput = {
    where: BookmarkWhereUniqueInput
    update: XOR<BookmarkUpdateWithoutTopicInput, BookmarkUncheckedUpdateWithoutTopicInput>
    create: XOR<BookmarkCreateWithoutTopicInput, BookmarkUncheckedCreateWithoutTopicInput>
  }

  export type BookmarkUpdateWithWhereUniqueWithoutTopicInput = {
    where: BookmarkWhereUniqueInput
    data: XOR<BookmarkUpdateWithoutTopicInput, BookmarkUncheckedUpdateWithoutTopicInput>
  }

  export type BookmarkUpdateManyWithWhereWithoutTopicInput = {
    where: BookmarkScalarWhereInput
    data: XOR<BookmarkUpdateManyMutationInput, BookmarkUncheckedUpdateManyWithoutTopicInput>
  }

  export type NotificationUpsertWithWhereUniqueWithoutTopicInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutTopicInput, NotificationUncheckedUpdateWithoutTopicInput>
    create: XOR<NotificationCreateWithoutTopicInput, NotificationUncheckedCreateWithoutTopicInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutTopicInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutTopicInput, NotificationUncheckedUpdateWithoutTopicInput>
  }

  export type NotificationUpdateManyWithWhereWithoutTopicInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutTopicInput>
  }

  export type UserActionUpsertWithWhereUniqueWithoutTopicInput = {
    where: UserActionWhereUniqueInput
    update: XOR<UserActionUpdateWithoutTopicInput, UserActionUncheckedUpdateWithoutTopicInput>
    create: XOR<UserActionCreateWithoutTopicInput, UserActionUncheckedCreateWithoutTopicInput>
  }

  export type UserActionUpdateWithWhereUniqueWithoutTopicInput = {
    where: UserActionWhereUniqueInput
    data: XOR<UserActionUpdateWithoutTopicInput, UserActionUncheckedUpdateWithoutTopicInput>
  }

  export type UserActionUpdateManyWithWhereWithoutTopicInput = {
    where: UserActionScalarWhereInput
    data: XOR<UserActionUpdateManyMutationInput, UserActionUncheckedUpdateManyWithoutTopicInput>
  }

  export type TopicQuickActionUpsertWithWhereUniqueWithoutTopicInput = {
    where: TopicQuickActionWhereUniqueInput
    update: XOR<TopicQuickActionUpdateWithoutTopicInput, TopicQuickActionUncheckedUpdateWithoutTopicInput>
    create: XOR<TopicQuickActionCreateWithoutTopicInput, TopicQuickActionUncheckedCreateWithoutTopicInput>
  }

  export type TopicQuickActionUpdateWithWhereUniqueWithoutTopicInput = {
    where: TopicQuickActionWhereUniqueInput
    data: XOR<TopicQuickActionUpdateWithoutTopicInput, TopicQuickActionUncheckedUpdateWithoutTopicInput>
  }

  export type TopicQuickActionUpdateManyWithWhereWithoutTopicInput = {
    where: TopicQuickActionScalarWhereInput
    data: XOR<TopicQuickActionUpdateManyMutationInput, TopicQuickActionUncheckedUpdateManyWithoutTopicInput>
  }

  export type TopicActionUpsertWithWhereUniqueWithoutTopicInput = {
    where: TopicActionWhereUniqueInput
    update: XOR<TopicActionUpdateWithoutTopicInput, TopicActionUncheckedUpdateWithoutTopicInput>
    create: XOR<TopicActionCreateWithoutTopicInput, TopicActionUncheckedCreateWithoutTopicInput>
  }

  export type TopicActionUpdateWithWhereUniqueWithoutTopicInput = {
    where: TopicActionWhereUniqueInput
    data: XOR<TopicActionUpdateWithoutTopicInput, TopicActionUncheckedUpdateWithoutTopicInput>
  }

  export type TopicActionUpdateManyWithWhereWithoutTopicInput = {
    where: TopicActionScalarWhereInput
    data: XOR<TopicActionUpdateManyMutationInput, TopicActionUncheckedUpdateManyWithoutTopicInput>
  }

  export type TopicCreateWithoutCommentsInput = {
    id?: string
    title: string
    content: string
    contentType?: string
    summary?: string | null
    category: string
    tags?: string | null
    topicType?: string
    demandType?: string | null
    skillsNeeded?: string | null
    skillsProvided?: string | null
    threshold?: number
    wantToHearCount?: number
    canTellCount?: number
    status?: string
    teamSize?: number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: string | null
    website?: string | null
    github?: string | null
    interestedCount?: number
    duration?: string | null
    targetAudience?: string | null
    scheduledTime?: Date | string | null
    deadline?: Date | string | null
    budget?: string | null
    contactInfo?: string | null
    images?: string | null
    documents?: string | null
    videos?: string | null
    links?: string | null
    quickActions?: string | null
    visibility?: string
    viewsCount?: number
    likesCount?: number
    commentsCount?: number
    bookmarksCount?: number
    hotScore?: number
    trendingScore?: number
    isHot?: boolean
    publishedAt?: Date | string | null
    lastActiveAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutTopicsInput
    likes?: LikeCreateNestedManyWithoutTopicInput
    bookmarks?: BookmarkCreateNestedManyWithoutTopicInput
    notifications?: NotificationCreateNestedManyWithoutTopicInput
    userActions?: UserActionCreateNestedManyWithoutTopicInput
    quickActionsList?: TopicQuickActionCreateNestedManyWithoutTopicInput
    actions?: TopicActionCreateNestedManyWithoutTopicInput
  }

  export type TopicUncheckedCreateWithoutCommentsInput = {
    id?: string
    title: string
    content: string
    contentType?: string
    summary?: string | null
    category: string
    tags?: string | null
    topicType?: string
    demandType?: string | null
    skillsNeeded?: string | null
    skillsProvided?: string | null
    threshold?: number
    wantToHearCount?: number
    canTellCount?: number
    status?: string
    teamSize?: number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: string | null
    website?: string | null
    github?: string | null
    interestedCount?: number
    duration?: string | null
    targetAudience?: string | null
    scheduledTime?: Date | string | null
    deadline?: Date | string | null
    budget?: string | null
    contactInfo?: string | null
    images?: string | null
    documents?: string | null
    videos?: string | null
    links?: string | null
    quickActions?: string | null
    visibility?: string
    viewsCount?: number
    likesCount?: number
    commentsCount?: number
    bookmarksCount?: number
    hotScore?: number
    trendingScore?: number
    isHot?: boolean
    publishedAt?: Date | string | null
    lastActiveAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    likes?: LikeUncheckedCreateNestedManyWithoutTopicInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutTopicInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTopicInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutTopicInput
    quickActionsList?: TopicQuickActionUncheckedCreateNestedManyWithoutTopicInput
    actions?: TopicActionUncheckedCreateNestedManyWithoutTopicInput
  }

  export type TopicCreateOrConnectWithoutCommentsInput = {
    where: TopicWhereUniqueInput
    create: XOR<TopicCreateWithoutCommentsInput, TopicUncheckedCreateWithoutCommentsInput>
  }

  export type ProjectCreateWithoutCommentsInput = {
    id?: string
    category: string
    title: string
    description: string
    tags?: string | null
    teamSize?: number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: string | null
    website?: string | null
    github?: string | null
    viewCount?: number
    likeCount?: number
    commentCount?: number
    interestedCount?: number
    images?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutProjectsInput
    actions?: ProjectActionCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutCommentsInput = {
    id?: string
    category: string
    title: string
    description: string
    tags?: string | null
    teamSize?: number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: string | null
    website?: string | null
    github?: string | null
    viewCount?: number
    likeCount?: number
    commentCount?: number
    interestedCount?: number
    images?: string | null
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    actions?: ProjectActionUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutCommentsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutCommentsInput, ProjectUncheckedCreateWithoutCommentsInput>
  }

  export type UserCreateWithoutCommentsInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicCreateNestedManyWithoutAuthorInput
    projects?: ProjectCreateNestedManyWithoutAuthorInput
    likes?: LikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    follows?: FollowCreateNestedManyWithoutFollowerInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionCreateNestedManyWithoutUserInput
    topicActions?: TopicActionCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionCreateNestedManyWithoutUserInput
    activities?: ActivityCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCommentsInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicUncheckedCreateNestedManyWithoutAuthorInput
    projects?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    follows?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionUncheckedCreateNestedManyWithoutUserInput
    topicActions?: TopicActionUncheckedCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityUncheckedCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantUncheckedCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeUncheckedCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentUncheckedCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingUncheckedCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyUncheckedCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogUncheckedCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordUncheckedCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type CommentCreateWithoutRepliesInput = {
    id?: string
    content: string
    images?: string | null
    rootId?: string | null
    repliesCount?: number
    likesCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    topic?: TopicCreateNestedOneWithoutCommentsInput
    project?: ProjectCreateNestedOneWithoutCommentsInput
    author: UserCreateNestedOneWithoutCommentsInput
    parent?: CommentCreateNestedOneWithoutRepliesInput
    likes?: LikeCreateNestedManyWithoutCommentInput
    notifications?: NotificationCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutRepliesInput = {
    id?: string
    content: string
    images?: string | null
    parentId?: string | null
    rootId?: string | null
    repliesCount?: number
    likesCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    topicId?: string | null
    projectId?: string | null
    authorId: string
    likes?: LikeUncheckedCreateNestedManyWithoutCommentInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutRepliesInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutRepliesInput, CommentUncheckedCreateWithoutRepliesInput>
  }

  export type CommentCreateWithoutParentInput = {
    id?: string
    content: string
    images?: string | null
    rootId?: string | null
    repliesCount?: number
    likesCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    topic?: TopicCreateNestedOneWithoutCommentsInput
    project?: ProjectCreateNestedOneWithoutCommentsInput
    author: UserCreateNestedOneWithoutCommentsInput
    replies?: CommentCreateNestedManyWithoutParentInput
    likes?: LikeCreateNestedManyWithoutCommentInput
    notifications?: NotificationCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutParentInput = {
    id?: string
    content: string
    images?: string | null
    rootId?: string | null
    repliesCount?: number
    likesCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    topicId?: string | null
    projectId?: string | null
    authorId: string
    replies?: CommentUncheckedCreateNestedManyWithoutParentInput
    likes?: LikeUncheckedCreateNestedManyWithoutCommentInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutParentInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutParentInput, CommentUncheckedCreateWithoutParentInput>
  }

  export type CommentCreateManyParentInputEnvelope = {
    data: CommentCreateManyParentInput | CommentCreateManyParentInput[]
    skipDuplicates?: boolean
  }

  export type LikeCreateWithoutCommentInput = {
    id?: string
    targetType: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutLikesInput
    topic?: TopicCreateNestedOneWithoutLikesInput
  }

  export type LikeUncheckedCreateWithoutCommentInput = {
    id?: string
    targetType: string
    createdAt?: Date | string
    userId: string
  }

  export type LikeCreateOrConnectWithoutCommentInput = {
    where: LikeWhereUniqueInput
    create: XOR<LikeCreateWithoutCommentInput, LikeUncheckedCreateWithoutCommentInput>
  }

  export type LikeCreateManyCommentInputEnvelope = {
    data: LikeCreateManyCommentInput | LikeCreateManyCommentInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutCommentInput = {
    id?: string
    type: string
    title: string
    content: string
    isRead?: boolean
    readAt?: Date | string | null
    link?: string | null
    createdAt?: Date | string
    targetType: string
    user: UserCreateNestedOneWithoutReceivedNotificationsInput
    actor?: UserCreateNestedOneWithoutSentNotificationsInput
    topic?: TopicCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutCommentInput = {
    id?: string
    type: string
    title: string
    content: string
    isRead?: boolean
    readAt?: Date | string | null
    link?: string | null
    createdAt?: Date | string
    userId: string
    actorId?: string | null
    targetType: string
  }

  export type NotificationCreateOrConnectWithoutCommentInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutCommentInput, NotificationUncheckedCreateWithoutCommentInput>
  }

  export type NotificationCreateManyCommentInputEnvelope = {
    data: NotificationCreateManyCommentInput | NotificationCreateManyCommentInput[]
    skipDuplicates?: boolean
  }

  export type TopicUpsertWithoutCommentsInput = {
    update: XOR<TopicUpdateWithoutCommentsInput, TopicUncheckedUpdateWithoutCommentsInput>
    create: XOR<TopicCreateWithoutCommentsInput, TopicUncheckedCreateWithoutCommentsInput>
    where?: TopicWhereInput
  }

  export type TopicUpdateToOneWithWhereWithoutCommentsInput = {
    where?: TopicWhereInput
    data: XOR<TopicUpdateWithoutCommentsInput, TopicUncheckedUpdateWithoutCommentsInput>
  }

  export type TopicUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    topicType?: StringFieldUpdateOperationsInput | string
    demandType?: NullableStringFieldUpdateOperationsInput | string | null
    skillsNeeded?: NullableStringFieldUpdateOperationsInput | string | null
    skillsProvided?: NullableStringFieldUpdateOperationsInput | string | null
    threshold?: IntFieldUpdateOperationsInput | number
    wantToHearCount?: IntFieldUpdateOperationsInput | number
    canTellCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    teamSize?: NullableIntFieldUpdateOperationsInput | number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    interestedCount?: IntFieldUpdateOperationsInput | number
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableStringFieldUpdateOperationsInput | string | null
    videos?: NullableStringFieldUpdateOperationsInput | string | null
    links?: NullableStringFieldUpdateOperationsInput | string | null
    quickActions?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: StringFieldUpdateOperationsInput | string
    viewsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    bookmarksCount?: IntFieldUpdateOperationsInput | number
    hotScore?: FloatFieldUpdateOperationsInput | number
    trendingScore?: FloatFieldUpdateOperationsInput | number
    isHot?: BoolFieldUpdateOperationsInput | boolean
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutTopicsNestedInput
    likes?: LikeUpdateManyWithoutTopicNestedInput
    bookmarks?: BookmarkUpdateManyWithoutTopicNestedInput
    notifications?: NotificationUpdateManyWithoutTopicNestedInput
    userActions?: UserActionUpdateManyWithoutTopicNestedInput
    quickActionsList?: TopicQuickActionUpdateManyWithoutTopicNestedInput
    actions?: TopicActionUpdateManyWithoutTopicNestedInput
  }

  export type TopicUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    topicType?: StringFieldUpdateOperationsInput | string
    demandType?: NullableStringFieldUpdateOperationsInput | string | null
    skillsNeeded?: NullableStringFieldUpdateOperationsInput | string | null
    skillsProvided?: NullableStringFieldUpdateOperationsInput | string | null
    threshold?: IntFieldUpdateOperationsInput | number
    wantToHearCount?: IntFieldUpdateOperationsInput | number
    canTellCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    teamSize?: NullableIntFieldUpdateOperationsInput | number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    interestedCount?: IntFieldUpdateOperationsInput | number
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableStringFieldUpdateOperationsInput | string | null
    videos?: NullableStringFieldUpdateOperationsInput | string | null
    links?: NullableStringFieldUpdateOperationsInput | string | null
    quickActions?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: StringFieldUpdateOperationsInput | string
    viewsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    bookmarksCount?: IntFieldUpdateOperationsInput | number
    hotScore?: FloatFieldUpdateOperationsInput | number
    trendingScore?: FloatFieldUpdateOperationsInput | number
    isHot?: BoolFieldUpdateOperationsInput | boolean
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    likes?: LikeUncheckedUpdateManyWithoutTopicNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutTopicNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTopicNestedInput
    userActions?: UserActionUncheckedUpdateManyWithoutTopicNestedInput
    quickActionsList?: TopicQuickActionUncheckedUpdateManyWithoutTopicNestedInput
    actions?: TopicActionUncheckedUpdateManyWithoutTopicNestedInput
  }

  export type ProjectUpsertWithoutCommentsInput = {
    update: XOR<ProjectUpdateWithoutCommentsInput, ProjectUncheckedUpdateWithoutCommentsInput>
    create: XOR<ProjectCreateWithoutCommentsInput, ProjectUncheckedCreateWithoutCommentsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutCommentsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutCommentsInput, ProjectUncheckedUpdateWithoutCommentsInput>
  }

  export type ProjectUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    teamSize?: NullableIntFieldUpdateOperationsInput | number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    interestedCount?: IntFieldUpdateOperationsInput | number
    images?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutProjectsNestedInput
    actions?: ProjectActionUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    teamSize?: NullableIntFieldUpdateOperationsInput | number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    interestedCount?: IntFieldUpdateOperationsInput | number
    images?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actions?: ProjectActionUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type UserUpsertWithoutCommentsInput = {
    update: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUpdateManyWithoutAuthorNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    follows?: FollowUpdateManyWithoutFollowerNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    userActions?: UserActionUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUpdateManyWithoutUserNestedInput
    activities?: ActivityUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUncheckedUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    follows?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUncheckedUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUncheckedUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUncheckedUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUncheckedUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUncheckedUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUncheckedUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUncheckedUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUncheckedUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUncheckedUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CommentUpsertWithoutRepliesInput = {
    update: XOR<CommentUpdateWithoutRepliesInput, CommentUncheckedUpdateWithoutRepliesInput>
    create: XOR<CommentCreateWithoutRepliesInput, CommentUncheckedCreateWithoutRepliesInput>
    where?: CommentWhereInput
  }

  export type CommentUpdateToOneWithWhereWithoutRepliesInput = {
    where?: CommentWhereInput
    data: XOR<CommentUpdateWithoutRepliesInput, CommentUncheckedUpdateWithoutRepliesInput>
  }

  export type CommentUpdateWithoutRepliesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    rootId?: NullableStringFieldUpdateOperationsInput | string | null
    repliesCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: TopicUpdateOneWithoutCommentsNestedInput
    project?: ProjectUpdateOneWithoutCommentsNestedInput
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
    parent?: CommentUpdateOneWithoutRepliesNestedInput
    likes?: LikeUpdateManyWithoutCommentNestedInput
    notifications?: NotificationUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutRepliesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    rootId?: NullableStringFieldUpdateOperationsInput | string | null
    repliesCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topicId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    likes?: LikeUncheckedUpdateManyWithoutCommentNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentUpsertWithWhereUniqueWithoutParentInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutParentInput, CommentUncheckedUpdateWithoutParentInput>
    create: XOR<CommentCreateWithoutParentInput, CommentUncheckedCreateWithoutParentInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutParentInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutParentInput, CommentUncheckedUpdateWithoutParentInput>
  }

  export type CommentUpdateManyWithWhereWithoutParentInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutParentInput>
  }

  export type LikeUpsertWithWhereUniqueWithoutCommentInput = {
    where: LikeWhereUniqueInput
    update: XOR<LikeUpdateWithoutCommentInput, LikeUncheckedUpdateWithoutCommentInput>
    create: XOR<LikeCreateWithoutCommentInput, LikeUncheckedCreateWithoutCommentInput>
  }

  export type LikeUpdateWithWhereUniqueWithoutCommentInput = {
    where: LikeWhereUniqueInput
    data: XOR<LikeUpdateWithoutCommentInput, LikeUncheckedUpdateWithoutCommentInput>
  }

  export type LikeUpdateManyWithWhereWithoutCommentInput = {
    where: LikeScalarWhereInput
    data: XOR<LikeUpdateManyMutationInput, LikeUncheckedUpdateManyWithoutCommentInput>
  }

  export type NotificationUpsertWithWhereUniqueWithoutCommentInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutCommentInput, NotificationUncheckedUpdateWithoutCommentInput>
    create: XOR<NotificationCreateWithoutCommentInput, NotificationUncheckedCreateWithoutCommentInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutCommentInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutCommentInput, NotificationUncheckedUpdateWithoutCommentInput>
  }

  export type NotificationUpdateManyWithWhereWithoutCommentInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutCommentInput>
  }

  export type UserCreateWithoutLikesInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicCreateNestedManyWithoutAuthorInput
    projects?: ProjectCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    follows?: FollowCreateNestedManyWithoutFollowerInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionCreateNestedManyWithoutUserInput
    topicActions?: TopicActionCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionCreateNestedManyWithoutUserInput
    activities?: ActivityCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLikesInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicUncheckedCreateNestedManyWithoutAuthorInput
    projects?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    follows?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionUncheckedCreateNestedManyWithoutUserInput
    topicActions?: TopicActionUncheckedCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityUncheckedCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantUncheckedCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeUncheckedCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentUncheckedCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingUncheckedCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyUncheckedCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogUncheckedCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordUncheckedCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLikesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLikesInput, UserUncheckedCreateWithoutLikesInput>
  }

  export type TopicCreateWithoutLikesInput = {
    id?: string
    title: string
    content: string
    contentType?: string
    summary?: string | null
    category: string
    tags?: string | null
    topicType?: string
    demandType?: string | null
    skillsNeeded?: string | null
    skillsProvided?: string | null
    threshold?: number
    wantToHearCount?: number
    canTellCount?: number
    status?: string
    teamSize?: number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: string | null
    website?: string | null
    github?: string | null
    interestedCount?: number
    duration?: string | null
    targetAudience?: string | null
    scheduledTime?: Date | string | null
    deadline?: Date | string | null
    budget?: string | null
    contactInfo?: string | null
    images?: string | null
    documents?: string | null
    videos?: string | null
    links?: string | null
    quickActions?: string | null
    visibility?: string
    viewsCount?: number
    likesCount?: number
    commentsCount?: number
    bookmarksCount?: number
    hotScore?: number
    trendingScore?: number
    isHot?: boolean
    publishedAt?: Date | string | null
    lastActiveAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutTopicsInput
    comments?: CommentCreateNestedManyWithoutTopicInput
    bookmarks?: BookmarkCreateNestedManyWithoutTopicInput
    notifications?: NotificationCreateNestedManyWithoutTopicInput
    userActions?: UserActionCreateNestedManyWithoutTopicInput
    quickActionsList?: TopicQuickActionCreateNestedManyWithoutTopicInput
    actions?: TopicActionCreateNestedManyWithoutTopicInput
  }

  export type TopicUncheckedCreateWithoutLikesInput = {
    id?: string
    title: string
    content: string
    contentType?: string
    summary?: string | null
    category: string
    tags?: string | null
    topicType?: string
    demandType?: string | null
    skillsNeeded?: string | null
    skillsProvided?: string | null
    threshold?: number
    wantToHearCount?: number
    canTellCount?: number
    status?: string
    teamSize?: number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: string | null
    website?: string | null
    github?: string | null
    interestedCount?: number
    duration?: string | null
    targetAudience?: string | null
    scheduledTime?: Date | string | null
    deadline?: Date | string | null
    budget?: string | null
    contactInfo?: string | null
    images?: string | null
    documents?: string | null
    videos?: string | null
    links?: string | null
    quickActions?: string | null
    visibility?: string
    viewsCount?: number
    likesCount?: number
    commentsCount?: number
    bookmarksCount?: number
    hotScore?: number
    trendingScore?: number
    isHot?: boolean
    publishedAt?: Date | string | null
    lastActiveAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    comments?: CommentUncheckedCreateNestedManyWithoutTopicInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutTopicInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTopicInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutTopicInput
    quickActionsList?: TopicQuickActionUncheckedCreateNestedManyWithoutTopicInput
    actions?: TopicActionUncheckedCreateNestedManyWithoutTopicInput
  }

  export type TopicCreateOrConnectWithoutLikesInput = {
    where: TopicWhereUniqueInput
    create: XOR<TopicCreateWithoutLikesInput, TopicUncheckedCreateWithoutLikesInput>
  }

  export type CommentCreateWithoutLikesInput = {
    id?: string
    content: string
    images?: string | null
    rootId?: string | null
    repliesCount?: number
    likesCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    topic?: TopicCreateNestedOneWithoutCommentsInput
    project?: ProjectCreateNestedOneWithoutCommentsInput
    author: UserCreateNestedOneWithoutCommentsInput
    parent?: CommentCreateNestedOneWithoutRepliesInput
    replies?: CommentCreateNestedManyWithoutParentInput
    notifications?: NotificationCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutLikesInput = {
    id?: string
    content: string
    images?: string | null
    parentId?: string | null
    rootId?: string | null
    repliesCount?: number
    likesCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    topicId?: string | null
    projectId?: string | null
    authorId: string
    replies?: CommentUncheckedCreateNestedManyWithoutParentInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutLikesInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutLikesInput, CommentUncheckedCreateWithoutLikesInput>
  }

  export type UserUpsertWithoutLikesInput = {
    update: XOR<UserUpdateWithoutLikesInput, UserUncheckedUpdateWithoutLikesInput>
    create: XOR<UserCreateWithoutLikesInput, UserUncheckedCreateWithoutLikesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLikesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLikesInput, UserUncheckedUpdateWithoutLikesInput>
  }

  export type UserUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    follows?: FollowUpdateManyWithoutFollowerNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    userActions?: UserActionUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUpdateManyWithoutUserNestedInput
    activities?: ActivityUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUncheckedUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    follows?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUncheckedUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUncheckedUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUncheckedUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUncheckedUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUncheckedUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUncheckedUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUncheckedUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUncheckedUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUncheckedUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TopicUpsertWithoutLikesInput = {
    update: XOR<TopicUpdateWithoutLikesInput, TopicUncheckedUpdateWithoutLikesInput>
    create: XOR<TopicCreateWithoutLikesInput, TopicUncheckedCreateWithoutLikesInput>
    where?: TopicWhereInput
  }

  export type TopicUpdateToOneWithWhereWithoutLikesInput = {
    where?: TopicWhereInput
    data: XOR<TopicUpdateWithoutLikesInput, TopicUncheckedUpdateWithoutLikesInput>
  }

  export type TopicUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    topicType?: StringFieldUpdateOperationsInput | string
    demandType?: NullableStringFieldUpdateOperationsInput | string | null
    skillsNeeded?: NullableStringFieldUpdateOperationsInput | string | null
    skillsProvided?: NullableStringFieldUpdateOperationsInput | string | null
    threshold?: IntFieldUpdateOperationsInput | number
    wantToHearCount?: IntFieldUpdateOperationsInput | number
    canTellCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    teamSize?: NullableIntFieldUpdateOperationsInput | number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    interestedCount?: IntFieldUpdateOperationsInput | number
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableStringFieldUpdateOperationsInput | string | null
    videos?: NullableStringFieldUpdateOperationsInput | string | null
    links?: NullableStringFieldUpdateOperationsInput | string | null
    quickActions?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: StringFieldUpdateOperationsInput | string
    viewsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    bookmarksCount?: IntFieldUpdateOperationsInput | number
    hotScore?: FloatFieldUpdateOperationsInput | number
    trendingScore?: FloatFieldUpdateOperationsInput | number
    isHot?: BoolFieldUpdateOperationsInput | boolean
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutTopicsNestedInput
    comments?: CommentUpdateManyWithoutTopicNestedInput
    bookmarks?: BookmarkUpdateManyWithoutTopicNestedInput
    notifications?: NotificationUpdateManyWithoutTopicNestedInput
    userActions?: UserActionUpdateManyWithoutTopicNestedInput
    quickActionsList?: TopicQuickActionUpdateManyWithoutTopicNestedInput
    actions?: TopicActionUpdateManyWithoutTopicNestedInput
  }

  export type TopicUncheckedUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    topicType?: StringFieldUpdateOperationsInput | string
    demandType?: NullableStringFieldUpdateOperationsInput | string | null
    skillsNeeded?: NullableStringFieldUpdateOperationsInput | string | null
    skillsProvided?: NullableStringFieldUpdateOperationsInput | string | null
    threshold?: IntFieldUpdateOperationsInput | number
    wantToHearCount?: IntFieldUpdateOperationsInput | number
    canTellCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    teamSize?: NullableIntFieldUpdateOperationsInput | number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    interestedCount?: IntFieldUpdateOperationsInput | number
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableStringFieldUpdateOperationsInput | string | null
    videos?: NullableStringFieldUpdateOperationsInput | string | null
    links?: NullableStringFieldUpdateOperationsInput | string | null
    quickActions?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: StringFieldUpdateOperationsInput | string
    viewsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    bookmarksCount?: IntFieldUpdateOperationsInput | number
    hotScore?: FloatFieldUpdateOperationsInput | number
    trendingScore?: FloatFieldUpdateOperationsInput | number
    isHot?: BoolFieldUpdateOperationsInput | boolean
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    comments?: CommentUncheckedUpdateManyWithoutTopicNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutTopicNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTopicNestedInput
    userActions?: UserActionUncheckedUpdateManyWithoutTopicNestedInput
    quickActionsList?: TopicQuickActionUncheckedUpdateManyWithoutTopicNestedInput
    actions?: TopicActionUncheckedUpdateManyWithoutTopicNestedInput
  }

  export type CommentUpsertWithoutLikesInput = {
    update: XOR<CommentUpdateWithoutLikesInput, CommentUncheckedUpdateWithoutLikesInput>
    create: XOR<CommentCreateWithoutLikesInput, CommentUncheckedCreateWithoutLikesInput>
    where?: CommentWhereInput
  }

  export type CommentUpdateToOneWithWhereWithoutLikesInput = {
    where?: CommentWhereInput
    data: XOR<CommentUpdateWithoutLikesInput, CommentUncheckedUpdateWithoutLikesInput>
  }

  export type CommentUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    rootId?: NullableStringFieldUpdateOperationsInput | string | null
    repliesCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: TopicUpdateOneWithoutCommentsNestedInput
    project?: ProjectUpdateOneWithoutCommentsNestedInput
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
    parent?: CommentUpdateOneWithoutRepliesNestedInput
    replies?: CommentUpdateManyWithoutParentNestedInput
    notifications?: NotificationUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    rootId?: NullableStringFieldUpdateOperationsInput | string | null
    repliesCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topicId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    replies?: CommentUncheckedUpdateManyWithoutParentNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type UserCreateWithoutBookmarksInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicCreateNestedManyWithoutAuthorInput
    projects?: ProjectCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    likes?: LikeCreateNestedManyWithoutUserInput
    follows?: FollowCreateNestedManyWithoutFollowerInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionCreateNestedManyWithoutUserInput
    topicActions?: TopicActionCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionCreateNestedManyWithoutUserInput
    activities?: ActivityCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBookmarksInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicUncheckedCreateNestedManyWithoutAuthorInput
    projects?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    follows?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionUncheckedCreateNestedManyWithoutUserInput
    topicActions?: TopicActionUncheckedCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityUncheckedCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantUncheckedCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeUncheckedCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentUncheckedCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingUncheckedCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyUncheckedCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogUncheckedCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordUncheckedCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBookmarksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBookmarksInput, UserUncheckedCreateWithoutBookmarksInput>
  }

  export type TopicCreateWithoutBookmarksInput = {
    id?: string
    title: string
    content: string
    contentType?: string
    summary?: string | null
    category: string
    tags?: string | null
    topicType?: string
    demandType?: string | null
    skillsNeeded?: string | null
    skillsProvided?: string | null
    threshold?: number
    wantToHearCount?: number
    canTellCount?: number
    status?: string
    teamSize?: number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: string | null
    website?: string | null
    github?: string | null
    interestedCount?: number
    duration?: string | null
    targetAudience?: string | null
    scheduledTime?: Date | string | null
    deadline?: Date | string | null
    budget?: string | null
    contactInfo?: string | null
    images?: string | null
    documents?: string | null
    videos?: string | null
    links?: string | null
    quickActions?: string | null
    visibility?: string
    viewsCount?: number
    likesCount?: number
    commentsCount?: number
    bookmarksCount?: number
    hotScore?: number
    trendingScore?: number
    isHot?: boolean
    publishedAt?: Date | string | null
    lastActiveAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutTopicsInput
    comments?: CommentCreateNestedManyWithoutTopicInput
    likes?: LikeCreateNestedManyWithoutTopicInput
    notifications?: NotificationCreateNestedManyWithoutTopicInput
    userActions?: UserActionCreateNestedManyWithoutTopicInput
    quickActionsList?: TopicQuickActionCreateNestedManyWithoutTopicInput
    actions?: TopicActionCreateNestedManyWithoutTopicInput
  }

  export type TopicUncheckedCreateWithoutBookmarksInput = {
    id?: string
    title: string
    content: string
    contentType?: string
    summary?: string | null
    category: string
    tags?: string | null
    topicType?: string
    demandType?: string | null
    skillsNeeded?: string | null
    skillsProvided?: string | null
    threshold?: number
    wantToHearCount?: number
    canTellCount?: number
    status?: string
    teamSize?: number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: string | null
    website?: string | null
    github?: string | null
    interestedCount?: number
    duration?: string | null
    targetAudience?: string | null
    scheduledTime?: Date | string | null
    deadline?: Date | string | null
    budget?: string | null
    contactInfo?: string | null
    images?: string | null
    documents?: string | null
    videos?: string | null
    links?: string | null
    quickActions?: string | null
    visibility?: string
    viewsCount?: number
    likesCount?: number
    commentsCount?: number
    bookmarksCount?: number
    hotScore?: number
    trendingScore?: number
    isHot?: boolean
    publishedAt?: Date | string | null
    lastActiveAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    comments?: CommentUncheckedCreateNestedManyWithoutTopicInput
    likes?: LikeUncheckedCreateNestedManyWithoutTopicInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTopicInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutTopicInput
    quickActionsList?: TopicQuickActionUncheckedCreateNestedManyWithoutTopicInput
    actions?: TopicActionUncheckedCreateNestedManyWithoutTopicInput
  }

  export type TopicCreateOrConnectWithoutBookmarksInput = {
    where: TopicWhereUniqueInput
    create: XOR<TopicCreateWithoutBookmarksInput, TopicUncheckedCreateWithoutBookmarksInput>
  }

  export type UserUpsertWithoutBookmarksInput = {
    update: XOR<UserUpdateWithoutBookmarksInput, UserUncheckedUpdateWithoutBookmarksInput>
    create: XOR<UserCreateWithoutBookmarksInput, UserUncheckedCreateWithoutBookmarksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBookmarksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBookmarksInput, UserUncheckedUpdateWithoutBookmarksInput>
  }

  export type UserUpdateWithoutBookmarksInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    follows?: FollowUpdateManyWithoutFollowerNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    userActions?: UserActionUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUpdateManyWithoutUserNestedInput
    activities?: ActivityUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBookmarksInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUncheckedUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    follows?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUncheckedUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUncheckedUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUncheckedUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUncheckedUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUncheckedUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUncheckedUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUncheckedUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUncheckedUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUncheckedUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TopicUpsertWithoutBookmarksInput = {
    update: XOR<TopicUpdateWithoutBookmarksInput, TopicUncheckedUpdateWithoutBookmarksInput>
    create: XOR<TopicCreateWithoutBookmarksInput, TopicUncheckedCreateWithoutBookmarksInput>
    where?: TopicWhereInput
  }

  export type TopicUpdateToOneWithWhereWithoutBookmarksInput = {
    where?: TopicWhereInput
    data: XOR<TopicUpdateWithoutBookmarksInput, TopicUncheckedUpdateWithoutBookmarksInput>
  }

  export type TopicUpdateWithoutBookmarksInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    topicType?: StringFieldUpdateOperationsInput | string
    demandType?: NullableStringFieldUpdateOperationsInput | string | null
    skillsNeeded?: NullableStringFieldUpdateOperationsInput | string | null
    skillsProvided?: NullableStringFieldUpdateOperationsInput | string | null
    threshold?: IntFieldUpdateOperationsInput | number
    wantToHearCount?: IntFieldUpdateOperationsInput | number
    canTellCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    teamSize?: NullableIntFieldUpdateOperationsInput | number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    interestedCount?: IntFieldUpdateOperationsInput | number
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableStringFieldUpdateOperationsInput | string | null
    videos?: NullableStringFieldUpdateOperationsInput | string | null
    links?: NullableStringFieldUpdateOperationsInput | string | null
    quickActions?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: StringFieldUpdateOperationsInput | string
    viewsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    bookmarksCount?: IntFieldUpdateOperationsInput | number
    hotScore?: FloatFieldUpdateOperationsInput | number
    trendingScore?: FloatFieldUpdateOperationsInput | number
    isHot?: BoolFieldUpdateOperationsInput | boolean
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutTopicsNestedInput
    comments?: CommentUpdateManyWithoutTopicNestedInput
    likes?: LikeUpdateManyWithoutTopicNestedInput
    notifications?: NotificationUpdateManyWithoutTopicNestedInput
    userActions?: UserActionUpdateManyWithoutTopicNestedInput
    quickActionsList?: TopicQuickActionUpdateManyWithoutTopicNestedInput
    actions?: TopicActionUpdateManyWithoutTopicNestedInput
  }

  export type TopicUncheckedUpdateWithoutBookmarksInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    topicType?: StringFieldUpdateOperationsInput | string
    demandType?: NullableStringFieldUpdateOperationsInput | string | null
    skillsNeeded?: NullableStringFieldUpdateOperationsInput | string | null
    skillsProvided?: NullableStringFieldUpdateOperationsInput | string | null
    threshold?: IntFieldUpdateOperationsInput | number
    wantToHearCount?: IntFieldUpdateOperationsInput | number
    canTellCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    teamSize?: NullableIntFieldUpdateOperationsInput | number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    interestedCount?: IntFieldUpdateOperationsInput | number
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableStringFieldUpdateOperationsInput | string | null
    videos?: NullableStringFieldUpdateOperationsInput | string | null
    links?: NullableStringFieldUpdateOperationsInput | string | null
    quickActions?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: StringFieldUpdateOperationsInput | string
    viewsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    bookmarksCount?: IntFieldUpdateOperationsInput | number
    hotScore?: FloatFieldUpdateOperationsInput | number
    trendingScore?: FloatFieldUpdateOperationsInput | number
    isHot?: BoolFieldUpdateOperationsInput | boolean
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    comments?: CommentUncheckedUpdateManyWithoutTopicNestedInput
    likes?: LikeUncheckedUpdateManyWithoutTopicNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTopicNestedInput
    userActions?: UserActionUncheckedUpdateManyWithoutTopicNestedInput
    quickActionsList?: TopicQuickActionUncheckedUpdateManyWithoutTopicNestedInput
    actions?: TopicActionUncheckedUpdateManyWithoutTopicNestedInput
  }

  export type UserCreateWithoutFollowsInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicCreateNestedManyWithoutAuthorInput
    projects?: ProjectCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    likes?: LikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionCreateNestedManyWithoutUserInput
    topicActions?: TopicActionCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionCreateNestedManyWithoutUserInput
    activities?: ActivityCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFollowsInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicUncheckedCreateNestedManyWithoutAuthorInput
    projects?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionUncheckedCreateNestedManyWithoutUserInput
    topicActions?: TopicActionUncheckedCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityUncheckedCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantUncheckedCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeUncheckedCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentUncheckedCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingUncheckedCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyUncheckedCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogUncheckedCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordUncheckedCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFollowsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFollowsInput, UserUncheckedCreateWithoutFollowsInput>
  }

  export type UserCreateWithoutFollowersInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicCreateNestedManyWithoutAuthorInput
    projects?: ProjectCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    likes?: LikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    follows?: FollowCreateNestedManyWithoutFollowerInput
    sentNotifications?: NotificationCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionCreateNestedManyWithoutUserInput
    topicActions?: TopicActionCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionCreateNestedManyWithoutUserInput
    activities?: ActivityCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFollowersInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicUncheckedCreateNestedManyWithoutAuthorInput
    projects?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    follows?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionUncheckedCreateNestedManyWithoutUserInput
    topicActions?: TopicActionUncheckedCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityUncheckedCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantUncheckedCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeUncheckedCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentUncheckedCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingUncheckedCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyUncheckedCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogUncheckedCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordUncheckedCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFollowersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFollowersInput, UserUncheckedCreateWithoutFollowersInput>
  }

  export type UserUpsertWithoutFollowsInput = {
    update: XOR<UserUpdateWithoutFollowsInput, UserUncheckedUpdateWithoutFollowsInput>
    create: XOR<UserCreateWithoutFollowsInput, UserUncheckedCreateWithoutFollowsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFollowsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFollowsInput, UserUncheckedUpdateWithoutFollowsInput>
  }

  export type UserUpdateWithoutFollowsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    userActions?: UserActionUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUpdateManyWithoutUserNestedInput
    activities?: ActivityUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFollowsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUncheckedUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUncheckedUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUncheckedUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUncheckedUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUncheckedUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUncheckedUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUncheckedUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUncheckedUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUncheckedUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUncheckedUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutFollowersInput = {
    update: XOR<UserUpdateWithoutFollowersInput, UserUncheckedUpdateWithoutFollowersInput>
    create: XOR<UserCreateWithoutFollowersInput, UserUncheckedCreateWithoutFollowersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFollowersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFollowersInput, UserUncheckedUpdateWithoutFollowersInput>
  }

  export type UserUpdateWithoutFollowersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    follows?: FollowUpdateManyWithoutFollowerNestedInput
    sentNotifications?: NotificationUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    userActions?: UserActionUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUpdateManyWithoutUserNestedInput
    activities?: ActivityUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFollowersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUncheckedUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    follows?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUncheckedUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUncheckedUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUncheckedUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUncheckedUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUncheckedUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUncheckedUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUncheckedUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUncheckedUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUncheckedUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutReceivedNotificationsInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicCreateNestedManyWithoutAuthorInput
    projects?: ProjectCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    likes?: LikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    follows?: FollowCreateNestedManyWithoutFollowerInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationCreateNestedManyWithoutActorInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionCreateNestedManyWithoutUserInput
    topicActions?: TopicActionCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionCreateNestedManyWithoutUserInput
    activities?: ActivityCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReceivedNotificationsInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicUncheckedCreateNestedManyWithoutAuthorInput
    projects?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    follows?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutActorInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionUncheckedCreateNestedManyWithoutUserInput
    topicActions?: TopicActionUncheckedCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityUncheckedCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantUncheckedCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeUncheckedCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentUncheckedCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingUncheckedCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyUncheckedCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogUncheckedCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordUncheckedCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReceivedNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceivedNotificationsInput, UserUncheckedCreateWithoutReceivedNotificationsInput>
  }

  export type UserCreateWithoutSentNotificationsInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicCreateNestedManyWithoutAuthorInput
    projects?: ProjectCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    likes?: LikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    follows?: FollowCreateNestedManyWithoutFollowerInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionCreateNestedManyWithoutUserInput
    topicActions?: TopicActionCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionCreateNestedManyWithoutUserInput
    activities?: ActivityCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSentNotificationsInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicUncheckedCreateNestedManyWithoutAuthorInput
    projects?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    follows?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionUncheckedCreateNestedManyWithoutUserInput
    topicActions?: TopicActionUncheckedCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityUncheckedCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantUncheckedCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeUncheckedCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentUncheckedCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingUncheckedCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyUncheckedCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogUncheckedCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordUncheckedCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSentNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSentNotificationsInput, UserUncheckedCreateWithoutSentNotificationsInput>
  }

  export type TopicCreateWithoutNotificationsInput = {
    id?: string
    title: string
    content: string
    contentType?: string
    summary?: string | null
    category: string
    tags?: string | null
    topicType?: string
    demandType?: string | null
    skillsNeeded?: string | null
    skillsProvided?: string | null
    threshold?: number
    wantToHearCount?: number
    canTellCount?: number
    status?: string
    teamSize?: number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: string | null
    website?: string | null
    github?: string | null
    interestedCount?: number
    duration?: string | null
    targetAudience?: string | null
    scheduledTime?: Date | string | null
    deadline?: Date | string | null
    budget?: string | null
    contactInfo?: string | null
    images?: string | null
    documents?: string | null
    videos?: string | null
    links?: string | null
    quickActions?: string | null
    visibility?: string
    viewsCount?: number
    likesCount?: number
    commentsCount?: number
    bookmarksCount?: number
    hotScore?: number
    trendingScore?: number
    isHot?: boolean
    publishedAt?: Date | string | null
    lastActiveAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutTopicsInput
    comments?: CommentCreateNestedManyWithoutTopicInput
    likes?: LikeCreateNestedManyWithoutTopicInput
    bookmarks?: BookmarkCreateNestedManyWithoutTopicInput
    userActions?: UserActionCreateNestedManyWithoutTopicInput
    quickActionsList?: TopicQuickActionCreateNestedManyWithoutTopicInput
    actions?: TopicActionCreateNestedManyWithoutTopicInput
  }

  export type TopicUncheckedCreateWithoutNotificationsInput = {
    id?: string
    title: string
    content: string
    contentType?: string
    summary?: string | null
    category: string
    tags?: string | null
    topicType?: string
    demandType?: string | null
    skillsNeeded?: string | null
    skillsProvided?: string | null
    threshold?: number
    wantToHearCount?: number
    canTellCount?: number
    status?: string
    teamSize?: number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: string | null
    website?: string | null
    github?: string | null
    interestedCount?: number
    duration?: string | null
    targetAudience?: string | null
    scheduledTime?: Date | string | null
    deadline?: Date | string | null
    budget?: string | null
    contactInfo?: string | null
    images?: string | null
    documents?: string | null
    videos?: string | null
    links?: string | null
    quickActions?: string | null
    visibility?: string
    viewsCount?: number
    likesCount?: number
    commentsCount?: number
    bookmarksCount?: number
    hotScore?: number
    trendingScore?: number
    isHot?: boolean
    publishedAt?: Date | string | null
    lastActiveAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    comments?: CommentUncheckedCreateNestedManyWithoutTopicInput
    likes?: LikeUncheckedCreateNestedManyWithoutTopicInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutTopicInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutTopicInput
    quickActionsList?: TopicQuickActionUncheckedCreateNestedManyWithoutTopicInput
    actions?: TopicActionUncheckedCreateNestedManyWithoutTopicInput
  }

  export type TopicCreateOrConnectWithoutNotificationsInput = {
    where: TopicWhereUniqueInput
    create: XOR<TopicCreateWithoutNotificationsInput, TopicUncheckedCreateWithoutNotificationsInput>
  }

  export type CommentCreateWithoutNotificationsInput = {
    id?: string
    content: string
    images?: string | null
    rootId?: string | null
    repliesCount?: number
    likesCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    topic?: TopicCreateNestedOneWithoutCommentsInput
    project?: ProjectCreateNestedOneWithoutCommentsInput
    author: UserCreateNestedOneWithoutCommentsInput
    parent?: CommentCreateNestedOneWithoutRepliesInput
    replies?: CommentCreateNestedManyWithoutParentInput
    likes?: LikeCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutNotificationsInput = {
    id?: string
    content: string
    images?: string | null
    parentId?: string | null
    rootId?: string | null
    repliesCount?: number
    likesCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    topicId?: string | null
    projectId?: string | null
    authorId: string
    replies?: CommentUncheckedCreateNestedManyWithoutParentInput
    likes?: LikeUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutNotificationsInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutNotificationsInput, CommentUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutReceivedNotificationsInput = {
    update: XOR<UserUpdateWithoutReceivedNotificationsInput, UserUncheckedUpdateWithoutReceivedNotificationsInput>
    create: XOR<UserCreateWithoutReceivedNotificationsInput, UserUncheckedCreateWithoutReceivedNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReceivedNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReceivedNotificationsInput, UserUncheckedUpdateWithoutReceivedNotificationsInput>
  }

  export type UserUpdateWithoutReceivedNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    follows?: FollowUpdateManyWithoutFollowerNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUpdateManyWithoutActorNestedInput
    userActions?: UserActionUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUpdateManyWithoutUserNestedInput
    activities?: ActivityUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReceivedNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUncheckedUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    follows?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutActorNestedInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUncheckedUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUncheckedUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUncheckedUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUncheckedUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUncheckedUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUncheckedUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUncheckedUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUncheckedUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUncheckedUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutSentNotificationsInput = {
    update: XOR<UserUpdateWithoutSentNotificationsInput, UserUncheckedUpdateWithoutSentNotificationsInput>
    create: XOR<UserCreateWithoutSentNotificationsInput, UserUncheckedCreateWithoutSentNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSentNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSentNotificationsInput, UserUncheckedUpdateWithoutSentNotificationsInput>
  }

  export type UserUpdateWithoutSentNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    follows?: FollowUpdateManyWithoutFollowerNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    userActions?: UserActionUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUpdateManyWithoutUserNestedInput
    activities?: ActivityUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSentNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUncheckedUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    follows?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUncheckedUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUncheckedUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUncheckedUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUncheckedUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUncheckedUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUncheckedUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUncheckedUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUncheckedUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUncheckedUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TopicUpsertWithoutNotificationsInput = {
    update: XOR<TopicUpdateWithoutNotificationsInput, TopicUncheckedUpdateWithoutNotificationsInput>
    create: XOR<TopicCreateWithoutNotificationsInput, TopicUncheckedCreateWithoutNotificationsInput>
    where?: TopicWhereInput
  }

  export type TopicUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: TopicWhereInput
    data: XOR<TopicUpdateWithoutNotificationsInput, TopicUncheckedUpdateWithoutNotificationsInput>
  }

  export type TopicUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    topicType?: StringFieldUpdateOperationsInput | string
    demandType?: NullableStringFieldUpdateOperationsInput | string | null
    skillsNeeded?: NullableStringFieldUpdateOperationsInput | string | null
    skillsProvided?: NullableStringFieldUpdateOperationsInput | string | null
    threshold?: IntFieldUpdateOperationsInput | number
    wantToHearCount?: IntFieldUpdateOperationsInput | number
    canTellCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    teamSize?: NullableIntFieldUpdateOperationsInput | number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    interestedCount?: IntFieldUpdateOperationsInput | number
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableStringFieldUpdateOperationsInput | string | null
    videos?: NullableStringFieldUpdateOperationsInput | string | null
    links?: NullableStringFieldUpdateOperationsInput | string | null
    quickActions?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: StringFieldUpdateOperationsInput | string
    viewsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    bookmarksCount?: IntFieldUpdateOperationsInput | number
    hotScore?: FloatFieldUpdateOperationsInput | number
    trendingScore?: FloatFieldUpdateOperationsInput | number
    isHot?: BoolFieldUpdateOperationsInput | boolean
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutTopicsNestedInput
    comments?: CommentUpdateManyWithoutTopicNestedInput
    likes?: LikeUpdateManyWithoutTopicNestedInput
    bookmarks?: BookmarkUpdateManyWithoutTopicNestedInput
    userActions?: UserActionUpdateManyWithoutTopicNestedInput
    quickActionsList?: TopicQuickActionUpdateManyWithoutTopicNestedInput
    actions?: TopicActionUpdateManyWithoutTopicNestedInput
  }

  export type TopicUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    topicType?: StringFieldUpdateOperationsInput | string
    demandType?: NullableStringFieldUpdateOperationsInput | string | null
    skillsNeeded?: NullableStringFieldUpdateOperationsInput | string | null
    skillsProvided?: NullableStringFieldUpdateOperationsInput | string | null
    threshold?: IntFieldUpdateOperationsInput | number
    wantToHearCount?: IntFieldUpdateOperationsInput | number
    canTellCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    teamSize?: NullableIntFieldUpdateOperationsInput | number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    interestedCount?: IntFieldUpdateOperationsInput | number
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableStringFieldUpdateOperationsInput | string | null
    videos?: NullableStringFieldUpdateOperationsInput | string | null
    links?: NullableStringFieldUpdateOperationsInput | string | null
    quickActions?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: StringFieldUpdateOperationsInput | string
    viewsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    bookmarksCount?: IntFieldUpdateOperationsInput | number
    hotScore?: FloatFieldUpdateOperationsInput | number
    trendingScore?: FloatFieldUpdateOperationsInput | number
    isHot?: BoolFieldUpdateOperationsInput | boolean
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    comments?: CommentUncheckedUpdateManyWithoutTopicNestedInput
    likes?: LikeUncheckedUpdateManyWithoutTopicNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutTopicNestedInput
    userActions?: UserActionUncheckedUpdateManyWithoutTopicNestedInput
    quickActionsList?: TopicQuickActionUncheckedUpdateManyWithoutTopicNestedInput
    actions?: TopicActionUncheckedUpdateManyWithoutTopicNestedInput
  }

  export type CommentUpsertWithoutNotificationsInput = {
    update: XOR<CommentUpdateWithoutNotificationsInput, CommentUncheckedUpdateWithoutNotificationsInput>
    create: XOR<CommentCreateWithoutNotificationsInput, CommentUncheckedCreateWithoutNotificationsInput>
    where?: CommentWhereInput
  }

  export type CommentUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: CommentWhereInput
    data: XOR<CommentUpdateWithoutNotificationsInput, CommentUncheckedUpdateWithoutNotificationsInput>
  }

  export type CommentUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    rootId?: NullableStringFieldUpdateOperationsInput | string | null
    repliesCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: TopicUpdateOneWithoutCommentsNestedInput
    project?: ProjectUpdateOneWithoutCommentsNestedInput
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
    parent?: CommentUpdateOneWithoutRepliesNestedInput
    replies?: CommentUpdateManyWithoutParentNestedInput
    likes?: LikeUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    rootId?: NullableStringFieldUpdateOperationsInput | string | null
    repliesCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topicId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    replies?: CommentUncheckedUpdateManyWithoutParentNestedInput
    likes?: LikeUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type UserCreateWithoutUserActionsInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicCreateNestedManyWithoutAuthorInput
    projects?: ProjectCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    likes?: LikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    follows?: FollowCreateNestedManyWithoutFollowerInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionCreateNestedManyWithoutUserInput
    topicActions?: TopicActionCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionCreateNestedManyWithoutUserInput
    activities?: ActivityCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserActionsInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicUncheckedCreateNestedManyWithoutAuthorInput
    projects?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    follows?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionUncheckedCreateNestedManyWithoutUserInput
    topicActions?: TopicActionUncheckedCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityUncheckedCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantUncheckedCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeUncheckedCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentUncheckedCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingUncheckedCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyUncheckedCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogUncheckedCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordUncheckedCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserActionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserActionsInput, UserUncheckedCreateWithoutUserActionsInput>
  }

  export type TopicCreateWithoutUserActionsInput = {
    id?: string
    title: string
    content: string
    contentType?: string
    summary?: string | null
    category: string
    tags?: string | null
    topicType?: string
    demandType?: string | null
    skillsNeeded?: string | null
    skillsProvided?: string | null
    threshold?: number
    wantToHearCount?: number
    canTellCount?: number
    status?: string
    teamSize?: number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: string | null
    website?: string | null
    github?: string | null
    interestedCount?: number
    duration?: string | null
    targetAudience?: string | null
    scheduledTime?: Date | string | null
    deadline?: Date | string | null
    budget?: string | null
    contactInfo?: string | null
    images?: string | null
    documents?: string | null
    videos?: string | null
    links?: string | null
    quickActions?: string | null
    visibility?: string
    viewsCount?: number
    likesCount?: number
    commentsCount?: number
    bookmarksCount?: number
    hotScore?: number
    trendingScore?: number
    isHot?: boolean
    publishedAt?: Date | string | null
    lastActiveAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutTopicsInput
    comments?: CommentCreateNestedManyWithoutTopicInput
    likes?: LikeCreateNestedManyWithoutTopicInput
    bookmarks?: BookmarkCreateNestedManyWithoutTopicInput
    notifications?: NotificationCreateNestedManyWithoutTopicInput
    quickActionsList?: TopicQuickActionCreateNestedManyWithoutTopicInput
    actions?: TopicActionCreateNestedManyWithoutTopicInput
  }

  export type TopicUncheckedCreateWithoutUserActionsInput = {
    id?: string
    title: string
    content: string
    contentType?: string
    summary?: string | null
    category: string
    tags?: string | null
    topicType?: string
    demandType?: string | null
    skillsNeeded?: string | null
    skillsProvided?: string | null
    threshold?: number
    wantToHearCount?: number
    canTellCount?: number
    status?: string
    teamSize?: number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: string | null
    website?: string | null
    github?: string | null
    interestedCount?: number
    duration?: string | null
    targetAudience?: string | null
    scheduledTime?: Date | string | null
    deadline?: Date | string | null
    budget?: string | null
    contactInfo?: string | null
    images?: string | null
    documents?: string | null
    videos?: string | null
    links?: string | null
    quickActions?: string | null
    visibility?: string
    viewsCount?: number
    likesCount?: number
    commentsCount?: number
    bookmarksCount?: number
    hotScore?: number
    trendingScore?: number
    isHot?: boolean
    publishedAt?: Date | string | null
    lastActiveAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    comments?: CommentUncheckedCreateNestedManyWithoutTopicInput
    likes?: LikeUncheckedCreateNestedManyWithoutTopicInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutTopicInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTopicInput
    quickActionsList?: TopicQuickActionUncheckedCreateNestedManyWithoutTopicInput
    actions?: TopicActionUncheckedCreateNestedManyWithoutTopicInput
  }

  export type TopicCreateOrConnectWithoutUserActionsInput = {
    where: TopicWhereUniqueInput
    create: XOR<TopicCreateWithoutUserActionsInput, TopicUncheckedCreateWithoutUserActionsInput>
  }

  export type UserUpsertWithoutUserActionsInput = {
    update: XOR<UserUpdateWithoutUserActionsInput, UserUncheckedUpdateWithoutUserActionsInput>
    create: XOR<UserCreateWithoutUserActionsInput, UserUncheckedCreateWithoutUserActionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserActionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserActionsInput, UserUncheckedUpdateWithoutUserActionsInput>
  }

  export type UserUpdateWithoutUserActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    follows?: FollowUpdateManyWithoutFollowerNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUpdateManyWithoutUserNestedInput
    activities?: ActivityUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUncheckedUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    follows?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUncheckedUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUncheckedUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUncheckedUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUncheckedUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUncheckedUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUncheckedUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUncheckedUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUncheckedUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUncheckedUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TopicUpsertWithoutUserActionsInput = {
    update: XOR<TopicUpdateWithoutUserActionsInput, TopicUncheckedUpdateWithoutUserActionsInput>
    create: XOR<TopicCreateWithoutUserActionsInput, TopicUncheckedCreateWithoutUserActionsInput>
    where?: TopicWhereInput
  }

  export type TopicUpdateToOneWithWhereWithoutUserActionsInput = {
    where?: TopicWhereInput
    data: XOR<TopicUpdateWithoutUserActionsInput, TopicUncheckedUpdateWithoutUserActionsInput>
  }

  export type TopicUpdateWithoutUserActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    topicType?: StringFieldUpdateOperationsInput | string
    demandType?: NullableStringFieldUpdateOperationsInput | string | null
    skillsNeeded?: NullableStringFieldUpdateOperationsInput | string | null
    skillsProvided?: NullableStringFieldUpdateOperationsInput | string | null
    threshold?: IntFieldUpdateOperationsInput | number
    wantToHearCount?: IntFieldUpdateOperationsInput | number
    canTellCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    teamSize?: NullableIntFieldUpdateOperationsInput | number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    interestedCount?: IntFieldUpdateOperationsInput | number
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableStringFieldUpdateOperationsInput | string | null
    videos?: NullableStringFieldUpdateOperationsInput | string | null
    links?: NullableStringFieldUpdateOperationsInput | string | null
    quickActions?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: StringFieldUpdateOperationsInput | string
    viewsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    bookmarksCount?: IntFieldUpdateOperationsInput | number
    hotScore?: FloatFieldUpdateOperationsInput | number
    trendingScore?: FloatFieldUpdateOperationsInput | number
    isHot?: BoolFieldUpdateOperationsInput | boolean
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutTopicsNestedInput
    comments?: CommentUpdateManyWithoutTopicNestedInput
    likes?: LikeUpdateManyWithoutTopicNestedInput
    bookmarks?: BookmarkUpdateManyWithoutTopicNestedInput
    notifications?: NotificationUpdateManyWithoutTopicNestedInput
    quickActionsList?: TopicQuickActionUpdateManyWithoutTopicNestedInput
    actions?: TopicActionUpdateManyWithoutTopicNestedInput
  }

  export type TopicUncheckedUpdateWithoutUserActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    topicType?: StringFieldUpdateOperationsInput | string
    demandType?: NullableStringFieldUpdateOperationsInput | string | null
    skillsNeeded?: NullableStringFieldUpdateOperationsInput | string | null
    skillsProvided?: NullableStringFieldUpdateOperationsInput | string | null
    threshold?: IntFieldUpdateOperationsInput | number
    wantToHearCount?: IntFieldUpdateOperationsInput | number
    canTellCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    teamSize?: NullableIntFieldUpdateOperationsInput | number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    interestedCount?: IntFieldUpdateOperationsInput | number
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableStringFieldUpdateOperationsInput | string | null
    videos?: NullableStringFieldUpdateOperationsInput | string | null
    links?: NullableStringFieldUpdateOperationsInput | string | null
    quickActions?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: StringFieldUpdateOperationsInput | string
    viewsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    bookmarksCount?: IntFieldUpdateOperationsInput | number
    hotScore?: FloatFieldUpdateOperationsInput | number
    trendingScore?: FloatFieldUpdateOperationsInput | number
    isHot?: BoolFieldUpdateOperationsInput | boolean
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    comments?: CommentUncheckedUpdateManyWithoutTopicNestedInput
    likes?: LikeUncheckedUpdateManyWithoutTopicNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutTopicNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTopicNestedInput
    quickActionsList?: TopicQuickActionUncheckedUpdateManyWithoutTopicNestedInput
    actions?: TopicActionUncheckedUpdateManyWithoutTopicNestedInput
  }

  export type TopicCreateWithoutQuickActionsListInput = {
    id?: string
    title: string
    content: string
    contentType?: string
    summary?: string | null
    category: string
    tags?: string | null
    topicType?: string
    demandType?: string | null
    skillsNeeded?: string | null
    skillsProvided?: string | null
    threshold?: number
    wantToHearCount?: number
    canTellCount?: number
    status?: string
    teamSize?: number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: string | null
    website?: string | null
    github?: string | null
    interestedCount?: number
    duration?: string | null
    targetAudience?: string | null
    scheduledTime?: Date | string | null
    deadline?: Date | string | null
    budget?: string | null
    contactInfo?: string | null
    images?: string | null
    documents?: string | null
    videos?: string | null
    links?: string | null
    quickActions?: string | null
    visibility?: string
    viewsCount?: number
    likesCount?: number
    commentsCount?: number
    bookmarksCount?: number
    hotScore?: number
    trendingScore?: number
    isHot?: boolean
    publishedAt?: Date | string | null
    lastActiveAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutTopicsInput
    comments?: CommentCreateNestedManyWithoutTopicInput
    likes?: LikeCreateNestedManyWithoutTopicInput
    bookmarks?: BookmarkCreateNestedManyWithoutTopicInput
    notifications?: NotificationCreateNestedManyWithoutTopicInput
    userActions?: UserActionCreateNestedManyWithoutTopicInput
    actions?: TopicActionCreateNestedManyWithoutTopicInput
  }

  export type TopicUncheckedCreateWithoutQuickActionsListInput = {
    id?: string
    title: string
    content: string
    contentType?: string
    summary?: string | null
    category: string
    tags?: string | null
    topicType?: string
    demandType?: string | null
    skillsNeeded?: string | null
    skillsProvided?: string | null
    threshold?: number
    wantToHearCount?: number
    canTellCount?: number
    status?: string
    teamSize?: number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: string | null
    website?: string | null
    github?: string | null
    interestedCount?: number
    duration?: string | null
    targetAudience?: string | null
    scheduledTime?: Date | string | null
    deadline?: Date | string | null
    budget?: string | null
    contactInfo?: string | null
    images?: string | null
    documents?: string | null
    videos?: string | null
    links?: string | null
    quickActions?: string | null
    visibility?: string
    viewsCount?: number
    likesCount?: number
    commentsCount?: number
    bookmarksCount?: number
    hotScore?: number
    trendingScore?: number
    isHot?: boolean
    publishedAt?: Date | string | null
    lastActiveAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    comments?: CommentUncheckedCreateNestedManyWithoutTopicInput
    likes?: LikeUncheckedCreateNestedManyWithoutTopicInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutTopicInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTopicInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutTopicInput
    actions?: TopicActionUncheckedCreateNestedManyWithoutTopicInput
  }

  export type TopicCreateOrConnectWithoutQuickActionsListInput = {
    where: TopicWhereUniqueInput
    create: XOR<TopicCreateWithoutQuickActionsListInput, TopicUncheckedCreateWithoutQuickActionsListInput>
  }

  export type UserCreateWithoutTopicQuickActionsInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicCreateNestedManyWithoutAuthorInput
    projects?: ProjectCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    likes?: LikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    follows?: FollowCreateNestedManyWithoutFollowerInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
    topicActions?: TopicActionCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionCreateNestedManyWithoutUserInput
    activities?: ActivityCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTopicQuickActionsInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicUncheckedCreateNestedManyWithoutAuthorInput
    projects?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    follows?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
    topicActions?: TopicActionUncheckedCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityUncheckedCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantUncheckedCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeUncheckedCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentUncheckedCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingUncheckedCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyUncheckedCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogUncheckedCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordUncheckedCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTopicQuickActionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTopicQuickActionsInput, UserUncheckedCreateWithoutTopicQuickActionsInput>
  }

  export type TopicUpsertWithoutQuickActionsListInput = {
    update: XOR<TopicUpdateWithoutQuickActionsListInput, TopicUncheckedUpdateWithoutQuickActionsListInput>
    create: XOR<TopicCreateWithoutQuickActionsListInput, TopicUncheckedCreateWithoutQuickActionsListInput>
    where?: TopicWhereInput
  }

  export type TopicUpdateToOneWithWhereWithoutQuickActionsListInput = {
    where?: TopicWhereInput
    data: XOR<TopicUpdateWithoutQuickActionsListInput, TopicUncheckedUpdateWithoutQuickActionsListInput>
  }

  export type TopicUpdateWithoutQuickActionsListInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    topicType?: StringFieldUpdateOperationsInput | string
    demandType?: NullableStringFieldUpdateOperationsInput | string | null
    skillsNeeded?: NullableStringFieldUpdateOperationsInput | string | null
    skillsProvided?: NullableStringFieldUpdateOperationsInput | string | null
    threshold?: IntFieldUpdateOperationsInput | number
    wantToHearCount?: IntFieldUpdateOperationsInput | number
    canTellCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    teamSize?: NullableIntFieldUpdateOperationsInput | number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    interestedCount?: IntFieldUpdateOperationsInput | number
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableStringFieldUpdateOperationsInput | string | null
    videos?: NullableStringFieldUpdateOperationsInput | string | null
    links?: NullableStringFieldUpdateOperationsInput | string | null
    quickActions?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: StringFieldUpdateOperationsInput | string
    viewsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    bookmarksCount?: IntFieldUpdateOperationsInput | number
    hotScore?: FloatFieldUpdateOperationsInput | number
    trendingScore?: FloatFieldUpdateOperationsInput | number
    isHot?: BoolFieldUpdateOperationsInput | boolean
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutTopicsNestedInput
    comments?: CommentUpdateManyWithoutTopicNestedInput
    likes?: LikeUpdateManyWithoutTopicNestedInput
    bookmarks?: BookmarkUpdateManyWithoutTopicNestedInput
    notifications?: NotificationUpdateManyWithoutTopicNestedInput
    userActions?: UserActionUpdateManyWithoutTopicNestedInput
    actions?: TopicActionUpdateManyWithoutTopicNestedInput
  }

  export type TopicUncheckedUpdateWithoutQuickActionsListInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    topicType?: StringFieldUpdateOperationsInput | string
    demandType?: NullableStringFieldUpdateOperationsInput | string | null
    skillsNeeded?: NullableStringFieldUpdateOperationsInput | string | null
    skillsProvided?: NullableStringFieldUpdateOperationsInput | string | null
    threshold?: IntFieldUpdateOperationsInput | number
    wantToHearCount?: IntFieldUpdateOperationsInput | number
    canTellCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    teamSize?: NullableIntFieldUpdateOperationsInput | number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    interestedCount?: IntFieldUpdateOperationsInput | number
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableStringFieldUpdateOperationsInput | string | null
    videos?: NullableStringFieldUpdateOperationsInput | string | null
    links?: NullableStringFieldUpdateOperationsInput | string | null
    quickActions?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: StringFieldUpdateOperationsInput | string
    viewsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    bookmarksCount?: IntFieldUpdateOperationsInput | number
    hotScore?: FloatFieldUpdateOperationsInput | number
    trendingScore?: FloatFieldUpdateOperationsInput | number
    isHot?: BoolFieldUpdateOperationsInput | boolean
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    comments?: CommentUncheckedUpdateManyWithoutTopicNestedInput
    likes?: LikeUncheckedUpdateManyWithoutTopicNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutTopicNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTopicNestedInput
    userActions?: UserActionUncheckedUpdateManyWithoutTopicNestedInput
    actions?: TopicActionUncheckedUpdateManyWithoutTopicNestedInput
  }

  export type UserUpsertWithoutTopicQuickActionsInput = {
    update: XOR<UserUpdateWithoutTopicQuickActionsInput, UserUncheckedUpdateWithoutTopicQuickActionsInput>
    create: XOR<UserCreateWithoutTopicQuickActionsInput, UserUncheckedCreateWithoutTopicQuickActionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTopicQuickActionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTopicQuickActionsInput, UserUncheckedUpdateWithoutTopicQuickActionsInput>
  }

  export type UserUpdateWithoutTopicQuickActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    follows?: FollowUpdateManyWithoutFollowerNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    userActions?: UserActionUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUpdateManyWithoutUserNestedInput
    activities?: ActivityUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTopicQuickActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUncheckedUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    follows?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUncheckedUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUncheckedUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUncheckedUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUncheckedUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUncheckedUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUncheckedUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUncheckedUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUncheckedUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutTopicActionsInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicCreateNestedManyWithoutAuthorInput
    projects?: ProjectCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    likes?: LikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    follows?: FollowCreateNestedManyWithoutFollowerInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionCreateNestedManyWithoutUserInput
    activities?: ActivityCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTopicActionsInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicUncheckedCreateNestedManyWithoutAuthorInput
    projects?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    follows?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionUncheckedCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityUncheckedCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantUncheckedCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeUncheckedCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentUncheckedCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingUncheckedCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyUncheckedCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogUncheckedCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordUncheckedCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTopicActionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTopicActionsInput, UserUncheckedCreateWithoutTopicActionsInput>
  }

  export type TopicCreateWithoutActionsInput = {
    id?: string
    title: string
    content: string
    contentType?: string
    summary?: string | null
    category: string
    tags?: string | null
    topicType?: string
    demandType?: string | null
    skillsNeeded?: string | null
    skillsProvided?: string | null
    threshold?: number
    wantToHearCount?: number
    canTellCount?: number
    status?: string
    teamSize?: number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: string | null
    website?: string | null
    github?: string | null
    interestedCount?: number
    duration?: string | null
    targetAudience?: string | null
    scheduledTime?: Date | string | null
    deadline?: Date | string | null
    budget?: string | null
    contactInfo?: string | null
    images?: string | null
    documents?: string | null
    videos?: string | null
    links?: string | null
    quickActions?: string | null
    visibility?: string
    viewsCount?: number
    likesCount?: number
    commentsCount?: number
    bookmarksCount?: number
    hotScore?: number
    trendingScore?: number
    isHot?: boolean
    publishedAt?: Date | string | null
    lastActiveAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutTopicsInput
    comments?: CommentCreateNestedManyWithoutTopicInput
    likes?: LikeCreateNestedManyWithoutTopicInput
    bookmarks?: BookmarkCreateNestedManyWithoutTopicInput
    notifications?: NotificationCreateNestedManyWithoutTopicInput
    userActions?: UserActionCreateNestedManyWithoutTopicInput
    quickActionsList?: TopicQuickActionCreateNestedManyWithoutTopicInput
  }

  export type TopicUncheckedCreateWithoutActionsInput = {
    id?: string
    title: string
    content: string
    contentType?: string
    summary?: string | null
    category: string
    tags?: string | null
    topicType?: string
    demandType?: string | null
    skillsNeeded?: string | null
    skillsProvided?: string | null
    threshold?: number
    wantToHearCount?: number
    canTellCount?: number
    status?: string
    teamSize?: number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: string | null
    website?: string | null
    github?: string | null
    interestedCount?: number
    duration?: string | null
    targetAudience?: string | null
    scheduledTime?: Date | string | null
    deadline?: Date | string | null
    budget?: string | null
    contactInfo?: string | null
    images?: string | null
    documents?: string | null
    videos?: string | null
    links?: string | null
    quickActions?: string | null
    visibility?: string
    viewsCount?: number
    likesCount?: number
    commentsCount?: number
    bookmarksCount?: number
    hotScore?: number
    trendingScore?: number
    isHot?: boolean
    publishedAt?: Date | string | null
    lastActiveAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    comments?: CommentUncheckedCreateNestedManyWithoutTopicInput
    likes?: LikeUncheckedCreateNestedManyWithoutTopicInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutTopicInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTopicInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutTopicInput
    quickActionsList?: TopicQuickActionUncheckedCreateNestedManyWithoutTopicInput
  }

  export type TopicCreateOrConnectWithoutActionsInput = {
    where: TopicWhereUniqueInput
    create: XOR<TopicCreateWithoutActionsInput, TopicUncheckedCreateWithoutActionsInput>
  }

  export type UserUpsertWithoutTopicActionsInput = {
    update: XOR<UserUpdateWithoutTopicActionsInput, UserUncheckedUpdateWithoutTopicActionsInput>
    create: XOR<UserCreateWithoutTopicActionsInput, UserUncheckedCreateWithoutTopicActionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTopicActionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTopicActionsInput, UserUncheckedUpdateWithoutTopicActionsInput>
  }

  export type UserUpdateWithoutTopicActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    follows?: FollowUpdateManyWithoutFollowerNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    userActions?: UserActionUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUpdateManyWithoutUserNestedInput
    activities?: ActivityUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTopicActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUncheckedUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    follows?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUncheckedUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUncheckedUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUncheckedUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUncheckedUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUncheckedUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUncheckedUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUncheckedUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUncheckedUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TopicUpsertWithoutActionsInput = {
    update: XOR<TopicUpdateWithoutActionsInput, TopicUncheckedUpdateWithoutActionsInput>
    create: XOR<TopicCreateWithoutActionsInput, TopicUncheckedCreateWithoutActionsInput>
    where?: TopicWhereInput
  }

  export type TopicUpdateToOneWithWhereWithoutActionsInput = {
    where?: TopicWhereInput
    data: XOR<TopicUpdateWithoutActionsInput, TopicUncheckedUpdateWithoutActionsInput>
  }

  export type TopicUpdateWithoutActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    topicType?: StringFieldUpdateOperationsInput | string
    demandType?: NullableStringFieldUpdateOperationsInput | string | null
    skillsNeeded?: NullableStringFieldUpdateOperationsInput | string | null
    skillsProvided?: NullableStringFieldUpdateOperationsInput | string | null
    threshold?: IntFieldUpdateOperationsInput | number
    wantToHearCount?: IntFieldUpdateOperationsInput | number
    canTellCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    teamSize?: NullableIntFieldUpdateOperationsInput | number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    interestedCount?: IntFieldUpdateOperationsInput | number
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableStringFieldUpdateOperationsInput | string | null
    videos?: NullableStringFieldUpdateOperationsInput | string | null
    links?: NullableStringFieldUpdateOperationsInput | string | null
    quickActions?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: StringFieldUpdateOperationsInput | string
    viewsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    bookmarksCount?: IntFieldUpdateOperationsInput | number
    hotScore?: FloatFieldUpdateOperationsInput | number
    trendingScore?: FloatFieldUpdateOperationsInput | number
    isHot?: BoolFieldUpdateOperationsInput | boolean
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutTopicsNestedInput
    comments?: CommentUpdateManyWithoutTopicNestedInput
    likes?: LikeUpdateManyWithoutTopicNestedInput
    bookmarks?: BookmarkUpdateManyWithoutTopicNestedInput
    notifications?: NotificationUpdateManyWithoutTopicNestedInput
    userActions?: UserActionUpdateManyWithoutTopicNestedInput
    quickActionsList?: TopicQuickActionUpdateManyWithoutTopicNestedInput
  }

  export type TopicUncheckedUpdateWithoutActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    topicType?: StringFieldUpdateOperationsInput | string
    demandType?: NullableStringFieldUpdateOperationsInput | string | null
    skillsNeeded?: NullableStringFieldUpdateOperationsInput | string | null
    skillsProvided?: NullableStringFieldUpdateOperationsInput | string | null
    threshold?: IntFieldUpdateOperationsInput | number
    wantToHearCount?: IntFieldUpdateOperationsInput | number
    canTellCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    teamSize?: NullableIntFieldUpdateOperationsInput | number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    interestedCount?: IntFieldUpdateOperationsInput | number
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableStringFieldUpdateOperationsInput | string | null
    videos?: NullableStringFieldUpdateOperationsInput | string | null
    links?: NullableStringFieldUpdateOperationsInput | string | null
    quickActions?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: StringFieldUpdateOperationsInput | string
    viewsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    bookmarksCount?: IntFieldUpdateOperationsInput | number
    hotScore?: FloatFieldUpdateOperationsInput | number
    trendingScore?: FloatFieldUpdateOperationsInput | number
    isHot?: BoolFieldUpdateOperationsInput | boolean
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    comments?: CommentUncheckedUpdateManyWithoutTopicNestedInput
    likes?: LikeUncheckedUpdateManyWithoutTopicNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutTopicNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTopicNestedInput
    userActions?: UserActionUncheckedUpdateManyWithoutTopicNestedInput
    quickActionsList?: TopicQuickActionUncheckedUpdateManyWithoutTopicNestedInput
  }

  export type UserCreateWithoutProjectActionsInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicCreateNestedManyWithoutAuthorInput
    projects?: ProjectCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    likes?: LikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    follows?: FollowCreateNestedManyWithoutFollowerInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionCreateNestedManyWithoutUserInput
    topicActions?: TopicActionCreateNestedManyWithoutUserInput
    activities?: ActivityCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProjectActionsInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicUncheckedCreateNestedManyWithoutAuthorInput
    projects?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    follows?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionUncheckedCreateNestedManyWithoutUserInput
    topicActions?: TopicActionUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityUncheckedCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantUncheckedCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeUncheckedCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentUncheckedCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingUncheckedCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyUncheckedCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogUncheckedCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordUncheckedCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProjectActionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProjectActionsInput, UserUncheckedCreateWithoutProjectActionsInput>
  }

  export type ProjectCreateWithoutActionsInput = {
    id?: string
    category: string
    title: string
    description: string
    tags?: string | null
    teamSize?: number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: string | null
    website?: string | null
    github?: string | null
    viewCount?: number
    likeCount?: number
    commentCount?: number
    interestedCount?: number
    images?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutProjectsInput
    comments?: CommentCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutActionsInput = {
    id?: string
    category: string
    title: string
    description: string
    tags?: string | null
    teamSize?: number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: string | null
    website?: string | null
    github?: string | null
    viewCount?: number
    likeCount?: number
    commentCount?: number
    interestedCount?: number
    images?: string | null
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutActionsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutActionsInput, ProjectUncheckedCreateWithoutActionsInput>
  }

  export type UserUpsertWithoutProjectActionsInput = {
    update: XOR<UserUpdateWithoutProjectActionsInput, UserUncheckedUpdateWithoutProjectActionsInput>
    create: XOR<UserCreateWithoutProjectActionsInput, UserUncheckedCreateWithoutProjectActionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProjectActionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProjectActionsInput, UserUncheckedUpdateWithoutProjectActionsInput>
  }

  export type UserUpdateWithoutProjectActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    follows?: FollowUpdateManyWithoutFollowerNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    userActions?: UserActionUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUpdateManyWithoutUserNestedInput
    activities?: ActivityUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProjectActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUncheckedUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    follows?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUncheckedUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUncheckedUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUncheckedUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUncheckedUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUncheckedUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUncheckedUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUncheckedUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUncheckedUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProjectUpsertWithoutActionsInput = {
    update: XOR<ProjectUpdateWithoutActionsInput, ProjectUncheckedUpdateWithoutActionsInput>
    create: XOR<ProjectCreateWithoutActionsInput, ProjectUncheckedCreateWithoutActionsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutActionsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutActionsInput, ProjectUncheckedUpdateWithoutActionsInput>
  }

  export type ProjectUpdateWithoutActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    teamSize?: NullableIntFieldUpdateOperationsInput | number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    interestedCount?: IntFieldUpdateOperationsInput | number
    images?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutProjectsNestedInput
    comments?: CommentUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    teamSize?: NullableIntFieldUpdateOperationsInput | number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    interestedCount?: IntFieldUpdateOperationsInput | number
    images?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type UserCreateWithoutProjectsInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    likes?: LikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    follows?: FollowCreateNestedManyWithoutFollowerInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionCreateNestedManyWithoutUserInput
    topicActions?: TopicActionCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionCreateNestedManyWithoutUserInput
    activities?: ActivityCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProjectsInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    follows?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionUncheckedCreateNestedManyWithoutUserInput
    topicActions?: TopicActionUncheckedCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityUncheckedCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantUncheckedCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeUncheckedCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentUncheckedCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingUncheckedCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyUncheckedCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogUncheckedCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordUncheckedCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProjectsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
  }

  export type CommentCreateWithoutProjectInput = {
    id?: string
    content: string
    images?: string | null
    rootId?: string | null
    repliesCount?: number
    likesCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    topic?: TopicCreateNestedOneWithoutCommentsInput
    author: UserCreateNestedOneWithoutCommentsInput
    parent?: CommentCreateNestedOneWithoutRepliesInput
    replies?: CommentCreateNestedManyWithoutParentInput
    likes?: LikeCreateNestedManyWithoutCommentInput
    notifications?: NotificationCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutProjectInput = {
    id?: string
    content: string
    images?: string | null
    parentId?: string | null
    rootId?: string | null
    repliesCount?: number
    likesCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    topicId?: string | null
    authorId: string
    replies?: CommentUncheckedCreateNestedManyWithoutParentInput
    likes?: LikeUncheckedCreateNestedManyWithoutCommentInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutProjectInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutProjectInput, CommentUncheckedCreateWithoutProjectInput>
  }

  export type CommentCreateManyProjectInputEnvelope = {
    data: CommentCreateManyProjectInput | CommentCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type ProjectActionCreateWithoutProjectInput = {
    id?: string
    type: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutProjectActionsInput
  }

  export type ProjectActionUncheckedCreateWithoutProjectInput = {
    id?: string
    type: string
    userId: string
    createdAt?: Date | string
  }

  export type ProjectActionCreateOrConnectWithoutProjectInput = {
    where: ProjectActionWhereUniqueInput
    create: XOR<ProjectActionCreateWithoutProjectInput, ProjectActionUncheckedCreateWithoutProjectInput>
  }

  export type ProjectActionCreateManyProjectInputEnvelope = {
    data: ProjectActionCreateManyProjectInput | ProjectActionCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutProjectsInput = {
    update: XOR<UserUpdateWithoutProjectsInput, UserUncheckedUpdateWithoutProjectsInput>
    create: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProjectsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProjectsInput, UserUncheckedUpdateWithoutProjectsInput>
  }

  export type UserUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    follows?: FollowUpdateManyWithoutFollowerNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    userActions?: UserActionUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUpdateManyWithoutUserNestedInput
    activities?: ActivityUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    follows?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUncheckedUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUncheckedUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUncheckedUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUncheckedUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUncheckedUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUncheckedUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUncheckedUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUncheckedUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUncheckedUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CommentUpsertWithWhereUniqueWithoutProjectInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutProjectInput, CommentUncheckedUpdateWithoutProjectInput>
    create: XOR<CommentCreateWithoutProjectInput, CommentUncheckedCreateWithoutProjectInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutProjectInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutProjectInput, CommentUncheckedUpdateWithoutProjectInput>
  }

  export type CommentUpdateManyWithWhereWithoutProjectInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutProjectInput>
  }

  export type ProjectActionUpsertWithWhereUniqueWithoutProjectInput = {
    where: ProjectActionWhereUniqueInput
    update: XOR<ProjectActionUpdateWithoutProjectInput, ProjectActionUncheckedUpdateWithoutProjectInput>
    create: XOR<ProjectActionCreateWithoutProjectInput, ProjectActionUncheckedCreateWithoutProjectInput>
  }

  export type ProjectActionUpdateWithWhereUniqueWithoutProjectInput = {
    where: ProjectActionWhereUniqueInput
    data: XOR<ProjectActionUpdateWithoutProjectInput, ProjectActionUncheckedUpdateWithoutProjectInput>
  }

  export type ProjectActionUpdateManyWithWhereWithoutProjectInput = {
    where: ProjectActionScalarWhereInput
    data: XOR<ProjectActionUpdateManyMutationInput, ProjectActionUncheckedUpdateManyWithoutProjectInput>
  }

  export type UserCreateWithoutActivitiesInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicCreateNestedManyWithoutAuthorInput
    projects?: ProjectCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    likes?: LikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    follows?: FollowCreateNestedManyWithoutFollowerInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionCreateNestedManyWithoutUserInput
    topicActions?: TopicActionCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionCreateNestedManyWithoutUserInput
    activityParticipants?: ActivityParticipantCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutActivitiesInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicUncheckedCreateNestedManyWithoutAuthorInput
    projects?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    follows?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionUncheckedCreateNestedManyWithoutUserInput
    topicActions?: TopicActionUncheckedCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionUncheckedCreateNestedManyWithoutUserInput
    activityParticipants?: ActivityParticipantUncheckedCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeUncheckedCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentUncheckedCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingUncheckedCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyUncheckedCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogUncheckedCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordUncheckedCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutActivitiesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
  }

  export type ActivityParticipantCreateWithoutActivityInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutActivityParticipantsInput
  }

  export type ActivityParticipantUncheckedCreateWithoutActivityInput = {
    id?: string
    createdAt?: Date | string
    userId: string
  }

  export type ActivityParticipantCreateOrConnectWithoutActivityInput = {
    where: ActivityParticipantWhereUniqueInput
    create: XOR<ActivityParticipantCreateWithoutActivityInput, ActivityParticipantUncheckedCreateWithoutActivityInput>
  }

  export type ActivityParticipantCreateManyActivityInputEnvelope = {
    data: ActivityParticipantCreateManyActivityInput | ActivityParticipantCreateManyActivityInput[]
    skipDuplicates?: boolean
  }

  export type ActivityLikeCreateWithoutActivityInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutActivityLikesInput
  }

  export type ActivityLikeUncheckedCreateWithoutActivityInput = {
    id?: string
    createdAt?: Date | string
    userId: string
  }

  export type ActivityLikeCreateOrConnectWithoutActivityInput = {
    where: ActivityLikeWhereUniqueInput
    create: XOR<ActivityLikeCreateWithoutActivityInput, ActivityLikeUncheckedCreateWithoutActivityInput>
  }

  export type ActivityLikeCreateManyActivityInputEnvelope = {
    data: ActivityLikeCreateManyActivityInput | ActivityLikeCreateManyActivityInput[]
    skipDuplicates?: boolean
  }

  export type ActivityCommentCreateWithoutActivityInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutActivityCommentsInput
  }

  export type ActivityCommentUncheckedCreateWithoutActivityInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
  }

  export type ActivityCommentCreateOrConnectWithoutActivityInput = {
    where: ActivityCommentWhereUniqueInput
    create: XOR<ActivityCommentCreateWithoutActivityInput, ActivityCommentUncheckedCreateWithoutActivityInput>
  }

  export type ActivityCommentCreateManyActivityInputEnvelope = {
    data: ActivityCommentCreateManyActivityInput | ActivityCommentCreateManyActivityInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutActivitiesInput = {
    update: XOR<UserUpdateWithoutActivitiesInput, UserUncheckedUpdateWithoutActivitiesInput>
    create: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutActivitiesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutActivitiesInput, UserUncheckedUpdateWithoutActivitiesInput>
  }

  export type UserUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    follows?: FollowUpdateManyWithoutFollowerNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    userActions?: UserActionUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUpdateManyWithoutUserNestedInput
    activityParticipants?: ActivityParticipantUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUncheckedUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    follows?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUncheckedUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUncheckedUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUncheckedUpdateManyWithoutUserNestedInput
    activityParticipants?: ActivityParticipantUncheckedUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUncheckedUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUncheckedUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUncheckedUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUncheckedUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUncheckedUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUncheckedUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ActivityParticipantUpsertWithWhereUniqueWithoutActivityInput = {
    where: ActivityParticipantWhereUniqueInput
    update: XOR<ActivityParticipantUpdateWithoutActivityInput, ActivityParticipantUncheckedUpdateWithoutActivityInput>
    create: XOR<ActivityParticipantCreateWithoutActivityInput, ActivityParticipantUncheckedCreateWithoutActivityInput>
  }

  export type ActivityParticipantUpdateWithWhereUniqueWithoutActivityInput = {
    where: ActivityParticipantWhereUniqueInput
    data: XOR<ActivityParticipantUpdateWithoutActivityInput, ActivityParticipantUncheckedUpdateWithoutActivityInput>
  }

  export type ActivityParticipantUpdateManyWithWhereWithoutActivityInput = {
    where: ActivityParticipantScalarWhereInput
    data: XOR<ActivityParticipantUpdateManyMutationInput, ActivityParticipantUncheckedUpdateManyWithoutActivityInput>
  }

  export type ActivityLikeUpsertWithWhereUniqueWithoutActivityInput = {
    where: ActivityLikeWhereUniqueInput
    update: XOR<ActivityLikeUpdateWithoutActivityInput, ActivityLikeUncheckedUpdateWithoutActivityInput>
    create: XOR<ActivityLikeCreateWithoutActivityInput, ActivityLikeUncheckedCreateWithoutActivityInput>
  }

  export type ActivityLikeUpdateWithWhereUniqueWithoutActivityInput = {
    where: ActivityLikeWhereUniqueInput
    data: XOR<ActivityLikeUpdateWithoutActivityInput, ActivityLikeUncheckedUpdateWithoutActivityInput>
  }

  export type ActivityLikeUpdateManyWithWhereWithoutActivityInput = {
    where: ActivityLikeScalarWhereInput
    data: XOR<ActivityLikeUpdateManyMutationInput, ActivityLikeUncheckedUpdateManyWithoutActivityInput>
  }

  export type ActivityCommentUpsertWithWhereUniqueWithoutActivityInput = {
    where: ActivityCommentWhereUniqueInput
    update: XOR<ActivityCommentUpdateWithoutActivityInput, ActivityCommentUncheckedUpdateWithoutActivityInput>
    create: XOR<ActivityCommentCreateWithoutActivityInput, ActivityCommentUncheckedCreateWithoutActivityInput>
  }

  export type ActivityCommentUpdateWithWhereUniqueWithoutActivityInput = {
    where: ActivityCommentWhereUniqueInput
    data: XOR<ActivityCommentUpdateWithoutActivityInput, ActivityCommentUncheckedUpdateWithoutActivityInput>
  }

  export type ActivityCommentUpdateManyWithWhereWithoutActivityInput = {
    where: ActivityCommentScalarWhereInput
    data: XOR<ActivityCommentUpdateManyMutationInput, ActivityCommentUncheckedUpdateManyWithoutActivityInput>
  }

  export type UserCreateWithoutActivityParticipantsInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicCreateNestedManyWithoutAuthorInput
    projects?: ProjectCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    likes?: LikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    follows?: FollowCreateNestedManyWithoutFollowerInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionCreateNestedManyWithoutUserInput
    topicActions?: TopicActionCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionCreateNestedManyWithoutUserInput
    activities?: ActivityCreateNestedManyWithoutAuthorInput
    activityLikes?: ActivityLikeCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutActivityParticipantsInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicUncheckedCreateNestedManyWithoutAuthorInput
    projects?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    follows?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionUncheckedCreateNestedManyWithoutUserInput
    topicActions?: TopicActionUncheckedCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityUncheckedCreateNestedManyWithoutAuthorInput
    activityLikes?: ActivityLikeUncheckedCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentUncheckedCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingUncheckedCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyUncheckedCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogUncheckedCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordUncheckedCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutActivityParticipantsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutActivityParticipantsInput, UserUncheckedCreateWithoutActivityParticipantsInput>
  }

  export type ActivityCreateWithoutParticipantsInput = {
    id?: string
    title: string
    description: string
    location: string
    startTime: Date | string
    endTime?: Date | string | null
    maxParticipants?: number | null
    category: string
    tags?: string | null
    cover?: string | null
    images?: string | null
    participantsCount?: number
    likesCount?: number
    commentsCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutActivitiesInput
    likes?: ActivityLikeCreateNestedManyWithoutActivityInput
    comments?: ActivityCommentCreateNestedManyWithoutActivityInput
  }

  export type ActivityUncheckedCreateWithoutParticipantsInput = {
    id?: string
    title: string
    description: string
    location: string
    startTime: Date | string
    endTime?: Date | string | null
    maxParticipants?: number | null
    category: string
    tags?: string | null
    cover?: string | null
    images?: string | null
    participantsCount?: number
    likesCount?: number
    commentsCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    likes?: ActivityLikeUncheckedCreateNestedManyWithoutActivityInput
    comments?: ActivityCommentUncheckedCreateNestedManyWithoutActivityInput
  }

  export type ActivityCreateOrConnectWithoutParticipantsInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutParticipantsInput, ActivityUncheckedCreateWithoutParticipantsInput>
  }

  export type UserUpsertWithoutActivityParticipantsInput = {
    update: XOR<UserUpdateWithoutActivityParticipantsInput, UserUncheckedUpdateWithoutActivityParticipantsInput>
    create: XOR<UserCreateWithoutActivityParticipantsInput, UserUncheckedCreateWithoutActivityParticipantsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutActivityParticipantsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutActivityParticipantsInput, UserUncheckedUpdateWithoutActivityParticipantsInput>
  }

  export type UserUpdateWithoutActivityParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    follows?: FollowUpdateManyWithoutFollowerNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    userActions?: UserActionUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUpdateManyWithoutUserNestedInput
    activities?: ActivityUpdateManyWithoutAuthorNestedInput
    activityLikes?: ActivityLikeUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutActivityParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUncheckedUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    follows?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUncheckedUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUncheckedUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutAuthorNestedInput
    activityLikes?: ActivityLikeUncheckedUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUncheckedUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUncheckedUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUncheckedUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUncheckedUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUncheckedUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ActivityUpsertWithoutParticipantsInput = {
    update: XOR<ActivityUpdateWithoutParticipantsInput, ActivityUncheckedUpdateWithoutParticipantsInput>
    create: XOR<ActivityCreateWithoutParticipantsInput, ActivityUncheckedCreateWithoutParticipantsInput>
    where?: ActivityWhereInput
  }

  export type ActivityUpdateToOneWithWhereWithoutParticipantsInput = {
    where?: ActivityWhereInput
    data: XOR<ActivityUpdateWithoutParticipantsInput, ActivityUncheckedUpdateWithoutParticipantsInput>
  }

  export type ActivityUpdateWithoutParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    participantsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutActivitiesNestedInput
    likes?: ActivityLikeUpdateManyWithoutActivityNestedInput
    comments?: ActivityCommentUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateWithoutParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    participantsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    likes?: ActivityLikeUncheckedUpdateManyWithoutActivityNestedInput
    comments?: ActivityCommentUncheckedUpdateManyWithoutActivityNestedInput
  }

  export type UserCreateWithoutActivityLikesInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicCreateNestedManyWithoutAuthorInput
    projects?: ProjectCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    likes?: LikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    follows?: FollowCreateNestedManyWithoutFollowerInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionCreateNestedManyWithoutUserInput
    topicActions?: TopicActionCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionCreateNestedManyWithoutUserInput
    activities?: ActivityCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutActivityLikesInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicUncheckedCreateNestedManyWithoutAuthorInput
    projects?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    follows?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionUncheckedCreateNestedManyWithoutUserInput
    topicActions?: TopicActionUncheckedCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityUncheckedCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantUncheckedCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentUncheckedCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingUncheckedCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyUncheckedCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogUncheckedCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordUncheckedCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutActivityLikesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutActivityLikesInput, UserUncheckedCreateWithoutActivityLikesInput>
  }

  export type ActivityCreateWithoutLikesInput = {
    id?: string
    title: string
    description: string
    location: string
    startTime: Date | string
    endTime?: Date | string | null
    maxParticipants?: number | null
    category: string
    tags?: string | null
    cover?: string | null
    images?: string | null
    participantsCount?: number
    likesCount?: number
    commentsCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutActivitiesInput
    participants?: ActivityParticipantCreateNestedManyWithoutActivityInput
    comments?: ActivityCommentCreateNestedManyWithoutActivityInput
  }

  export type ActivityUncheckedCreateWithoutLikesInput = {
    id?: string
    title: string
    description: string
    location: string
    startTime: Date | string
    endTime?: Date | string | null
    maxParticipants?: number | null
    category: string
    tags?: string | null
    cover?: string | null
    images?: string | null
    participantsCount?: number
    likesCount?: number
    commentsCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    participants?: ActivityParticipantUncheckedCreateNestedManyWithoutActivityInput
    comments?: ActivityCommentUncheckedCreateNestedManyWithoutActivityInput
  }

  export type ActivityCreateOrConnectWithoutLikesInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutLikesInput, ActivityUncheckedCreateWithoutLikesInput>
  }

  export type UserUpsertWithoutActivityLikesInput = {
    update: XOR<UserUpdateWithoutActivityLikesInput, UserUncheckedUpdateWithoutActivityLikesInput>
    create: XOR<UserCreateWithoutActivityLikesInput, UserUncheckedCreateWithoutActivityLikesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutActivityLikesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutActivityLikesInput, UserUncheckedUpdateWithoutActivityLikesInput>
  }

  export type UserUpdateWithoutActivityLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    follows?: FollowUpdateManyWithoutFollowerNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    userActions?: UserActionUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUpdateManyWithoutUserNestedInput
    activities?: ActivityUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutActivityLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUncheckedUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    follows?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUncheckedUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUncheckedUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUncheckedUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUncheckedUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUncheckedUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUncheckedUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUncheckedUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUncheckedUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ActivityUpsertWithoutLikesInput = {
    update: XOR<ActivityUpdateWithoutLikesInput, ActivityUncheckedUpdateWithoutLikesInput>
    create: XOR<ActivityCreateWithoutLikesInput, ActivityUncheckedCreateWithoutLikesInput>
    where?: ActivityWhereInput
  }

  export type ActivityUpdateToOneWithWhereWithoutLikesInput = {
    where?: ActivityWhereInput
    data: XOR<ActivityUpdateWithoutLikesInput, ActivityUncheckedUpdateWithoutLikesInput>
  }

  export type ActivityUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    participantsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutActivitiesNestedInput
    participants?: ActivityParticipantUpdateManyWithoutActivityNestedInput
    comments?: ActivityCommentUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    participantsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    participants?: ActivityParticipantUncheckedUpdateManyWithoutActivityNestedInput
    comments?: ActivityCommentUncheckedUpdateManyWithoutActivityNestedInput
  }

  export type UserCreateWithoutActivityCommentsInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicCreateNestedManyWithoutAuthorInput
    projects?: ProjectCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    likes?: LikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    follows?: FollowCreateNestedManyWithoutFollowerInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionCreateNestedManyWithoutUserInput
    topicActions?: TopicActionCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionCreateNestedManyWithoutUserInput
    activities?: ActivityCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeCreateNestedManyWithoutUserInput
    userBindings?: UserBindingCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutActivityCommentsInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicUncheckedCreateNestedManyWithoutAuthorInput
    projects?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    follows?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionUncheckedCreateNestedManyWithoutUserInput
    topicActions?: TopicActionUncheckedCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityUncheckedCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantUncheckedCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeUncheckedCreateNestedManyWithoutUserInput
    userBindings?: UserBindingUncheckedCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyUncheckedCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogUncheckedCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordUncheckedCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutActivityCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutActivityCommentsInput, UserUncheckedCreateWithoutActivityCommentsInput>
  }

  export type ActivityCreateWithoutCommentsInput = {
    id?: string
    title: string
    description: string
    location: string
    startTime: Date | string
    endTime?: Date | string | null
    maxParticipants?: number | null
    category: string
    tags?: string | null
    cover?: string | null
    images?: string | null
    participantsCount?: number
    likesCount?: number
    commentsCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutActivitiesInput
    participants?: ActivityParticipantCreateNestedManyWithoutActivityInput
    likes?: ActivityLikeCreateNestedManyWithoutActivityInput
  }

  export type ActivityUncheckedCreateWithoutCommentsInput = {
    id?: string
    title: string
    description: string
    location: string
    startTime: Date | string
    endTime?: Date | string | null
    maxParticipants?: number | null
    category: string
    tags?: string | null
    cover?: string | null
    images?: string | null
    participantsCount?: number
    likesCount?: number
    commentsCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    participants?: ActivityParticipantUncheckedCreateNestedManyWithoutActivityInput
    likes?: ActivityLikeUncheckedCreateNestedManyWithoutActivityInput
  }

  export type ActivityCreateOrConnectWithoutCommentsInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutCommentsInput, ActivityUncheckedCreateWithoutCommentsInput>
  }

  export type UserUpsertWithoutActivityCommentsInput = {
    update: XOR<UserUpdateWithoutActivityCommentsInput, UserUncheckedUpdateWithoutActivityCommentsInput>
    create: XOR<UserCreateWithoutActivityCommentsInput, UserUncheckedCreateWithoutActivityCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutActivityCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutActivityCommentsInput, UserUncheckedUpdateWithoutActivityCommentsInput>
  }

  export type UserUpdateWithoutActivityCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    follows?: FollowUpdateManyWithoutFollowerNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    userActions?: UserActionUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUpdateManyWithoutUserNestedInput
    activities?: ActivityUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUpdateManyWithoutUserNestedInput
    userBindings?: UserBindingUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutActivityCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUncheckedUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    follows?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUncheckedUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUncheckedUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUncheckedUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUncheckedUpdateManyWithoutUserNestedInput
    userBindings?: UserBindingUncheckedUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUncheckedUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUncheckedUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUncheckedUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ActivityUpsertWithoutCommentsInput = {
    update: XOR<ActivityUpdateWithoutCommentsInput, ActivityUncheckedUpdateWithoutCommentsInput>
    create: XOR<ActivityCreateWithoutCommentsInput, ActivityUncheckedCreateWithoutCommentsInput>
    where?: ActivityWhereInput
  }

  export type ActivityUpdateToOneWithWhereWithoutCommentsInput = {
    where?: ActivityWhereInput
    data: XOR<ActivityUpdateWithoutCommentsInput, ActivityUncheckedUpdateWithoutCommentsInput>
  }

  export type ActivityUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    participantsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutActivitiesNestedInput
    participants?: ActivityParticipantUpdateManyWithoutActivityNestedInput
    likes?: ActivityLikeUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    participantsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    participants?: ActivityParticipantUncheckedUpdateManyWithoutActivityNestedInput
    likes?: ActivityLikeUncheckedUpdateManyWithoutActivityNestedInput
  }

  export type UserCreateWithoutUserBindingsInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicCreateNestedManyWithoutAuthorInput
    projects?: ProjectCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    likes?: LikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    follows?: FollowCreateNestedManyWithoutFollowerInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionCreateNestedManyWithoutUserInput
    topicActions?: TopicActionCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionCreateNestedManyWithoutUserInput
    activities?: ActivityCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentCreateNestedManyWithoutAuthorInput
    loginLogs?: LoginLogCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserBindingsInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicUncheckedCreateNestedManyWithoutAuthorInput
    projects?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    follows?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionUncheckedCreateNestedManyWithoutUserInput
    topicActions?: TopicActionUncheckedCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityUncheckedCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantUncheckedCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeUncheckedCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentUncheckedCreateNestedManyWithoutAuthorInput
    loginLogs?: LoginLogUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyUncheckedCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogUncheckedCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordUncheckedCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserBindingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserBindingsInput, UserUncheckedCreateWithoutUserBindingsInput>
  }

  export type UserUpsertWithoutUserBindingsInput = {
    update: XOR<UserUpdateWithoutUserBindingsInput, UserUncheckedUpdateWithoutUserBindingsInput>
    create: XOR<UserCreateWithoutUserBindingsInput, UserUncheckedCreateWithoutUserBindingsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserBindingsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserBindingsInput, UserUncheckedUpdateWithoutUserBindingsInput>
  }

  export type UserUpdateWithoutUserBindingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    follows?: FollowUpdateManyWithoutFollowerNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    userActions?: UserActionUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUpdateManyWithoutUserNestedInput
    activities?: ActivityUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUpdateManyWithoutAuthorNestedInput
    loginLogs?: LoginLogUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserBindingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUncheckedUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    follows?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUncheckedUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUncheckedUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUncheckedUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUncheckedUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUncheckedUpdateManyWithoutAuthorNestedInput
    loginLogs?: LoginLogUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUncheckedUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUncheckedUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUncheckedUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutLoginLogsInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicCreateNestedManyWithoutAuthorInput
    projects?: ProjectCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    likes?: LikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    follows?: FollowCreateNestedManyWithoutFollowerInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionCreateNestedManyWithoutUserInput
    topicActions?: TopicActionCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionCreateNestedManyWithoutUserInput
    activities?: ActivityCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLoginLogsInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicUncheckedCreateNestedManyWithoutAuthorInput
    projects?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    follows?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionUncheckedCreateNestedManyWithoutUserInput
    topicActions?: TopicActionUncheckedCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityUncheckedCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantUncheckedCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeUncheckedCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentUncheckedCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyUncheckedCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogUncheckedCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordUncheckedCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLoginLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLoginLogsInput, UserUncheckedCreateWithoutLoginLogsInput>
  }

  export type UserUpsertWithoutLoginLogsInput = {
    update: XOR<UserUpdateWithoutLoginLogsInput, UserUncheckedUpdateWithoutLoginLogsInput>
    create: XOR<UserCreateWithoutLoginLogsInput, UserUncheckedCreateWithoutLoginLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLoginLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLoginLogsInput, UserUncheckedUpdateWithoutLoginLogsInput>
  }

  export type UserUpdateWithoutLoginLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    follows?: FollowUpdateManyWithoutFollowerNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    userActions?: UserActionUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUpdateManyWithoutUserNestedInput
    activities?: ActivityUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLoginLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUncheckedUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    follows?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUncheckedUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUncheckedUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUncheckedUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUncheckedUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUncheckedUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUncheckedUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUncheckedUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUncheckedUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutFeedbacksInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicCreateNestedManyWithoutAuthorInput
    projects?: ProjectCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    likes?: LikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    follows?: FollowCreateNestedManyWithoutFollowerInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionCreateNestedManyWithoutUserInput
    topicActions?: TopicActionCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionCreateNestedManyWithoutUserInput
    activities?: ActivityCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFeedbacksInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicUncheckedCreateNestedManyWithoutAuthorInput
    projects?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    follows?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionUncheckedCreateNestedManyWithoutUserInput
    topicActions?: TopicActionUncheckedCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityUncheckedCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantUncheckedCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeUncheckedCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentUncheckedCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingUncheckedCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogUncheckedCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyUncheckedCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogUncheckedCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordUncheckedCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFeedbacksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFeedbacksInput, UserUncheckedCreateWithoutFeedbacksInput>
  }

  export type FeedbackReplyCreateWithoutFeedbackInput = {
    id?: string
    content: string
    createdAt?: Date | string
    admin: UserCreateNestedOneWithoutFeedbackRepliesInput
  }

  export type FeedbackReplyUncheckedCreateWithoutFeedbackInput = {
    id?: string
    content: string
    createdAt?: Date | string
    adminId: string
  }

  export type FeedbackReplyCreateOrConnectWithoutFeedbackInput = {
    where: FeedbackReplyWhereUniqueInput
    create: XOR<FeedbackReplyCreateWithoutFeedbackInput, FeedbackReplyUncheckedCreateWithoutFeedbackInput>
  }

  export type FeedbackReplyCreateManyFeedbackInputEnvelope = {
    data: FeedbackReplyCreateManyFeedbackInput | FeedbackReplyCreateManyFeedbackInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutFeedbacksInput = {
    update: XOR<UserUpdateWithoutFeedbacksInput, UserUncheckedUpdateWithoutFeedbacksInput>
    create: XOR<UserCreateWithoutFeedbacksInput, UserUncheckedCreateWithoutFeedbacksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFeedbacksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFeedbacksInput, UserUncheckedUpdateWithoutFeedbacksInput>
  }

  export type UserUpdateWithoutFeedbacksInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    follows?: FollowUpdateManyWithoutFollowerNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    userActions?: UserActionUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUpdateManyWithoutUserNestedInput
    activities?: ActivityUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFeedbacksInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUncheckedUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    follows?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUncheckedUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUncheckedUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUncheckedUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUncheckedUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUncheckedUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUncheckedUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUncheckedUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUncheckedUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUncheckedUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUncheckedUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FeedbackReplyUpsertWithWhereUniqueWithoutFeedbackInput = {
    where: FeedbackReplyWhereUniqueInput
    update: XOR<FeedbackReplyUpdateWithoutFeedbackInput, FeedbackReplyUncheckedUpdateWithoutFeedbackInput>
    create: XOR<FeedbackReplyCreateWithoutFeedbackInput, FeedbackReplyUncheckedCreateWithoutFeedbackInput>
  }

  export type FeedbackReplyUpdateWithWhereUniqueWithoutFeedbackInput = {
    where: FeedbackReplyWhereUniqueInput
    data: XOR<FeedbackReplyUpdateWithoutFeedbackInput, FeedbackReplyUncheckedUpdateWithoutFeedbackInput>
  }

  export type FeedbackReplyUpdateManyWithWhereWithoutFeedbackInput = {
    where: FeedbackReplyScalarWhereInput
    data: XOR<FeedbackReplyUpdateManyMutationInput, FeedbackReplyUncheckedUpdateManyWithoutFeedbackInput>
  }

  export type FeedbackCreateWithoutReplyInput = {
    id?: string
    type: string
    title: string
    content: string
    contact?: string | null
    images?: string | null
    platform?: string
    version?: string | null
    deviceInfo?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    status?: string
    processedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutFeedbacksInput
  }

  export type FeedbackUncheckedCreateWithoutReplyInput = {
    id?: string
    type: string
    title: string
    content: string
    contact?: string | null
    images?: string | null
    platform?: string
    version?: string | null
    deviceInfo?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    status?: string
    processedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type FeedbackCreateOrConnectWithoutReplyInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutReplyInput, FeedbackUncheckedCreateWithoutReplyInput>
  }

  export type UserCreateWithoutFeedbackRepliesInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicCreateNestedManyWithoutAuthorInput
    projects?: ProjectCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    likes?: LikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    follows?: FollowCreateNestedManyWithoutFollowerInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionCreateNestedManyWithoutUserInput
    topicActions?: TopicActionCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionCreateNestedManyWithoutUserInput
    activities?: ActivityCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    creditLogs?: CreditLogCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFeedbackRepliesInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicUncheckedCreateNestedManyWithoutAuthorInput
    projects?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    follows?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionUncheckedCreateNestedManyWithoutUserInput
    topicActions?: TopicActionUncheckedCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityUncheckedCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantUncheckedCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeUncheckedCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentUncheckedCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingUncheckedCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    creditLogs?: CreditLogUncheckedCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordUncheckedCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFeedbackRepliesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFeedbackRepliesInput, UserUncheckedCreateWithoutFeedbackRepliesInput>
  }

  export type FeedbackUpsertWithoutReplyInput = {
    update: XOR<FeedbackUpdateWithoutReplyInput, FeedbackUncheckedUpdateWithoutReplyInput>
    create: XOR<FeedbackCreateWithoutReplyInput, FeedbackUncheckedCreateWithoutReplyInput>
    where?: FeedbackWhereInput
  }

  export type FeedbackUpdateToOneWithWhereWithoutReplyInput = {
    where?: FeedbackWhereInput
    data: XOR<FeedbackUpdateWithoutReplyInput, FeedbackUncheckedUpdateWithoutReplyInput>
  }

  export type FeedbackUpdateWithoutReplyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    platform?: StringFieldUpdateOperationsInput | string
    version?: NullableStringFieldUpdateOperationsInput | string | null
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFeedbacksNestedInput
  }

  export type FeedbackUncheckedUpdateWithoutReplyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    platform?: StringFieldUpdateOperationsInput | string
    version?: NullableStringFieldUpdateOperationsInput | string | null
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpsertWithoutFeedbackRepliesInput = {
    update: XOR<UserUpdateWithoutFeedbackRepliesInput, UserUncheckedUpdateWithoutFeedbackRepliesInput>
    create: XOR<UserCreateWithoutFeedbackRepliesInput, UserUncheckedCreateWithoutFeedbackRepliesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFeedbackRepliesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFeedbackRepliesInput, UserUncheckedUpdateWithoutFeedbackRepliesInput>
  }

  export type UserUpdateWithoutFeedbackRepliesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    follows?: FollowUpdateManyWithoutFollowerNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    userActions?: UserActionUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUpdateManyWithoutUserNestedInput
    activities?: ActivityUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    creditLogs?: CreditLogUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFeedbackRepliesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUncheckedUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    follows?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUncheckedUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUncheckedUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUncheckedUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUncheckedUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUncheckedUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUncheckedUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    creditLogs?: CreditLogUncheckedUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUncheckedUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutCreditLogsInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicCreateNestedManyWithoutAuthorInput
    projects?: ProjectCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    likes?: LikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    follows?: FollowCreateNestedManyWithoutFollowerInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionCreateNestedManyWithoutUserInput
    topicActions?: TopicActionCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionCreateNestedManyWithoutUserInput
    activities?: ActivityCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyCreateNestedManyWithoutAdminInput
    badgeRecords?: UserBadgeRecordCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreditLogsInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicUncheckedCreateNestedManyWithoutAuthorInput
    projects?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    follows?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionUncheckedCreateNestedManyWithoutUserInput
    topicActions?: TopicActionUncheckedCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityUncheckedCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantUncheckedCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeUncheckedCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentUncheckedCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingUncheckedCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyUncheckedCreateNestedManyWithoutAdminInput
    badgeRecords?: UserBadgeRecordUncheckedCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreditLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreditLogsInput, UserUncheckedCreateWithoutCreditLogsInput>
  }

  export type UserUpsertWithoutCreditLogsInput = {
    update: XOR<UserUpdateWithoutCreditLogsInput, UserUncheckedUpdateWithoutCreditLogsInput>
    create: XOR<UserCreateWithoutCreditLogsInput, UserUncheckedCreateWithoutCreditLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreditLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreditLogsInput, UserUncheckedUpdateWithoutCreditLogsInput>
  }

  export type UserUpdateWithoutCreditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    follows?: FollowUpdateManyWithoutFollowerNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    userActions?: UserActionUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUpdateManyWithoutUserNestedInput
    activities?: ActivityUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUpdateManyWithoutAdminNestedInput
    badgeRecords?: UserBadgeRecordUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUncheckedUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    follows?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUncheckedUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUncheckedUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUncheckedUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUncheckedUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUncheckedUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUncheckedUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUncheckedUpdateManyWithoutAdminNestedInput
    badgeRecords?: UserBadgeRecordUncheckedUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserBadgeRecordCreateWithoutBadgeInput = {
    id?: string
    progress?: number
    awardedAt?: Date | string
    metadata?: string | null
    user: UserCreateNestedOneWithoutBadgeRecordsInput
  }

  export type UserBadgeRecordUncheckedCreateWithoutBadgeInput = {
    id?: string
    progress?: number
    awardedAt?: Date | string
    metadata?: string | null
    userId: string
  }

  export type UserBadgeRecordCreateOrConnectWithoutBadgeInput = {
    where: UserBadgeRecordWhereUniqueInput
    create: XOR<UserBadgeRecordCreateWithoutBadgeInput, UserBadgeRecordUncheckedCreateWithoutBadgeInput>
  }

  export type UserBadgeRecordCreateManyBadgeInputEnvelope = {
    data: UserBadgeRecordCreateManyBadgeInput | UserBadgeRecordCreateManyBadgeInput[]
    skipDuplicates?: boolean
  }

  export type UserBadgeRecordUpsertWithWhereUniqueWithoutBadgeInput = {
    where: UserBadgeRecordWhereUniqueInput
    update: XOR<UserBadgeRecordUpdateWithoutBadgeInput, UserBadgeRecordUncheckedUpdateWithoutBadgeInput>
    create: XOR<UserBadgeRecordCreateWithoutBadgeInput, UserBadgeRecordUncheckedCreateWithoutBadgeInput>
  }

  export type UserBadgeRecordUpdateWithWhereUniqueWithoutBadgeInput = {
    where: UserBadgeRecordWhereUniqueInput
    data: XOR<UserBadgeRecordUpdateWithoutBadgeInput, UserBadgeRecordUncheckedUpdateWithoutBadgeInput>
  }

  export type UserBadgeRecordUpdateManyWithWhereWithoutBadgeInput = {
    where: UserBadgeRecordScalarWhereInput
    data: XOR<UserBadgeRecordUpdateManyMutationInput, UserBadgeRecordUncheckedUpdateManyWithoutBadgeInput>
  }

  export type UserCreateWithoutBadgeRecordsInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicCreateNestedManyWithoutAuthorInput
    projects?: ProjectCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    likes?: LikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    follows?: FollowCreateNestedManyWithoutFollowerInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionCreateNestedManyWithoutUserInput
    topicActions?: TopicActionCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionCreateNestedManyWithoutUserInput
    activities?: ActivityCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBadgeRecordsInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicUncheckedCreateNestedManyWithoutAuthorInput
    projects?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    follows?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionUncheckedCreateNestedManyWithoutUserInput
    topicActions?: TopicActionUncheckedCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityUncheckedCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantUncheckedCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeUncheckedCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentUncheckedCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingUncheckedCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyUncheckedCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogUncheckedCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBadgeRecordsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBadgeRecordsInput, UserUncheckedCreateWithoutBadgeRecordsInput>
  }

  export type UserBadgeCreateWithoutUserRecordsInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    icon?: string | null
    category: string
    rarity?: string
    condition?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserBadgeUncheckedCreateWithoutUserRecordsInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    icon?: string | null
    category: string
    rarity?: string
    condition?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserBadgeCreateOrConnectWithoutUserRecordsInput = {
    where: UserBadgeWhereUniqueInput
    create: XOR<UserBadgeCreateWithoutUserRecordsInput, UserBadgeUncheckedCreateWithoutUserRecordsInput>
  }

  export type UserUpsertWithoutBadgeRecordsInput = {
    update: XOR<UserUpdateWithoutBadgeRecordsInput, UserUncheckedUpdateWithoutBadgeRecordsInput>
    create: XOR<UserCreateWithoutBadgeRecordsInput, UserUncheckedCreateWithoutBadgeRecordsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBadgeRecordsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBadgeRecordsInput, UserUncheckedUpdateWithoutBadgeRecordsInput>
  }

  export type UserUpdateWithoutBadgeRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    follows?: FollowUpdateManyWithoutFollowerNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    userActions?: UserActionUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUpdateManyWithoutUserNestedInput
    activities?: ActivityUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBadgeRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUncheckedUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    follows?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUncheckedUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUncheckedUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUncheckedUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUncheckedUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUncheckedUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUncheckedUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUncheckedUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUncheckedUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserBadgeUpsertWithoutUserRecordsInput = {
    update: XOR<UserBadgeUpdateWithoutUserRecordsInput, UserBadgeUncheckedUpdateWithoutUserRecordsInput>
    create: XOR<UserBadgeCreateWithoutUserRecordsInput, UserBadgeUncheckedCreateWithoutUserRecordsInput>
    where?: UserBadgeWhereInput
  }

  export type UserBadgeUpdateToOneWithWhereWithoutUserRecordsInput = {
    where?: UserBadgeWhereInput
    data: XOR<UserBadgeUpdateWithoutUserRecordsInput, UserBadgeUncheckedUpdateWithoutUserRecordsInput>
  }

  export type UserBadgeUpdateWithoutUserRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    rarity?: StringFieldUpdateOperationsInput | string
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBadgeUncheckedUpdateWithoutUserRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    rarity?: StringFieldUpdateOperationsInput | string
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutCheckInsInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicCreateNestedManyWithoutAuthorInput
    projects?: ProjectCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    likes?: LikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    follows?: FollowCreateNestedManyWithoutFollowerInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionCreateNestedManyWithoutUserInput
    topicActions?: TopicActionCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionCreateNestedManyWithoutUserInput
    activities?: ActivityCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCheckInsInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicUncheckedCreateNestedManyWithoutAuthorInput
    projects?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    follows?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionUncheckedCreateNestedManyWithoutUserInput
    topicActions?: TopicActionUncheckedCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityUncheckedCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantUncheckedCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeUncheckedCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentUncheckedCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingUncheckedCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyUncheckedCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogUncheckedCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCheckInsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCheckInsInput, UserUncheckedCreateWithoutCheckInsInput>
  }

  export type UserUpsertWithoutCheckInsInput = {
    update: XOR<UserUpdateWithoutCheckInsInput, UserUncheckedUpdateWithoutCheckInsInput>
    create: XOR<UserCreateWithoutCheckInsInput, UserUncheckedCreateWithoutCheckInsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCheckInsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCheckInsInput, UserUncheckedUpdateWithoutCheckInsInput>
  }

  export type UserUpdateWithoutCheckInsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    follows?: FollowUpdateManyWithoutFollowerNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    userActions?: UserActionUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUpdateManyWithoutUserNestedInput
    activities?: ActivityUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCheckInsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUncheckedUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    follows?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUncheckedUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUncheckedUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUncheckedUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUncheckedUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUncheckedUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUncheckedUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUncheckedUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUncheckedUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserRoleCreateWithoutRoleInput = {
    id?: string
    assignedBy?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutRolesInput
  }

  export type UserRoleUncheckedCreateWithoutRoleInput = {
    id?: string
    userId: string
    assignedBy?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
  }

  export type UserRoleCreateOrConnectWithoutRoleInput = {
    where: UserRoleWhereUniqueInput
    create: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput>
  }

  export type UserRoleCreateManyRoleInputEnvelope = {
    data: UserRoleCreateManyRoleInput | UserRoleCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type RolePermissionCreateWithoutRoleInput = {
    id?: string
    createdAt?: Date | string
    permission: PermissionCreateNestedOneWithoutRolesInput
  }

  export type RolePermissionUncheckedCreateWithoutRoleInput = {
    id?: string
    permissionId: string
    createdAt?: Date | string
  }

  export type RolePermissionCreateOrConnectWithoutRoleInput = {
    where: RolePermissionWhereUniqueInput
    create: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput>
  }

  export type RolePermissionCreateManyRoleInputEnvelope = {
    data: RolePermissionCreateManyRoleInput | RolePermissionCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type UserRoleUpsertWithWhereUniqueWithoutRoleInput = {
    where: UserRoleWhereUniqueInput
    update: XOR<UserRoleUpdateWithoutRoleInput, UserRoleUncheckedUpdateWithoutRoleInput>
    create: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput>
  }

  export type UserRoleUpdateWithWhereUniqueWithoutRoleInput = {
    where: UserRoleWhereUniqueInput
    data: XOR<UserRoleUpdateWithoutRoleInput, UserRoleUncheckedUpdateWithoutRoleInput>
  }

  export type UserRoleUpdateManyWithWhereWithoutRoleInput = {
    where: UserRoleScalarWhereInput
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyWithoutRoleInput>
  }

  export type RolePermissionUpsertWithWhereUniqueWithoutRoleInput = {
    where: RolePermissionWhereUniqueInput
    update: XOR<RolePermissionUpdateWithoutRoleInput, RolePermissionUncheckedUpdateWithoutRoleInput>
    create: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput>
  }

  export type RolePermissionUpdateWithWhereUniqueWithoutRoleInput = {
    where: RolePermissionWhereUniqueInput
    data: XOR<RolePermissionUpdateWithoutRoleInput, RolePermissionUncheckedUpdateWithoutRoleInput>
  }

  export type RolePermissionUpdateManyWithWhereWithoutRoleInput = {
    where: RolePermissionScalarWhereInput
    data: XOR<RolePermissionUpdateManyMutationInput, RolePermissionUncheckedUpdateManyWithoutRoleInput>
  }

  export type RolePermissionScalarWhereInput = {
    AND?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
    OR?: RolePermissionScalarWhereInput[]
    NOT?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
    id?: StringFilter<"RolePermission"> | string
    roleId?: StringFilter<"RolePermission"> | string
    permissionId?: StringFilter<"RolePermission"> | string
    createdAt?: DateTimeFilter<"RolePermission"> | Date | string
  }

  export type RolePermissionCreateWithoutPermissionInput = {
    id?: string
    createdAt?: Date | string
    role: RoleCreateNestedOneWithoutPermissionsInput
  }

  export type RolePermissionUncheckedCreateWithoutPermissionInput = {
    id?: string
    roleId: string
    createdAt?: Date | string
  }

  export type RolePermissionCreateOrConnectWithoutPermissionInput = {
    where: RolePermissionWhereUniqueInput
    create: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput>
  }

  export type RolePermissionCreateManyPermissionInputEnvelope = {
    data: RolePermissionCreateManyPermissionInput | RolePermissionCreateManyPermissionInput[]
    skipDuplicates?: boolean
  }

  export type RolePermissionUpsertWithWhereUniqueWithoutPermissionInput = {
    where: RolePermissionWhereUniqueInput
    update: XOR<RolePermissionUpdateWithoutPermissionInput, RolePermissionUncheckedUpdateWithoutPermissionInput>
    create: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput>
  }

  export type RolePermissionUpdateWithWhereUniqueWithoutPermissionInput = {
    where: RolePermissionWhereUniqueInput
    data: XOR<RolePermissionUpdateWithoutPermissionInput, RolePermissionUncheckedUpdateWithoutPermissionInput>
  }

  export type RolePermissionUpdateManyWithWhereWithoutPermissionInput = {
    where: RolePermissionScalarWhereInput
    data: XOR<RolePermissionUpdateManyMutationInput, RolePermissionUncheckedUpdateManyWithoutPermissionInput>
  }

  export type RoleCreateWithoutPermissionsInput = {
    id?: string
    name: string
    displayName: string
    description?: string | null
    level?: number
    type?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userRoles?: UserRoleCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateWithoutPermissionsInput = {
    id?: string
    name: string
    displayName: string
    description?: string | null
    level?: number
    type?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleCreateOrConnectWithoutPermissionsInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutPermissionsInput, RoleUncheckedCreateWithoutPermissionsInput>
  }

  export type PermissionCreateWithoutRolesInput = {
    id?: string
    name: string
    displayName: string
    description?: string | null
    module: string
    action: string
    resource?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PermissionUncheckedCreateWithoutRolesInput = {
    id?: string
    name: string
    displayName: string
    description?: string | null
    module: string
    action: string
    resource?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PermissionCreateOrConnectWithoutRolesInput = {
    where: PermissionWhereUniqueInput
    create: XOR<PermissionCreateWithoutRolesInput, PermissionUncheckedCreateWithoutRolesInput>
  }

  export type RoleUpsertWithoutPermissionsInput = {
    update: XOR<RoleUpdateWithoutPermissionsInput, RoleUncheckedUpdateWithoutPermissionsInput>
    create: XOR<RoleCreateWithoutPermissionsInput, RoleUncheckedCreateWithoutPermissionsInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutPermissionsInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutPermissionsInput, RoleUncheckedUpdateWithoutPermissionsInput>
  }

  export type RoleUpdateWithoutPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    level?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRoles?: UserRoleUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateWithoutPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    level?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRoles?: UserRoleUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type PermissionUpsertWithoutRolesInput = {
    update: XOR<PermissionUpdateWithoutRolesInput, PermissionUncheckedUpdateWithoutRolesInput>
    create: XOR<PermissionCreateWithoutRolesInput, PermissionUncheckedCreateWithoutRolesInput>
    where?: PermissionWhereInput
  }

  export type PermissionUpdateToOneWithWhereWithoutRolesInput = {
    where?: PermissionWhereInput
    data: XOR<PermissionUpdateWithoutRolesInput, PermissionUncheckedUpdateWithoutRolesInput>
  }

  export type PermissionUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    module?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionUncheckedUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    module?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutRolesInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicCreateNestedManyWithoutAuthorInput
    projects?: ProjectCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    likes?: LikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    follows?: FollowCreateNestedManyWithoutFollowerInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionCreateNestedManyWithoutUserInput
    topicActions?: TopicActionCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionCreateNestedManyWithoutUserInput
    activities?: ActivityCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRolesInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicUncheckedCreateNestedManyWithoutAuthorInput
    projects?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    follows?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionUncheckedCreateNestedManyWithoutUserInput
    topicActions?: TopicActionUncheckedCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityUncheckedCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantUncheckedCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeUncheckedCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentUncheckedCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingUncheckedCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyUncheckedCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogUncheckedCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordUncheckedCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInUncheckedCreateNestedManyWithoutUserInput
    operationLogs?: OperationLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRolesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput>
  }

  export type RoleCreateWithoutUserRolesInput = {
    id?: string
    name: string
    displayName: string
    description?: string | null
    level?: number
    type?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    permissions?: RolePermissionCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateWithoutUserRolesInput = {
    id?: string
    name: string
    displayName: string
    description?: string | null
    level?: number
    type?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    permissions?: RolePermissionUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleCreateOrConnectWithoutUserRolesInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutUserRolesInput, RoleUncheckedCreateWithoutUserRolesInput>
  }

  export type UserUpsertWithoutRolesInput = {
    update: XOR<UserUpdateWithoutRolesInput, UserUncheckedUpdateWithoutRolesInput>
    create: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRolesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRolesInput, UserUncheckedUpdateWithoutRolesInput>
  }

  export type UserUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    follows?: FollowUpdateManyWithoutFollowerNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    userActions?: UserActionUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUpdateManyWithoutUserNestedInput
    activities?: ActivityUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUncheckedUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    follows?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUncheckedUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUncheckedUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUncheckedUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUncheckedUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUncheckedUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUncheckedUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUncheckedUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUncheckedUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUncheckedUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUncheckedUpdateManyWithoutUserNestedInput
    operationLogs?: OperationLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RoleUpsertWithoutUserRolesInput = {
    update: XOR<RoleUpdateWithoutUserRolesInput, RoleUncheckedUpdateWithoutUserRolesInput>
    create: XOR<RoleCreateWithoutUserRolesInput, RoleUncheckedCreateWithoutUserRolesInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutUserRolesInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutUserRolesInput, RoleUncheckedUpdateWithoutUserRolesInput>
  }

  export type RoleUpdateWithoutUserRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    level?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permissions?: RolePermissionUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateWithoutUserRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    level?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permissions?: RolePermissionUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type UserCreateWithoutOperationLogsInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicCreateNestedManyWithoutAuthorInput
    projects?: ProjectCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    likes?: LikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    follows?: FollowCreateNestedManyWithoutFollowerInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionCreateNestedManyWithoutUserInput
    topicActions?: TopicActionCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionCreateNestedManyWithoutUserInput
    activities?: ActivityCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOperationLogsInput = {
    id?: string
    email: string
    password: string
    openid?: string | null
    unionid?: string | null
    sessionKey?: string | null
    nickname: string
    avatar?: string | null
    gender?: number
    phone?: string | null
    bio?: string | null
    school?: string | null
    major?: string | null
    grade?: string | null
    verified?: boolean
    skills?: string | null
    interests?: string | null
    credits?: number
    level?: number
    exp?: number
    topicsCount?: number
    commentsCount?: number
    likesCount?: number
    fansCount?: number
    followsCount?: number
    status?: string
    isCertified?: boolean
    isVip?: boolean
    lastLoginAt?: Date | string | null
    lastActiveAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicUncheckedCreateNestedManyWithoutAuthorInput
    projects?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    follows?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutActorInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
    topicQuickActions?: TopicQuickActionUncheckedCreateNestedManyWithoutUserInput
    topicActions?: TopicActionUncheckedCreateNestedManyWithoutUserInput
    projectActions?: ProjectActionUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityUncheckedCreateNestedManyWithoutAuthorInput
    activityParticipants?: ActivityParticipantUncheckedCreateNestedManyWithoutUserInput
    activityLikes?: ActivityLikeUncheckedCreateNestedManyWithoutUserInput
    activityComments?: ActivityCommentUncheckedCreateNestedManyWithoutAuthorInput
    userBindings?: UserBindingUncheckedCreateNestedManyWithoutUserInput
    loginLogs?: LoginLogUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    feedbackReplies?: FeedbackReplyUncheckedCreateNestedManyWithoutAdminInput
    creditLogs?: CreditLogUncheckedCreateNestedManyWithoutUserInput
    badgeRecords?: UserBadgeRecordUncheckedCreateNestedManyWithoutUserInput
    checkIns?: DailyCheckInUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOperationLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOperationLogsInput, UserUncheckedCreateWithoutOperationLogsInput>
  }

  export type UserUpsertWithoutOperationLogsInput = {
    update: XOR<UserUpdateWithoutOperationLogsInput, UserUncheckedUpdateWithoutOperationLogsInput>
    create: XOR<UserCreateWithoutOperationLogsInput, UserUncheckedCreateWithoutOperationLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOperationLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOperationLogsInput, UserUncheckedUpdateWithoutOperationLogsInput>
  }

  export type UserUpdateWithoutOperationLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    follows?: FollowUpdateManyWithoutFollowerNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    userActions?: UserActionUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUpdateManyWithoutUserNestedInput
    activities?: ActivityUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOperationLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    openid?: NullableStringFieldUpdateOperationsInput | string | null
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    skills?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    exp?: IntFieldUpdateOperationsInput | number
    topicsCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    fansCount?: IntFieldUpdateOperationsInput | number
    followsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    isVip?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUncheckedUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    follows?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutActorNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserNestedInput
    topicQuickActions?: TopicQuickActionUncheckedUpdateManyWithoutUserNestedInput
    topicActions?: TopicActionUncheckedUpdateManyWithoutUserNestedInput
    projectActions?: ProjectActionUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutAuthorNestedInput
    activityParticipants?: ActivityParticipantUncheckedUpdateManyWithoutUserNestedInput
    activityLikes?: ActivityLikeUncheckedUpdateManyWithoutUserNestedInput
    activityComments?: ActivityCommentUncheckedUpdateManyWithoutAuthorNestedInput
    userBindings?: UserBindingUncheckedUpdateManyWithoutUserNestedInput
    loginLogs?: LoginLogUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    feedbackReplies?: FeedbackReplyUncheckedUpdateManyWithoutAdminNestedInput
    creditLogs?: CreditLogUncheckedUpdateManyWithoutUserNestedInput
    badgeRecords?: UserBadgeRecordUncheckedUpdateManyWithoutUserNestedInput
    checkIns?: DailyCheckInUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TopicCreateManyAuthorInput = {
    id?: string
    title: string
    content: string
    contentType?: string
    summary?: string | null
    category: string
    tags?: string | null
    topicType?: string
    demandType?: string | null
    skillsNeeded?: string | null
    skillsProvided?: string | null
    threshold?: number
    wantToHearCount?: number
    canTellCount?: number
    status?: string
    teamSize?: number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: string | null
    website?: string | null
    github?: string | null
    interestedCount?: number
    duration?: string | null
    targetAudience?: string | null
    scheduledTime?: Date | string | null
    deadline?: Date | string | null
    budget?: string | null
    contactInfo?: string | null
    images?: string | null
    documents?: string | null
    videos?: string | null
    links?: string | null
    quickActions?: string | null
    visibility?: string
    viewsCount?: number
    likesCount?: number
    commentsCount?: number
    bookmarksCount?: number
    hotScore?: number
    trendingScore?: number
    isHot?: boolean
    publishedAt?: Date | string | null
    lastActiveAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectCreateManyAuthorInput = {
    id?: string
    category: string
    title: string
    description: string
    tags?: string | null
    teamSize?: number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: string | null
    website?: string | null
    github?: string | null
    viewCount?: number
    likeCount?: number
    commentCount?: number
    interestedCount?: number
    images?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentCreateManyAuthorInput = {
    id?: string
    content: string
    images?: string | null
    parentId?: string | null
    rootId?: string | null
    repliesCount?: number
    likesCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    topicId?: string | null
    projectId?: string | null
  }

  export type LikeCreateManyUserInput = {
    id?: string
    targetType: string
    targetId: string
    createdAt?: Date | string
  }

  export type BookmarkCreateManyUserInput = {
    id?: string
    createdAt?: Date | string
    topicId: string
  }

  export type FollowCreateManyFollowerInput = {
    id?: string
    createdAt?: Date | string
    followingId: string
  }

  export type FollowCreateManyFollowingInput = {
    id?: string
    createdAt?: Date | string
    followerId: string
  }

  export type NotificationCreateManyActorInput = {
    id?: string
    type: string
    title: string
    content: string
    isRead?: boolean
    readAt?: Date | string | null
    link?: string | null
    createdAt?: Date | string
    userId: string
    targetType: string
    targetId: string
  }

  export type NotificationCreateManyUserInput = {
    id?: string
    type: string
    title: string
    content: string
    isRead?: boolean
    readAt?: Date | string | null
    link?: string | null
    createdAt?: Date | string
    actorId?: string | null
    targetType: string
    targetId: string
  }

  export type UserActionCreateManyUserInput = {
    id?: string
    actionType: string
    targetType: string
    targetId: string
    metadata?: string | null
    createdAt?: Date | string
  }

  export type TopicQuickActionCreateManyUserInput = {
    id?: string
    actionType: string
    createdAt?: Date | string
    topicId: string
  }

  export type TopicActionCreateManyUserInput = {
    id?: string
    type: string
    topicId: string
    createdAt?: Date | string
  }

  export type ProjectActionCreateManyUserInput = {
    id?: string
    type: string
    projectId: string
    createdAt?: Date | string
  }

  export type ActivityCreateManyAuthorInput = {
    id?: string
    title: string
    description: string
    location: string
    startTime: Date | string
    endTime?: Date | string | null
    maxParticipants?: number | null
    category: string
    tags?: string | null
    cover?: string | null
    images?: string | null
    participantsCount?: number
    likesCount?: number
    commentsCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ActivityParticipantCreateManyUserInput = {
    id?: string
    createdAt?: Date | string
    activityId: string
  }

  export type ActivityLikeCreateManyUserInput = {
    id?: string
    createdAt?: Date | string
    activityId: string
  }

  export type ActivityCommentCreateManyAuthorInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    activityId: string
  }

  export type UserBindingCreateManyUserInput = {
    id?: string
    type: string
    bindValue: string
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LoginLogCreateManyUserInput = {
    id?: string
    ipAddress?: string | null
    userAgent?: string | null
    loginMethod: string
    status: string
    failReason?: string | null
    loginTime?: Date | string
  }

  export type FeedbackCreateManyUserInput = {
    id?: string
    type: string
    title: string
    content: string
    contact?: string | null
    images?: string | null
    platform?: string
    version?: string | null
    deviceInfo?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    status?: string
    processedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeedbackReplyCreateManyAdminInput = {
    id?: string
    content: string
    createdAt?: Date | string
    feedbackId: string
  }

  export type CreditLogCreateManyUserInput = {
    id?: string
    action: string
    amount: number
    reason?: string | null
    relatedType?: string | null
    relatedId?: string | null
    metadata?: string | null
    createdAt?: Date | string
  }

  export type UserBadgeRecordCreateManyUserInput = {
    id?: string
    progress?: number
    awardedAt?: Date | string
    metadata?: string | null
    badgeId: string
  }

  export type DailyCheckInCreateManyUserInput = {
    id?: string
    checkInDate: Date | string
    credits?: number
    consecutiveDays?: number
    createdAt?: Date | string
  }

  export type UserRoleCreateManyUserInput = {
    id?: string
    roleId: string
    assignedBy?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
  }

  export type OperationLogCreateManyUserInput = {
    id?: string
    action: string
    module: string
    description?: string | null
    method: string
    path: string
    ip?: string | null
    userAgent?: string | null
    status: string
    errorMsg?: string | null
    requestData?: string | null
    responseData?: string | null
    duration?: number | null
    createdAt?: Date | string
  }

  export type TopicUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    topicType?: StringFieldUpdateOperationsInput | string
    demandType?: NullableStringFieldUpdateOperationsInput | string | null
    skillsNeeded?: NullableStringFieldUpdateOperationsInput | string | null
    skillsProvided?: NullableStringFieldUpdateOperationsInput | string | null
    threshold?: IntFieldUpdateOperationsInput | number
    wantToHearCount?: IntFieldUpdateOperationsInput | number
    canTellCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    teamSize?: NullableIntFieldUpdateOperationsInput | number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    interestedCount?: IntFieldUpdateOperationsInput | number
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableStringFieldUpdateOperationsInput | string | null
    videos?: NullableStringFieldUpdateOperationsInput | string | null
    links?: NullableStringFieldUpdateOperationsInput | string | null
    quickActions?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: StringFieldUpdateOperationsInput | string
    viewsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    bookmarksCount?: IntFieldUpdateOperationsInput | number
    hotScore?: FloatFieldUpdateOperationsInput | number
    trendingScore?: FloatFieldUpdateOperationsInput | number
    isHot?: BoolFieldUpdateOperationsInput | boolean
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentUpdateManyWithoutTopicNestedInput
    likes?: LikeUpdateManyWithoutTopicNestedInput
    bookmarks?: BookmarkUpdateManyWithoutTopicNestedInput
    notifications?: NotificationUpdateManyWithoutTopicNestedInput
    userActions?: UserActionUpdateManyWithoutTopicNestedInput
    quickActionsList?: TopicQuickActionUpdateManyWithoutTopicNestedInput
    actions?: TopicActionUpdateManyWithoutTopicNestedInput
  }

  export type TopicUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    topicType?: StringFieldUpdateOperationsInput | string
    demandType?: NullableStringFieldUpdateOperationsInput | string | null
    skillsNeeded?: NullableStringFieldUpdateOperationsInput | string | null
    skillsProvided?: NullableStringFieldUpdateOperationsInput | string | null
    threshold?: IntFieldUpdateOperationsInput | number
    wantToHearCount?: IntFieldUpdateOperationsInput | number
    canTellCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    teamSize?: NullableIntFieldUpdateOperationsInput | number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    interestedCount?: IntFieldUpdateOperationsInput | number
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableStringFieldUpdateOperationsInput | string | null
    videos?: NullableStringFieldUpdateOperationsInput | string | null
    links?: NullableStringFieldUpdateOperationsInput | string | null
    quickActions?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: StringFieldUpdateOperationsInput | string
    viewsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    bookmarksCount?: IntFieldUpdateOperationsInput | number
    hotScore?: FloatFieldUpdateOperationsInput | number
    trendingScore?: FloatFieldUpdateOperationsInput | number
    isHot?: BoolFieldUpdateOperationsInput | boolean
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentUncheckedUpdateManyWithoutTopicNestedInput
    likes?: LikeUncheckedUpdateManyWithoutTopicNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutTopicNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTopicNestedInput
    userActions?: UserActionUncheckedUpdateManyWithoutTopicNestedInput
    quickActionsList?: TopicQuickActionUncheckedUpdateManyWithoutTopicNestedInput
    actions?: TopicActionUncheckedUpdateManyWithoutTopicNestedInput
  }

  export type TopicUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    topicType?: StringFieldUpdateOperationsInput | string
    demandType?: NullableStringFieldUpdateOperationsInput | string | null
    skillsNeeded?: NullableStringFieldUpdateOperationsInput | string | null
    skillsProvided?: NullableStringFieldUpdateOperationsInput | string | null
    threshold?: IntFieldUpdateOperationsInput | number
    wantToHearCount?: IntFieldUpdateOperationsInput | number
    canTellCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    teamSize?: NullableIntFieldUpdateOperationsInput | number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    interestedCount?: IntFieldUpdateOperationsInput | number
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableStringFieldUpdateOperationsInput | string | null
    videos?: NullableStringFieldUpdateOperationsInput | string | null
    links?: NullableStringFieldUpdateOperationsInput | string | null
    quickActions?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: StringFieldUpdateOperationsInput | string
    viewsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    bookmarksCount?: IntFieldUpdateOperationsInput | number
    hotScore?: FloatFieldUpdateOperationsInput | number
    trendingScore?: FloatFieldUpdateOperationsInput | number
    isHot?: BoolFieldUpdateOperationsInput | boolean
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    teamSize?: NullableIntFieldUpdateOperationsInput | number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    interestedCount?: IntFieldUpdateOperationsInput | number
    images?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentUpdateManyWithoutProjectNestedInput
    actions?: ProjectActionUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    teamSize?: NullableIntFieldUpdateOperationsInput | number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    interestedCount?: IntFieldUpdateOperationsInput | number
    images?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
    actions?: ProjectActionUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    teamSize?: NullableIntFieldUpdateOperationsInput | number | null
    lookingForRoles?: NullableJsonNullValueInput | InputJsonValue
    projectStage?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    interestedCount?: IntFieldUpdateOperationsInput | number
    images?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    rootId?: NullableStringFieldUpdateOperationsInput | string | null
    repliesCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: TopicUpdateOneWithoutCommentsNestedInput
    project?: ProjectUpdateOneWithoutCommentsNestedInput
    parent?: CommentUpdateOneWithoutRepliesNestedInput
    replies?: CommentUpdateManyWithoutParentNestedInput
    likes?: LikeUpdateManyWithoutCommentNestedInput
    notifications?: NotificationUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    rootId?: NullableStringFieldUpdateOperationsInput | string | null
    repliesCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topicId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    replies?: CommentUncheckedUpdateManyWithoutParentNestedInput
    likes?: LikeUncheckedUpdateManyWithoutCommentNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    rootId?: NullableStringFieldUpdateOperationsInput | string | null
    repliesCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topicId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LikeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: TopicUpdateOneWithoutLikesNestedInput
    comment?: CommentUpdateOneWithoutLikesNestedInput
  }

  export type LikeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmarkUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: TopicUpdateOneRequiredWithoutBookmarksNestedInput
  }

  export type BookmarkUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topicId?: StringFieldUpdateOperationsInput | string
  }

  export type BookmarkUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topicId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowUpdateWithoutFollowerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    following?: UserUpdateOneRequiredWithoutFollowersNestedInput
  }

  export type FollowUncheckedUpdateWithoutFollowerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followingId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowUncheckedUpdateManyWithoutFollowerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followingId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowUpdateWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    follower?: UserUpdateOneRequiredWithoutFollowsNestedInput
  }

  export type FollowUncheckedUpdateWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followerId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowUncheckedUpdateManyWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followerId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUpdateWithoutActorInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetType?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutReceivedNotificationsNestedInput
    topic?: TopicUpdateOneWithoutNotificationsNestedInput
    comment?: CommentUpdateOneWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutActorInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUncheckedUpdateManyWithoutActorInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetType?: StringFieldUpdateOperationsInput | string
    actor?: UserUpdateOneWithoutSentNotificationsNestedInput
    topic?: TopicUpdateOneWithoutNotificationsNestedInput
    comment?: CommentUpdateOneWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actorId?: NullableStringFieldUpdateOperationsInput | string | null
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actorId?: NullableStringFieldUpdateOperationsInput | string | null
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
  }

  export type UserActionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: TopicUpdateOneWithoutUserActionsNestedInput
  }

  export type UserActionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserActionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TopicQuickActionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: TopicUpdateOneRequiredWithoutQuickActionsListNestedInput
  }

  export type TopicQuickActionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topicId?: StringFieldUpdateOperationsInput | string
  }

  export type TopicQuickActionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topicId?: StringFieldUpdateOperationsInput | string
  }

  export type TopicActionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: TopicUpdateOneRequiredWithoutActionsNestedInput
  }

  export type TopicActionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    topicId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TopicActionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    topicId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectActionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutActionsNestedInput
  }

  export type ProjectActionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectActionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    participantsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: ActivityParticipantUpdateManyWithoutActivityNestedInput
    likes?: ActivityLikeUpdateManyWithoutActivityNestedInput
    comments?: ActivityCommentUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    participantsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: ActivityParticipantUncheckedUpdateManyWithoutActivityNestedInput
    likes?: ActivityLikeUncheckedUpdateManyWithoutActivityNestedInput
    comments?: ActivityCommentUncheckedUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    participantsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityParticipantUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activity?: ActivityUpdateOneRequiredWithoutParticipantsNestedInput
  }

  export type ActivityParticipantUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityId?: StringFieldUpdateOperationsInput | string
  }

  export type ActivityParticipantUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityId?: StringFieldUpdateOperationsInput | string
  }

  export type ActivityLikeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activity?: ActivityUpdateOneRequiredWithoutLikesNestedInput
  }

  export type ActivityLikeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityId?: StringFieldUpdateOperationsInput | string
  }

  export type ActivityLikeUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityId?: StringFieldUpdateOperationsInput | string
  }

  export type ActivityCommentUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activity?: ActivityUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type ActivityCommentUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityId?: StringFieldUpdateOperationsInput | string
  }

  export type ActivityCommentUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityId?: StringFieldUpdateOperationsInput | string
  }

  export type UserBindingUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    bindValue?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBindingUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    bindValue?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBindingUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    bindValue?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoginLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    loginMethod?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    failReason?: NullableStringFieldUpdateOperationsInput | string | null
    loginTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoginLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    loginMethod?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    failReason?: NullableStringFieldUpdateOperationsInput | string | null
    loginTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoginLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    loginMethod?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    failReason?: NullableStringFieldUpdateOperationsInput | string | null
    loginTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    platform?: StringFieldUpdateOperationsInput | string
    version?: NullableStringFieldUpdateOperationsInput | string | null
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reply?: FeedbackReplyUpdateManyWithoutFeedbackNestedInput
  }

  export type FeedbackUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    platform?: StringFieldUpdateOperationsInput | string
    version?: NullableStringFieldUpdateOperationsInput | string | null
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reply?: FeedbackReplyUncheckedUpdateManyWithoutFeedbackNestedInput
  }

  export type FeedbackUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    platform?: StringFieldUpdateOperationsInput | string
    version?: NullableStringFieldUpdateOperationsInput | string | null
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackReplyUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedback?: FeedbackUpdateOneRequiredWithoutReplyNestedInput
  }

  export type FeedbackReplyUncheckedUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackId?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackReplyUncheckedUpdateManyWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackId?: StringFieldUpdateOperationsInput | string
  }

  export type CreditLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    relatedType?: NullableStringFieldUpdateOperationsInput | string | null
    relatedId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CreditLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    relatedType?: NullableStringFieldUpdateOperationsInput | string | null
    relatedId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CreditLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    relatedType?: NullableStringFieldUpdateOperationsInput | string | null
    relatedId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBadgeRecordUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    awardedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    badge?: UserBadgeUpdateOneRequiredWithoutUserRecordsNestedInput
  }

  export type UserBadgeRecordUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    awardedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    badgeId?: StringFieldUpdateOperationsInput | string
  }

  export type UserBadgeRecordUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    awardedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    badgeId?: StringFieldUpdateOperationsInput | string
  }

  export type DailyCheckInUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    checkInDate?: DateTimeFieldUpdateOperationsInput | Date | string
    credits?: IntFieldUpdateOperationsInput | number
    consecutiveDays?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyCheckInUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    checkInDate?: DateTimeFieldUpdateOperationsInput | Date | string
    credits?: IntFieldUpdateOperationsInput | number
    consecutiveDays?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyCheckInUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    checkInDate?: DateTimeFieldUpdateOperationsInput | Date | string
    credits?: IntFieldUpdateOperationsInput | number
    consecutiveDays?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRoleUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedBy?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: RoleUpdateOneRequiredWithoutUserRolesNestedInput
  }

  export type UserRoleUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    assignedBy?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRoleUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    assignedBy?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OperationLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    module?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    method?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    errorMsg?: NullableStringFieldUpdateOperationsInput | string | null
    requestData?: NullableStringFieldUpdateOperationsInput | string | null
    responseData?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OperationLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    module?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    method?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    errorMsg?: NullableStringFieldUpdateOperationsInput | string | null
    requestData?: NullableStringFieldUpdateOperationsInput | string | null
    responseData?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OperationLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    module?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    method?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    errorMsg?: NullableStringFieldUpdateOperationsInput | string | null
    requestData?: NullableStringFieldUpdateOperationsInput | string | null
    responseData?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateManyTopicInput = {
    id?: string
    content: string
    images?: string | null
    parentId?: string | null
    rootId?: string | null
    repliesCount?: number
    likesCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId?: string | null
    authorId: string
  }

  export type LikeCreateManyTopicInput = {
    id?: string
    targetType: string
    createdAt?: Date | string
    userId: string
  }

  export type BookmarkCreateManyTopicInput = {
    id?: string
    createdAt?: Date | string
    userId: string
  }

  export type NotificationCreateManyTopicInput = {
    id?: string
    type: string
    title: string
    content: string
    isRead?: boolean
    readAt?: Date | string | null
    link?: string | null
    createdAt?: Date | string
    userId: string
    actorId?: string | null
    targetType: string
  }

  export type UserActionCreateManyTopicInput = {
    id?: string
    actionType: string
    targetType: string
    metadata?: string | null
    createdAt?: Date | string
    userId: string
  }

  export type TopicQuickActionCreateManyTopicInput = {
    id?: string
    actionType: string
    createdAt?: Date | string
    userId: string
  }

  export type TopicActionCreateManyTopicInput = {
    id?: string
    type: string
    userId: string
    createdAt?: Date | string
  }

  export type CommentUpdateWithoutTopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    rootId?: NullableStringFieldUpdateOperationsInput | string | null
    repliesCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneWithoutCommentsNestedInput
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
    parent?: CommentUpdateOneWithoutRepliesNestedInput
    replies?: CommentUpdateManyWithoutParentNestedInput
    likes?: LikeUpdateManyWithoutCommentNestedInput
    notifications?: NotificationUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutTopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    rootId?: NullableStringFieldUpdateOperationsInput | string | null
    repliesCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    replies?: CommentUncheckedUpdateManyWithoutParentNestedInput
    likes?: LikeUncheckedUpdateManyWithoutCommentNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutTopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    rootId?: NullableStringFieldUpdateOperationsInput | string | null
    repliesCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type LikeUpdateWithoutTopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutLikesNestedInput
    comment?: CommentUpdateOneWithoutLikesNestedInput
  }

  export type LikeUncheckedUpdateWithoutTopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type LikeUncheckedUpdateManyWithoutTopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type BookmarkUpdateWithoutTopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBookmarksNestedInput
  }

  export type BookmarkUncheckedUpdateWithoutTopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type BookmarkUncheckedUpdateManyWithoutTopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUpdateWithoutTopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetType?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutReceivedNotificationsNestedInput
    actor?: UserUpdateOneWithoutSentNotificationsNestedInput
    comment?: CommentUpdateOneWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutTopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    actorId?: NullableStringFieldUpdateOperationsInput | string | null
    targetType?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUncheckedUpdateManyWithoutTopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    actorId?: NullableStringFieldUpdateOperationsInput | string | null
    targetType?: StringFieldUpdateOperationsInput | string
  }

  export type UserActionUpdateWithoutTopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserActionsNestedInput
  }

  export type UserActionUncheckedUpdateWithoutTopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserActionUncheckedUpdateManyWithoutTopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type TopicQuickActionUpdateWithoutTopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTopicQuickActionsNestedInput
  }

  export type TopicQuickActionUncheckedUpdateWithoutTopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type TopicQuickActionUncheckedUpdateManyWithoutTopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type TopicActionUpdateWithoutTopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTopicActionsNestedInput
  }

  export type TopicActionUncheckedUpdateWithoutTopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TopicActionUncheckedUpdateManyWithoutTopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateManyParentInput = {
    id?: string
    content: string
    images?: string | null
    rootId?: string | null
    repliesCount?: number
    likesCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    topicId?: string | null
    projectId?: string | null
    authorId: string
  }

  export type LikeCreateManyCommentInput = {
    id?: string
    targetType: string
    createdAt?: Date | string
    userId: string
  }

  export type NotificationCreateManyCommentInput = {
    id?: string
    type: string
    title: string
    content: string
    isRead?: boolean
    readAt?: Date | string | null
    link?: string | null
    createdAt?: Date | string
    userId: string
    actorId?: string | null
    targetType: string
  }

  export type CommentUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    rootId?: NullableStringFieldUpdateOperationsInput | string | null
    repliesCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: TopicUpdateOneWithoutCommentsNestedInput
    project?: ProjectUpdateOneWithoutCommentsNestedInput
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
    replies?: CommentUpdateManyWithoutParentNestedInput
    likes?: LikeUpdateManyWithoutCommentNestedInput
    notifications?: NotificationUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    rootId?: NullableStringFieldUpdateOperationsInput | string | null
    repliesCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topicId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    replies?: CommentUncheckedUpdateManyWithoutParentNestedInput
    likes?: LikeUncheckedUpdateManyWithoutCommentNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    rootId?: NullableStringFieldUpdateOperationsInput | string | null
    repliesCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topicId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type LikeUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutLikesNestedInput
    topic?: TopicUpdateOneWithoutLikesNestedInput
  }

  export type LikeUncheckedUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type LikeUncheckedUpdateManyWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetType?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutReceivedNotificationsNestedInput
    actor?: UserUpdateOneWithoutSentNotificationsNestedInput
    topic?: TopicUpdateOneWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    actorId?: NullableStringFieldUpdateOperationsInput | string | null
    targetType?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUncheckedUpdateManyWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    actorId?: NullableStringFieldUpdateOperationsInput | string | null
    targetType?: StringFieldUpdateOperationsInput | string
  }

  export type CommentCreateManyProjectInput = {
    id?: string
    content: string
    images?: string | null
    parentId?: string | null
    rootId?: string | null
    repliesCount?: number
    likesCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    topicId?: string | null
    authorId: string
  }

  export type ProjectActionCreateManyProjectInput = {
    id?: string
    type: string
    userId: string
    createdAt?: Date | string
  }

  export type CommentUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    rootId?: NullableStringFieldUpdateOperationsInput | string | null
    repliesCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: TopicUpdateOneWithoutCommentsNestedInput
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
    parent?: CommentUpdateOneWithoutRepliesNestedInput
    replies?: CommentUpdateManyWithoutParentNestedInput
    likes?: LikeUpdateManyWithoutCommentNestedInput
    notifications?: NotificationUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    rootId?: NullableStringFieldUpdateOperationsInput | string | null
    repliesCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topicId?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    replies?: CommentUncheckedUpdateManyWithoutParentNestedInput
    likes?: LikeUncheckedUpdateManyWithoutCommentNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    rootId?: NullableStringFieldUpdateOperationsInput | string | null
    repliesCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topicId?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectActionUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProjectActionsNestedInput
  }

  export type ProjectActionUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectActionUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityParticipantCreateManyActivityInput = {
    id?: string
    createdAt?: Date | string
    userId: string
  }

  export type ActivityLikeCreateManyActivityInput = {
    id?: string
    createdAt?: Date | string
    userId: string
  }

  export type ActivityCommentCreateManyActivityInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
  }

  export type ActivityParticipantUpdateWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutActivityParticipantsNestedInput
  }

  export type ActivityParticipantUncheckedUpdateWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ActivityParticipantUncheckedUpdateManyWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ActivityLikeUpdateWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutActivityLikesNestedInput
  }

  export type ActivityLikeUncheckedUpdateWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ActivityLikeUncheckedUpdateManyWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ActivityCommentUpdateWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutActivityCommentsNestedInput
  }

  export type ActivityCommentUncheckedUpdateWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type ActivityCommentUncheckedUpdateManyWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackReplyCreateManyFeedbackInput = {
    id?: string
    content: string
    createdAt?: Date | string
    adminId: string
  }

  export type FeedbackReplyUpdateWithoutFeedbackInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: UserUpdateOneRequiredWithoutFeedbackRepliesNestedInput
  }

  export type FeedbackReplyUncheckedUpdateWithoutFeedbackInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminId?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackReplyUncheckedUpdateManyWithoutFeedbackInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminId?: StringFieldUpdateOperationsInput | string
  }

  export type UserBadgeRecordCreateManyBadgeInput = {
    id?: string
    progress?: number
    awardedAt?: Date | string
    metadata?: string | null
    userId: string
  }

  export type UserBadgeRecordUpdateWithoutBadgeInput = {
    id?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    awardedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutBadgeRecordsNestedInput
  }

  export type UserBadgeRecordUncheckedUpdateWithoutBadgeInput = {
    id?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    awardedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserBadgeRecordUncheckedUpdateManyWithoutBadgeInput = {
    id?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    awardedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserRoleCreateManyRoleInput = {
    id?: string
    userId: string
    assignedBy?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
  }

  export type RolePermissionCreateManyRoleInput = {
    id?: string
    permissionId: string
    createdAt?: Date | string
  }

  export type UserRoleUpdateWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedBy?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRolesNestedInput
  }

  export type UserRoleUncheckedUpdateWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    assignedBy?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRoleUncheckedUpdateManyWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    assignedBy?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RolePermissionUpdateWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permission?: PermissionUpdateOneRequiredWithoutRolesNestedInput
  }

  export type RolePermissionUncheckedUpdateWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RolePermissionUncheckedUpdateManyWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RolePermissionCreateManyPermissionInput = {
    id?: string
    roleId: string
    createdAt?: Date | string
  }

  export type RolePermissionUpdateWithoutPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: RoleUpdateOneRequiredWithoutPermissionsNestedInput
  }

  export type RolePermissionUncheckedUpdateWithoutPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RolePermissionUncheckedUpdateManyWithoutPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TopicCountOutputTypeDefaultArgs instead
     */
    export type TopicCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TopicCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommentCountOutputTypeDefaultArgs instead
     */
    export type CommentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectCountOutputTypeDefaultArgs instead
     */
    export type ProjectCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ActivityCountOutputTypeDefaultArgs instead
     */
    export type ActivityCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ActivityCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FeedbackCountOutputTypeDefaultArgs instead
     */
    export type FeedbackCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FeedbackCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserBadgeCountOutputTypeDefaultArgs instead
     */
    export type UserBadgeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserBadgeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoleCountOutputTypeDefaultArgs instead
     */
    export type RoleCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PermissionCountOutputTypeDefaultArgs instead
     */
    export type PermissionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PermissionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TopicDefaultArgs instead
     */
    export type TopicArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TopicDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommentDefaultArgs instead
     */
    export type CommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LikeDefaultArgs instead
     */
    export type LikeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LikeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BookmarkDefaultArgs instead
     */
    export type BookmarkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BookmarkDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FollowDefaultArgs instead
     */
    export type FollowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FollowDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserActionDefaultArgs instead
     */
    export type UserActionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserActionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TopicQuickActionDefaultArgs instead
     */
    export type TopicQuickActionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TopicQuickActionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TopicActionDefaultArgs instead
     */
    export type TopicActionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TopicActionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectActionDefaultArgs instead
     */
    export type ProjectActionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectActionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectDefaultArgs instead
     */
    export type ProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ActivityDefaultArgs instead
     */
    export type ActivityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ActivityDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ActivityParticipantDefaultArgs instead
     */
    export type ActivityParticipantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ActivityParticipantDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ActivityLikeDefaultArgs instead
     */
    export type ActivityLikeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ActivityLikeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ActivityCommentDefaultArgs instead
     */
    export type ActivityCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ActivityCommentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserBindingDefaultArgs instead
     */
    export type UserBindingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserBindingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VerificationCodeDefaultArgs instead
     */
    export type VerificationCodeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VerificationCodeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LoginLogDefaultArgs instead
     */
    export type LoginLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LoginLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FeedbackDefaultArgs instead
     */
    export type FeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FeedbackDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FeedbackReplyDefaultArgs instead
     */
    export type FeedbackReplyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FeedbackReplyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CreditLogDefaultArgs instead
     */
    export type CreditLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CreditLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserLevelDefaultArgs instead
     */
    export type UserLevelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserLevelDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserBadgeDefaultArgs instead
     */
    export type UserBadgeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserBadgeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserBadgeRecordDefaultArgs instead
     */
    export type UserBadgeRecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserBadgeRecordDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DailyCheckInDefaultArgs instead
     */
    export type DailyCheckInArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DailyCheckInDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoleDefaultArgs instead
     */
    export type RoleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PermissionDefaultArgs instead
     */
    export type PermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PermissionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RolePermissionDefaultArgs instead
     */
    export type RolePermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RolePermissionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserRoleDefaultArgs instead
     */
    export type UserRoleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserRoleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OperationLogDefaultArgs instead
     */
    export type OperationLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OperationLogDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}