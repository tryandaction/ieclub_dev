// prisma/schema.prisma
// 数据库模型定义

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  
  // 登录认证 - 支持邮箱和微信小程序双登录
  email       String   @unique @db.VarChar(100)
  password    String   @db.VarChar(255) // 密码哈希
  openid      String?  @unique // 微信小程序openid（可选）
  unionid     String?  // 微信unionid（可选）
  sessionKey  String?  // 微信session_key（可选）

  // 基本信息
  nickname    String   @db.VarChar(50)
  avatar      String?  @default("") @db.Text // 头像可选
  gender      Int      @default(0) @db.TinyInt
  phone       String?  @unique @db.VarChar(20)
  bio         String?  @db.Text
  
  // 学校信息
  school      String?  @db.VarChar(100) // 学校
  major       String?  @db.VarChar(100) // 专业
  grade       String?  @db.VarChar(20)  // 年级
  verified    Boolean  @default(false)  // 是否认证

  // 技能和兴趣
  skills      String?  @db.Text // 技能标签数组 (JSON字符串)
  interests   String?  @db.Text // 兴趣标签数组 (JSON字符串)

  // 统计数据
  credits     Int      @default(0)
  level       Int      @default(1)
  exp         Int      @default(0)

  // 计数器
  topicsCount     Int @default(0)
  commentsCount   Int @default(0)
  likesCount      Int @default(0)
  fansCount       Int @default(0)
  followsCount    Int @default(0)

  // 状态
  status      String   @default("active") @db.VarChar(20) // active, banned, deleted
  isCertified Boolean  @default(false)
  isVip       Boolean  @default(false)

  // 时间戳
  lastLoginAt     DateTime?
  lastActiveAt    DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // 关联关系
  topics          Topic[]
  projects        Project[]
  comments        Comment[]
  likes           Like[]
  bookmarks       Bookmark[]
  follows         Follow[] @relation("UserFollows")
  followers       Follow[] @relation("UserFollowers")
  sentNotifications     Notification[] @relation("NotificationSender")
  receivedNotifications Notification[] @relation("NotificationReceiver")
  userActions     UserAction[]
  topicQuickActions TopicQuickAction[]
  topicActions    TopicAction[]
  projectActions  ProjectAction[]
  activities      Activity[]
  activityParticipants ActivityParticipant[]
  activityLikes   ActivityLike[]
  activityComments ActivityComment[]
  userBindings    UserBinding[]
  loginLogs       LoginLog[]
  feedbacks       Feedback[]
  feedbackReplies FeedbackReply[] @relation("AdminReplies")
  creditLogs      CreditLog[]
  badgeRecords    UserBadgeRecord[]
  checkIns        DailyCheckIn[]
  roles           UserRole[]
  operationLogs   OperationLog[]

  @@map("users")
}

model Topic {
  id          String   @id @default(cuid())

  // 基本信息
  title       String   @db.VarChar(200)
  content     String   @db.LongText
  contentType String   @default("topic_offer") @db.VarChar(20) // topic_offer（我来讲）, topic_demand（想听）, project（项目宣传）
  summary     String?  @db.Text
  category    String   @db.VarChar(50)
  tags        String?  @db.Text // 标签数组 (JSON字符串)

  // 话题类型 - 融入开发代码的核心创新
  topicType   String   @default("discussion") @db.VarChar(20) // discussion, demand, supply, collaboration
  
    // 供需匹配机制 - 来自开发代码的15人成团创新
    demandType      String?  @db.VarChar(20) // 人员, 项目, 资金, 资源
    skillsNeeded    String?  @db.Text // 需要的技能 (JSON字符串)
    skillsProvided  String?  @db.Text // 提供的技能 (JSON字符串)
    threshold       Int      @default(15) // 成团阈值（默认15人）
    wantToHearCount Int      @default(0) // 想听人数
    canTellCount    Int      @default(0) // 我能讲人数
    status          String   @default("collecting") @db.VarChar(20) // collecting, scheduled, completed
  
    // 项目特有字段 - 项目宣传功能
    teamSize        Int?     // 团队规模
    lookingForRoles Json?    // 寻找的角色 (JSON数组)
    projectStage    String?  @db.VarChar(50) // 项目阶段
    website         String?  @db.VarChar(200)
    github          String?  @db.VarChar(200)
    interestedCount Int      @default(0) // 感兴趣人数
  
    // 时间安排 - 来自开发代码的功能
    duration        String?  @db.VarChar(50) // 预计时长
    targetAudience  String?  @db.Text // 目标听众
    scheduledTime   DateTime? // 安排时间
  deadline    DateTime?
  budget      String?  @db.VarChar(100)
  contactInfo String?  @db.Text

  // 媒体文件
  images      String?  @db.Text // 图片数组 (JSON字符串)
  documents   String?  @db.Text // 文档数组 (JSON字符串)
  videos      String?  @db.Text // 视频数组 (JSON字符串)
  links       String?  @db.Text // 链接数组 (JSON字符串)

  // 快速操作
  quickActions String? @db.Text // 快速操作配置 (JSON字符串)

  // 可见性
  visibility  String   @default("public") @db.VarChar(20) // public, private, followers

  // 统计数据
  viewsCount      Int @default(0)
  likesCount      Int @default(0)
  commentsCount   Int @default(0)
  bookmarksCount  Int @default(0)
  hotScore        Float @default(0)
  trendingScore   Float @default(0)
  isHot           Boolean @default(false)

  // 状态 - 融入开发代码的状态管理
  publishedAt DateTime?

  // 时间戳
  lastActiveAt DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // 关联关系
  author       User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     String
  comments     Comment[]
  likes        Like[] @relation("LikeTopic")
  bookmarks    Bookmark[]
  notifications Notification[] @relation("NotificationTopic")
  userActions  UserAction[] @relation("UserActionTopic")
  quickActionsList TopicQuickAction[]
  actions      TopicAction[]

  @@map("topics")
}

model Comment {
  id          String   @id @default(cuid())

  // 评论内容
  content     String   @db.Text
  images      String?  @db.Text // 图片数组 (JSON字符串)

  // 评论层级
  parentId    String?  // 父评论ID
  rootId      String?  // 根评论ID（如果是回复）
  repliesCount Int     @default(0)

  // 统计数据
  likesCount  Int      @default(0)

  // 状态
  status      String   @default("published") @db.VarChar(20) // published, deleted

  // 时间戳
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联关系
  topic       Topic? @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId     String?
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String?
  author      User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  parent      Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies     Comment[] @relation("CommentReplies")
  likes       Like[] @relation("LikeComment")
  notifications Notification[] @relation("NotificationComment")

  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  targetType String  @db.VarChar(20) // topic, comment
  targetId   String

  createdAt DateTime @default(now())

  // 关联关系
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  topic     Topic? @relation("LikeTopic", fields: [targetId], references: [id], map: "likes_topic_targetId_fkey")
  comment   Comment? @relation("LikeComment", fields: [targetId], references: [id], map: "likes_comment_targetId_fkey")

  @@unique([userId, targetType, targetId])
  @@map("likes")
}

model Bookmark {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // 关联关系
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  topic     Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId   String

  @@unique([userId, topicId])
  @@map("bookmarks")
}

model Follow {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())

  // 关联关系
  follower    User @relation("UserFollows", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String

  @@unique([followerId, followingId])
  @@map("follows")
}

model Notification {
  id          String   @id @default(cuid())

  // 通知类型
  type        String   @db.VarChar(20) // like, comment, reply, follow, match, system

  // 通知内容
  title       String   @db.VarChar(100)
  content     String   @db.Text

  // 状态
  isRead      Boolean  @default(false)
  readAt      DateTime?

  // 跳转链接
  link        String?  @db.Text

  // 时间戳
  createdAt   DateTime @default(now())

  // 关联关系
  user        User @relation("NotificationReceiver", fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  actor       User? @relation("NotificationSender", fields: [actorId], references: [id])
  actorId     String?
  topic       Topic? @relation("NotificationTopic", fields: [targetId], references: [id], map: "notifications_topic_targetId_fkey")
  comment     Comment? @relation("NotificationComment", fields: [targetId], references: [id], map: "notifications_comment_targetId_fkey")
  targetType  String   @db.VarChar(20) // topic, comment, user
  targetId    String

  @@index([userId])
  @@index([isRead])
  @@index([type])
  @@index([createdAt])
  @@index([userId, isRead])
  @@map("notifications")
}

model UserAction {
  id          String   @id @default(cuid())

  // 行为类型
  actionType  String   @db.VarChar(20) // view, like, comment, bookmark, click, share

  // 目标
  targetType  String   @db.VarChar(20) // topic, comment, user
  targetId    String

  // 元数据
  metadata    String?  @db.Text // 元数据 (JSON字符串)

  // 时间戳
  createdAt   DateTime @default(now())

  // 关联关系
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  topic       Topic? @relation("UserActionTopic", fields: [targetId], references: [id], map: "user_actions_topic_targetId_fkey")

  @@map("user_actions")
}

model TopicQuickAction {
  id          String   @id @default(cuid())

  // 操作类型
  actionType  String   @db.VarChar(20) // interested, can_help, want_collab

  // 时间戳
  createdAt   DateTime @default(now())

  // 关联关系
  topic       Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId     String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  @@unique([topicId, userId, actionType])
  @@map("topic_quick_actions")
}

// ==================== 新增：话题互动表（来自开发代码） ====================
model TopicAction {
  id          String   @id @default(cuid())
  type        String   @db.VarChar(20) // like, want_hear, can_tell

  userId      String
  user        User     @relation(fields: [userId], references: [id])

  topicId     String
  topic       Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())

  @@unique([userId, topicId, type])
  @@index([userId])
  @@index([topicId])
  @@map("topic_actions")
}

// ==================== 新增：项目互动表（来自开发代码） ====================
model ProjectAction {
  id          String   @id @default(cuid())
  type        String   @db.VarChar(20) // like, interested

  userId      String
  user        User     @relation(fields: [userId], references: [id])

  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())

  @@unique([userId, projectId, type])
  @@index([userId])
  @@index([projectId])
  @@map("project_actions")
}

// ==================== 新增：项目表（来自开发代码） ====================
model Project {
  id              String      @id @default(cuid())
  category        String      @db.VarChar(50)
  title           String      @db.VarChar(200)
  description     String      @db.LongText
  tags            String?     @db.Text // JSON数组

  // 项目特有字段（来自开发代码）
  teamSize        Int?
  lookingForRoles Json?       // JSON数组
  projectStage    String?     @db.VarChar(50)
  website         String?     @db.VarChar(200)
  github          String?     @db.VarChar(200)

  // 统计数据
  viewCount       Int         @default(0)
  likeCount       Int         @default(0)
  commentCount    Int         @default(0)
  interestedCount Int         @default(0)

  // 媒体文件
  images          String?     @db.Text // JSON数组

  authorId        String
  author          User        @relation(fields: [authorId], references: [id])

  comments        Comment[]
  actions         ProjectAction[]

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([authorId])
  @@index([category])
  @@index([createdAt])
  @@map("projects")
}

// ==================== 新增：活动表 ====================
model Activity {
  id              String      @id @default(cuid())
  title           String      @db.VarChar(200)
  description     String      @db.LongText
  location        String      @db.VarChar(200)
  startTime       DateTime
  endTime         DateTime?
  maxParticipants Int?
  category        String      @db.VarChar(50)
  tags            String?     @db.Text // JSON数组
  cover           String?     @db.Text
  images          String?     @db.Text // JSON数组
  
  // 统计数据
  participantsCount Int       @default(0)
  likesCount        Int       @default(0)
  commentsCount     Int       @default(0)
  
  // 状态
  status          String      @default("published") @db.VarChar(20) // published, draft, deleted
  
  // 时间戳
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // 关联关系
  authorId        String
  author          User        @relation(fields: [authorId], references: [id])
  participants    ActivityParticipant[]
  likes           ActivityLike[]
  comments        ActivityComment[]
  
  @@index([authorId])
  @@index([category])
  @@index([startTime])
  @@index([status])
  @@index([createdAt])
  @@map("activities")
}

// ==================== 活动参与表 ====================
model ActivityParticipant {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  
  // 关联关系
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  activityId  String
  activity    Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  
  @@unique([userId, activityId])
  @@index([userId])
  @@index([activityId])
  @@map("activity_participants")
}

// ==================== 活动点赞表 ====================
model ActivityLike {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  
  // 关联关系
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  activityId  String
  activity    Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  
  @@unique([userId, activityId])
  @@index([userId])
  @@index([activityId])
  @@map("activity_likes")
}

// ==================== 活动评论表 ====================
model ActivityComment {
  id          String   @id @default(cuid())
  content     String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 关联关系
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  activityId  String
  activity    Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  
  @@index([authorId])
  @@index([activityId])
  @@index([createdAt])
  @@map("activity_comments")
}

// ==================== 新增：用户绑定表（阶段一） ====================
model UserBinding {
  id          String   @id @default(cuid())
  
  // 绑定类型
  type        String   @db.VarChar(20) // wechat, phone, email
  
  // 绑定值
  bindValue   String   @db.VarChar(100)
  
  // 额外信息（如微信昵称、头像等）
  metadata    String?  @db.Text // JSON字符串
  
  // 时间戳
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 关联关系
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([type, bindValue])
  @@index([userId])
  @@map("user_bindings")
}

// ==================== 新增：验证码表（阶段一） ====================
model VerificationCode {
  id          String   @id @default(cuid())
  
  // 邮箱/手机号
  email       String   @db.VarChar(100)
  
  // 验证码
  code        String   @db.VarChar(6)
  
  // 类型
  type        String   @db.VarChar(20) // register, login, reset_password, bind_email, bind_phone
  
  // 状态
  used        Boolean  @default(false)
  usedAt      DateTime?
  
  // 过期时间
  expiresAt   DateTime
  
  // 创建时间
  createdAt   DateTime @default(now())
  
  @@index([email])
  @@index([code])
  @@index([expiresAt])
  @@map("verification_codes")
}

// ==================== 新增：登录日志表（阶段一） ====================
model LoginLog {
  id          String   @id @default(cuid())
  
  // IP地址
  ipAddress   String?  @db.VarChar(45)
  
  // User Agent
  userAgent   String?  @db.Text
  
  // 登录方式
  loginMethod String   @db.VarChar(20) // password, code, wechat
  
  // 登录状态
  status      String   @db.VarChar(20) // success, failed
  
  // 失败原因
  failReason  String?  @db.Text
  
  // 登录时间
  loginTime   DateTime @default(now())
  
  // 关联关系
  userId      String?  // 登录失败时可能没有userId
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([ipAddress])
  @@index([loginTime])
  @@map("login_logs")
}

// ==================== 新增：用户反馈表 ====================
model Feedback {
  id          String   @id @default(cuid())
  
  // 反馈类型
  type        String   @db.VarChar(20) // bug, feature, improvement, other
  
  // 反馈内容
  title       String   @db.VarChar(100)
  content     String   @db.Text
  
  // 联系方式（可选）
  contact     String?  @db.VarChar(100)
  
  // 截图和附件
  images      String?  @db.Text // JSON数组
  
  // 平台信息
  platform    String   @default("web") @db.VarChar(20) // web, miniprogram
  version     String?  @db.VarChar(20)
  deviceInfo  String?  @db.Text // JSON对象
  
  // 请求信息
  ipAddress   String?  @db.VarChar(45)
  userAgent   String?  @db.Text
  
  // 状态
  status      String   @default("pending") @db.VarChar(20) // pending, processing, resolved, closed
  processedAt DateTime?
  
  // 时间戳
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 关联关系
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reply       FeedbackReply[]
  
  @@index([userId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@map("feedbacks")
}

// ==================== 新增：反馈回复表 ====================
model FeedbackReply {
  id          String   @id @default(cuid())
  
  // 回复内容
  content     String   @db.Text
  
  // 时间戳
  createdAt   DateTime @default(now())
  
  // 关联关系
  feedbackId  String
  feedback    Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  adminId     String
  admin       User     @relation("AdminReplies", fields: [adminId], references: [id])
  
  @@index([feedbackId])
  @@index([adminId])
  @@index([createdAt])
  @@map("feedback_replies")
}

// ==================== 新增：积分系统 ====================

// 积分历史记录表
model CreditLog {
  id          String   @id @default(cuid())
  
  // 积分变动
  action      String   @db.VarChar(50) // topic_create, comment_create, like_received, check_in, etc.
  amount      Int      // 变动金额（正数为增加，负数为减少）
  reason      String?  @db.VarChar(200)
  
  // 关联对象
  relatedType String?  @db.VarChar(20) // topic, comment, like
  relatedId   String?
  
  // 元数据
  metadata    String?  @db.Text // JSON字符串
  
  // 时间戳
  createdAt   DateTime @default(now())
  
  // 关联关系
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("credit_logs")
}

// 用户等级表
model UserLevel {
  id          String   @id @default(cuid())
  
  // 等级信息
  level       Int      @unique
  name        String   @db.VarChar(50)
  minExp      Int
  maxExp      Int
  
  // 显示
  icon        String?  @db.VarChar(200)
  color       String?  @db.VarChar(20)
  
  // 权限
  privileges  String?  @db.Text // JSON字符串
  
  // 时间戳
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("user_levels")
}

// 勋章定义表
model UserBadge {
  id          String   @id @default(cuid())
  
  // 勋章信息
  code        String   @unique @db.VarChar(50)
  name        String   @db.VarChar(50)
  description String?  @db.Text
  icon        String?  @db.VarChar(200)
  
  // 分类
  category    String   @db.VarChar(20) // basic, content, social, activity, special
  rarity      String   @default("common") @db.VarChar(20) // common, uncommon, rare, epic, legendary
  
  // 获取条件
  condition   String?  @db.Text // JSON字符串
  
  // 状态
  isActive    Boolean  @default(true)
  
  // 时间戳
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 关联关系
  userRecords UserBadgeRecord[]
  
  @@index([category])
  @@index([rarity])
  @@map("user_badges")
}

// 用户获得的勋章记录
model UserBadgeRecord {
  id          String   @id @default(cuid())
  
  // 进度（某些勋章可能有进度条）
  progress    Int      @default(100)
  
  // 获得时间
  awardedAt   DateTime @default(now())
  
  // 元数据
  metadata    String?  @db.Text // JSON字符串
  
  // 关联关系
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badgeId     String
  badge       UserBadge @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  
  @@unique([userId, badgeId])
  @@index([userId])
  @@index([badgeId])
  @@map("user_badge_records")
}

// 每日签到记录表
model DailyCheckIn {
  id              String   @id @default(cuid())
  
  // 签到信息
  checkInDate     DateTime @db.Date
  credits         Int      @default(5)
  consecutiveDays Int      @default(1)
  
  // 时间戳
  createdAt       DateTime @default(now())
  
  // 关联关系
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, checkInDate])
  @@index([userId])
  @@index([checkInDate])
  @@map("daily_check_ins")
}

// ==================== RBAC 权限管理系统 ====================

// 角色表
model Role {
  id          String   @id @default(cuid())
  
  // 角色信息
  name        String   @unique @db.VarChar(50) // 角色名称，如 admin, moderator, vip_user
  displayName String   @db.VarChar(100) // 显示名称，如 "系统管理员"
  description String?  @db.Text
  
  // 角色级别（数字越大权限越高）
  level       Int      @default(0)
  
  // 角色类型
  type        String   @default("custom") @db.VarChar(20) // system(系统内置), custom(自定义)
  
  // 状态
  isActive    Boolean  @default(true)
  
  // 时间戳
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 关联关系
  userRoles   UserRole[]
  permissions RolePermission[]
  
  @@index([name])
  @@index([type])
  @@index([isActive])
  @@map("roles")
}

// 权限表
model Permission {
  id          String   @id @default(cuid())
  
  // 权限信息
  name        String   @unique @db.VarChar(100) // 权限名称，如 user.create, topic.delete
  displayName String   @db.VarChar(100) // 显示名称
  description String?  @db.Text
  
  // 权限分组
  module      String   @db.VarChar(50) // 模块，如 user, topic, comment, admin
  action      String   @db.VarChar(50) // 操作，如 create, read, update, delete
  
  // 资源类型（可选，用于细粒度控制）
  resource    String?  @db.VarChar(50)
  
  // 状态
  isActive    Boolean  @default(true)
  
  // 时间戳
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 关联关系
  roles       RolePermission[]
  
  @@index([module])
  @@index([action])
  @@index([isActive])
  @@map("permissions")
}

// 角色-权限关联表
model RolePermission {
  id           String   @id @default(cuid())
  
  // 关联关系
  roleId       String
  role         Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  // 时间戳
  createdAt    DateTime @default(now())
  
  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
  @@map("role_permissions")
}

// 用户-角色关联表
model UserRole {
  id        String   @id @default(cuid())
  
  // 关联关系
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  roleId    String
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  // 分配信息
  assignedBy String?  // 分配者ID
  expiresAt  DateTime? // 过期时间（可选，用于临时角色）
  
  // 时间戳
  createdAt  DateTime @default(now())
  
  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
  @@index([expiresAt])
  @@map("user_roles")
}

// 操作日志表（用于审计）
model OperationLog {
  id          String   @id @default(cuid())
  
  // 操作信息
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  action      String   @db.VarChar(100) // 操作类型
  module      String   @db.VarChar(50)  // 模块
  description String?  @db.Text         // 操作描述
  
  // 请求信息
  method      String   @db.VarChar(10)  // HTTP方法
  path        String   @db.VarChar(500) // 请求路径
  ip          String?  @db.VarChar(50)  // IP地址
  userAgent   String?  @db.Text         // User Agent
  
  // 操作结果
  status      String   @db.VarChar(20)  // success, failed
  errorMsg    String?  @db.Text         // 错误信息
  
  // 操作数据（JSON格式）
  requestData String?  @db.Text
  responseData String? @db.Text
  
  // 时间
  duration    Int?     // 执行时长（毫秒）
  createdAt   DateTime @default(now())
  
  @@index([userId])
  @@index([action])
  @@index([module])
  @@index([status])
  @@index([createdAt])
  @@map("operation_logs")
}