# .github/workflows/ci.yml
# GitHub Actions持续集成配置

name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # 后端测试
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: ieclub_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: 安装依赖
        working-directory: ./ieclub-backend
        run: npm ci

      - name: 代码检查
        working-directory: ./ieclub-backend
        run: npm run lint

      - name: 生成 Prisma Client
        working-directory: ./ieclub-backend
        run: npm run prisma:generate

      - name: 运行数据库迁移
        working-directory: ./ieclub-backend
        env:
          DATABASE_URL: mysql://root:test_password@localhost:3306/ieclub_test
        run: npm run prisma:migrate

      - name: 运行测试
        working-directory: ./ieclub-backend
        env:
          NODE_ENV: test
          DATABASE_URL: mysql://root:test_password@localhost:3306/ieclub_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test_secret_key
        run: npm run test:ci

      - name: 上传测试覆盖率报告
        uses: codecov/codecov-action@v3
        with:
          files: ./ieclub-backend/coverage/coverage-final.json
          flags: backend
          name: backend-coverage

  # 前端构建
  frontend-build:
    name: Frontend Build
    runs-on: ubuntu-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 安装依赖
        working-directory: ./ieclub-taro
        run: npm ci

      - name: 代码检查
        working-directory: ./ieclub-taro
        run: npm run lint

      - name: 构建微信小程序
        working-directory: ./ieclub-taro
        run: npm run build:weapp

      - name: 构建H5版本
        working-directory: ./ieclub-taro
        run: npm run build:h5

      - name: 上传构建产物
        uses: actions/upload-artifact@v3
        with:
          name: frontend-dist
          path: |
            ieclub-taro/dist
          retention-days: 7

  # Docker镜像构建
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [backend-test]

    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 登录 Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 提取 metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ieclub/backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: 构建并推送 Docker 镜像
        uses: docker/build-push-action@v4
        with:
          context: ./ieclub-backend
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 代码质量检查
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # SonarQube需要完整历史

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}