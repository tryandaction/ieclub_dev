# =================================================================
#  CI & CD Workflow (All-in-One)
#  File: .github/workflows/ci.yml
# =================================================================
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # ==================================
  # Job 1: Backend Checks
  # ==================================
  backend-checks:
    name: "CI / Backend"
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env: { MYSQL_ROOT_PASSWORD: root_password, MYSQL_DATABASE: ieclub_test }
        ports: ['3306:3306']
        options: >-
          --health-cmd="mysqladmin ping --silent" --health-interval=10s --health-timeout=5s --health-retries=5
      redis:
        image: redis:7
        ports: ['6379:6379']
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with: { node-version: '18', cache: 'npm', cache-dependency-path: 'ieclub-backend/package-lock.json' }
      - name: Install Backend Dependencies
        working-directory: ./ieclub-backend
        run: npm ci
      - name: Run Backend Lint
        working-directory: ./ieclub-backend
        run: npm run lint -- --max-warnings=0
      - name: Run Backend Tests
        working-directory: ./ieclub-backend
        env:
          DATABASE_URL: "mysql://root:root_password@127.0.0.1:3306/ieclub_test" # 在 job 内部，可以用 127.0.0.1
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379
          JWT_SECRET: a-dummy-jwt-secret-for-ci-testing-only
        run: |
          npx prisma migrate deploy
          npm test

  # ==================================
  # Job 2: Frontend Checks
  # ==================================
  frontend-checks:
    name: "CI / Frontend"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with: { node-version: '18', cache: 'npm', cache-dependency-path: 'ieclub-taro/package-lock.json' }
      - name: Install Frontend Dependencies
        working-directory: ./ieclub-taro
        run: npm ci
      - name: Run Frontend Lint & Type Check
        working-directory: ./ieclub-taro
        run: |
          npm run lint -- --max-warnings=0
          npm run type-check
      - name: Build Frontend (H5 & WeApp)
        working-directory: ./ieclub-taro
        run: |
          npm run build:h5
          npm run build:weapp

  # ==================================
  # Job 3: Deploy to Production (新增的部署任务)
  # ==================================
  deploy:
    name: "Deploy / Production"
    runs-on: ubuntu-latest
    
    # --- 关键的触发条件 ---
    # 1. 依赖于 backend-checks 和 frontend-checks 都成功
    needs: [backend-checks, frontend-checks]
    # 2. 只有当事件是推送到 main 分支时，才执行这个 job
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /var/www/ieclub_dev || exit 1
            echo "🚚 1/5 Pulling latest code..."
            git pull origin main
            echo "🚀 2/5 Deploying backend..."
            cd ieclub-backend
            npm install --production
            npx prisma migrate deploy
            pm2 reload ieclub-api
            cd ..
            echo "🚀 3/5 Deploying frontend..."
            cd ieclub-taro
            npm install
            npm run build:h5
            cd ..
            echo "🔐 4/5 Setting permissions..."
            sudo chown -R xingduo:xingduo /var/www/ieclub_dev
            echo "🔄 5/5 Reloading Nginx..."
            sudo systemctl reload nginx
            echo "🎉 Deployment completed!"